#include "<df>/dragonfruit.h"
#include "../../Loader/LoaderGlobal.h"

#include "<inc>/HALArgs.h"
#include "<inc>/HALConsole.h"
#include "<inc>/HALResource.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALLog.h"

extern HALPlatformConsoleInit { format wantmode -- havemode }

var HALConsoleMode 0
public HALConsoleMode

var HALConsoleFont 0
public HALConsoleFont

fn HALConsoleInit { ldrinfo -- }
	auto mode
	CONSOLEMODETTY mode!

	auto font
	0 font!

	auto format
	ldrinfo@ LoaderInfo_HALConsoleFBFormat + @ format!

	if ("-ttymode" HALArgsCheck ~~)
		if (format@)
			"HALFont" HALResourceByName font!

			if (font@)
				font@ HALResourceWire

				font@ HALResourceData font!

				if (font@ HCFHeader_Magic + @ HCFMAGIC ==)
					ldrinfo@ font@ HALConsoleInitParameters

					CONSOLEMODESCREEN mode!
				end
			end
		end
	end

	ldrinfo@ mode@ HALPlatformConsoleInit mode!

	mode@ HALConsoleMode!

	if (mode@ CONSOLEMODESCREEN ==)
		CONSOLEBG HALPlatformConsoleClear
	end
end

var HALConsoleFontWidth 0
public HALConsoleFontWidth

var HALConsoleFontHeight 0
public HALConsoleFontHeight

var HALConsoleWidthChars 0
public HALConsoleWidthChars

var HALConsoleHeightChars 0
public HALConsoleHeightChars

var HALConsoleWidthPix 0
public HALConsoleWidthPix

var HALConsoleHeightPix 0
public HALConsoleHeightPix

var HALConsoleFontFlags 0
public HALConsoleFontFlags

var HALConsoleFontName 0
public HALConsoleFontName

var HALConsoleFontGlyphSize 0

fn HALConsoleInitParameters { ldrinfo font -- }
	font@ HCFHeader_SIZEOF + HALConsoleFont!

	auto cw
	font@ HCFHeader_Width + @ cw!

	cw@ HALConsoleFontWidth!

	auto ch
	font@ HCFHeader_Height + @ ch!

	ch@ HALConsoleFontHeight!

	font@ HCFHeader_Flags + @ HALConsoleFontFlags!

	cw@ 7 + 3 >> ch@ * HALConsoleFontGlyphSize!

	auto sw
	ldrinfo@ LoaderInfo_HALConsoleFBWidth + @ sw!

	sw@ HALConsoleWidthPix!

	auto sh
	ldrinfo@ LoaderInfo_HALConsoleFBHeight + @ sh!

	sh@ HALConsoleHeightPix!

	sw@ cw@ / HALConsoleWidthChars!
	sh@ ch@ / HALConsoleHeightChars!

	font@ HCFHeader_FontName + HALConsoleFontName!
end

extern HALPlatformConsolePutc { c -- }
extern HALPlatformConsoleDrawChar { bmp x y -- }
extern HALPlatformConsoleClear { color -- }
extern HALPlatformConsoleScroll { color -- }

var HALConsoleX 0
var HALConsoleY 0

fn private Newline { -- }
	1 HALConsoleY +=
	0 HALConsoleX!

	if (HALConsoleY@ HALConsoleHeightChars@ >)
		HALConsoleScroll
	end
end

fn HALConsoleSetMode { newmode -- oldmode }
	HALConsoleMode@ oldmode!
	newmode@ HALConsoleMode!
end

extern HALPlatformConsoleGetc { -- c }

fn HALGetc { -- c }
	if (HALConsoleMode@ CONSOLEMODETTY ~=)
		ERR c!
		return
	end

	HALPlatformConsoleGetc c!
end

fn HALPutc { c -- }
	if (HALConsoleMode@ CONSOLEMODESCREEN ==)
		auto rs
		HALCPUInterruptDisable rs!

		if (c@ '\n' ==)
			Newline
		end else
			if (HALConsoleX@ HALConsoleWidthChars@ ==)
				Newline
			end

			if (HALConsoleY@ HALConsoleHeightChars@ ==)
				HALConsoleScroll
			end

			HALConsoleFont@ c@ HALConsoleFontGlyphSize@ * + // bmp
			HALConsoleX@ HALConsoleFontWidth@ * // x
			HALConsoleY@ HALConsoleFontHeight@ * // y
			HALPlatformConsoleDrawChar

			1 HALConsoleX +=
		end

		rs@ HALCPUInterruptRestore
	end else
		c@ HALPlatformConsolePutc
	end
end

fn HALConsoleQuery { -- w h x y }
	if (HALConsoleMode@ CONSOLEMODESCREEN ~=)
		80 w!
		25 h!
		0 x!
		0 y!
	end else
		HALConsoleWidthChars@ w!
		HALConsoleHeightChars@ h!
		HALConsoleX@ x!
		HALConsoleY@ y!
	end
end

fn HALConsoleSetCursor { x y -- }
	x@ HALConsoleX!
	y@ HALConsoleY!
end

fn HALConsoleClear { -- }
	0 HALConsoleX!
	0 HALConsoleY!

	CONSOLEBG HALPlatformConsoleClear
end

fn HALConsoleScroll { -- }
	0 HALConsoleX!
	HALConsoleHeightChars@ 1 - HALConsoleY!

	CONSOLEBG HALPlatformConsoleScroll
end

fn VPrintf { argvt argcn fmt -- }
	argvt@ argcn@ fmt@ 1 VFPrintf
end