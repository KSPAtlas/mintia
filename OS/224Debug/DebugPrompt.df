#include "<df>/dragonfruit.h"
#include "<inc>/HALConsole.h"
#include "<inc>/HALLog.h"

#include "<inc>/DebugIO.h"
#include "<inc>/DebugSymbols.h"

#include "<inc>/KeDPC.h"
#include "<inc>/KeTime.h"
#include "<inc>/KeTimer.h"

#include "<inc>/KeProcess.h"

#include "<inc>/KeSecurity.h"

#include "../Loader/LoaderGlobal.h"

const COMMANDS 9

table DebugCommands
	"help"
	"Displays this help text."
	pointerof DebugCommandHelp

	"exit"
	"Exits from the debugger prompt."
	pointerof DebugCommandExit

	"show"
	"[module!symbol] Shows the value of a symbol."
	pointerof DebugCommandShow

	"procs"
	"<username> Lists the active processes <of a specific username>."
	pointerof DebugCommandProc

	"users"
	"Lists the system's registered users."
	pointerof DebugCommandUser

	"roles"
	"Lists the system's registered roles."
	pointerof DebugCommandRole

	"pcsym"
	"[pc] Find the function a program counter is part of."
	pointerof DebugCommandPcsym

	"ready"
	"Print all of the ready queues."
	pointerof DebugCommandReady

	"threads"
	"[proc] Lists the threads of a process."
	pointerof DebugCommandThread
endtable

struct Command
	4 Name
	4 Description
	4 Func
endstruct

fnptr CommandFunc { p -- halt }

buffer DebugPromptBuffer 256

buffer DebugWordBuffer 256

fn DebugPrompt { -- }
	auto running
	1 running!

	while (running@)
		">> " Printf
		DebugPromptBuffer 255 DebugGets

		auto p
		DebugPromptBuffer DebugWordBuffer ' ' strtok p!

		if (DebugWordBuffer gb)
			auto tp
			DebugCommands tp!

			auto i
			0 i!

			auto found
			0 found!

			while (i@ COMMANDS <)
				if (tp@ Command_Name + @ DebugWordBuffer strcmp)
					p@ tp@ Command_Func + @ CommandFunc ~~ running!
					1 found!
					break
				end

				1 i +=
				Command_SIZEOF tp +=
			end

			if (found@ ~~)
				"unrecognized command\n" Printf
			end
		end
	end
end

fn (CommandFunc) DebugCommandHelp { p -- halt }
	auto tp
	DebugCommands tp!

	auto i
	0 i!

	while (i@ COMMANDS <)
		tp@ Command_Description + @ tp@ Command_Name + @ " \[[33m%10s\[[0m%s\n" Printf

		1 i +=
		Command_SIZEOF tp +=
	end

	0 halt!
end

fn (CommandFunc) DebugCommandExit { p -- halt }
	1 halt!
end

fn (CommandFunc) DebugCommandShow { p -- halt }
	0 halt!

	if (p@ ~~)
		"please specify both a module and symbol name\n" Printf
		return
	end

	1 p +=

	auto ref
	0 ref!

	if (p@ gb '@' ==)
		1 ref!
		1 p +=
	end

	auto modname
	p@ modname!

	while (p@ gb '!' ~=)
		if (p@ gb ~~)
			"please specify both a module and symbol name\n" Printf
			return
		end

		1 p +=
	end

	0 p@ sb

	auto symname
	p@ 1 + symname!

	if (symname@ gb ~~)
		"please specify both a module and symbol name\n" Printf
		return
	end

	auto dll
	modname@ DebugGetDLL dll!

	if (dll@ ~~)
		modname@ "module '%s' not found\n" Printf
		return
	end

	auto addr
	dll@ symname@ DebugGetSymbolAddress addr!

	if (addr@ 0 ==)
		modname@ symname@ "symbol '%s' not found in module '%s'\n" Printf
		return
	end

	if (ref@)
		addr@@ dup symname@ modname@ "@%s!%s = 0x%08x (%d)\n" Printf
	end else
		addr@ dup symname@ modname@ "%s!%s = 0x%08x\n" Printf
	end
end

fn DebugCommandProc { p -- halt }
	0 halt!

	auto name
	0 name!

	if (p@)
		p@ 1 + name!
	end

	auto proc
	KeProcessListHead@ proc!

	"OWNER" "NAME" "PTR" "%10s %22s %8s\n" Printf

	while (proc@)
		auto uname
		proc@ KeProcess_User + @ KeSecurityUser_Name + uname!

		if (name@ ~~)
			uname@ proc@ KeProcess_Name + proc@ "0x%08x %22s %8s\n" Printf
		end elseif (name@ uname@ strcmp)
			uname@ proc@ KeProcess_Name + proc@ "0x%08x %22s %8s\n" Printf
		end

		proc@ KeProcess_GlobalListNext + @ proc!
	end
end

fn DebugCommandUser { p -- halt }
	0 halt!

	auto user
	KeSecurityUserListHead@ user!

	while (user@)
		user@ KeSecurityUser_Name + "%s\n" Printf

		user@ KeSecurityUser_Next + @ user!
	end
end

fn DebugCommandRole { p -- halt }
	0 halt!

	auto i
	0 i!

	while (i@ KEROLESMAX <)
		auto role
		[i@]KeSecurityRoles@ role!

		if (role@)
			role@ KeSecurityRole_Name + "%s\n" Printf
		end

		1 i +=
	end
end

fn DebugCommandPcsym { p -- halt }
	0 halt!

	if (p@ ~~)
		"please specify a program counter value\n" Printf
		return
	end

	1 p +=

	auto pc
	p@ atoi pc!

	auto dll
	auto symbase
	auto symname

	pc@ DebugGetSymDLL symname! symbase! dll!

	if (symbase@ ~~)
		"UNKNOWN\n" Printf
	end else
		pc@ symbase@ - symname@ dll@ DLL_Name + "%s!%s + 0x%x\n" Printf
	end
end

fn DebugCommandReady { p -- halt }
	0 halt!

	auto i
	PRIORITIES i!

	while (i@)
		1 i -=

		auto thread
		[i@]KeThreadPriorityQueueHeads@ thread!

		if (thread@)
			i@ "[%d] " Printf

			while (thread@)
				thread@ KeThread_Name + "%s " Printf

				thread@ KeThread_QueueNext + @ thread!
			end

			'\n' Putc
		end
	end
end

table StatusNames
	"Zero"
	"Initial"
	"Ready"
	"Suspend"
	"Running"
	"WaitAlrt"
	"WitUAlrt"
endtable

fn DebugCommandThread { p -- halt }
	0 halt!

	if (p@ ~~)
		"please specify a process pointer\n" Printf
		return
	end

	1 p +=

	auto proc
	p@ atoi proc!

	auto thr
	proc@ KeProcess_ThreadListHead + @ thr!

	"PRI" "STATUS" "NAME" "PTR" "%10s %22s %8s %4s\n" Printf

	while (thr@)
		thr@ KeThread_Priority + @ [thr@ KeThread_Status + @]StatusNames@ thr@ KeThread_Name + thr@ "0x%08x %22s %8s %4d\n" Printf

		thr@ KeThread_ProcessNext + @ thr!
	end
end