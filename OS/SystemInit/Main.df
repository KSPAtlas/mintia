#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

var Seed 0x12AB34CD

fn SimpleRandom { -- num }
	Seed@ num!

	num@ 1103515245 * 12345 + 0xFFFFFFFF % num!

	num@ Seed!
end

fn Main { ... -- ret }
	"SystemInit.exe: Hello from dynamically-linked userspace!\n" Printf

	"SystemInit.exe: creating swapfile as //:/Devices/dks2.
Eventually it will be configurable and will be /mintia/SwapFile.sys by default,
and will be able to prompt the user for a swapfile path upon failure.\n" Printf

	auto handle

	0 // flags
	ACCESS_READ ACCESS_WRITE | // access
	"//:/Devices/dks2" // path
	0 // ftype
	OSFileOpen ret! handle!

	if (ret@)
		ret@ OSStatusGetName "SystemInit.exe: failed to open swapfile: %s\n" OSAbort
	end

	handle@ // filehandle
	OSSwapFileCreate ret!

	if (ret@)
		ret@ OSStatusGetName "SystemInit.exe: failed to create swapfile: %s\n" OSAbort
	end

	auto query
	OSFileInformation_SIZEOF alloc query!

	handle@ // filehandle
	query@ // query
	OSFileQuery ret!

	if (ret@)
		ret@ OSStatusGetName "SystemInit.exe: failed to query swapfile: %s\n" OSAbort
	end

	handle@ OSClose drop

	// aim to swap out 32/128 = 25% of evicted pages.
	// before this call, the swappiness starts at 0, which means swap is never
	// used.
	32 OSSetSwappiness ret!

	if (ret@)
		ret@ OSStatusGetName "SystemInit.exe: failed to set swappiness: %s\n" OSAbort
	end

	query@ OSFileInformation_Size + @ OSPAGESHIFT >>
	query@ OSFileInformation_Size + @
	"SystemInit.exe: swapfile is %d bytes (%d pages).\n" Printf

	if (0)
		0 // flags
		ACCESS_READ ACCESS_WRITE | // access
		"//:/Devices/dks3" // path
		0 // ftype
		OSFileOpen ret! handle!

		if (ret@)
			ret@ OSStatusGetName "SystemInit.exe: failed to open e: %s\n" OSAbort
		end

		auto handle2
		ACCESS_READ ACCESS_WRITE | // pageprotection
		0 // anonsize
		handle@ // filehandle
		ACCESS_OWNER_ALL // permissions
		0 // name
		OSSectionCreate ret! handle2!

		if (ret@)
			ret@ OSStatusGetName "SystemInit.exe: failed to make section: %s\n" OSAbort
		end

		auto realva

		16 1024 * 1024 * // length
		HEAPSTART // startva
		0 // sectionoffset
		handle2@ // sectionhandle
		OSCURRENTPROCESS // processhandle
		ACCESS_READ ACCESS_WRITE | // pageprotection
		0 // flags
		OSSectionMapView ret! realva!

		if (ret@)
			ret@ OSStatusGetName "SystemInit.exe: failed to map section: %s\n" OSAbort
		end

		realva@ "0x%08x\n" Printf

		// extern OSUnmapView { length vaddr processhandle -- ok }

		auto hugeareasize
		16 1024 * 1024 * hugeareasize!

		while (hugeareasize@)
			SimpleRandom realva@!

			4 hugeareasize -=
			4 realva +=
		end
	end

	if (0)
		while (1)
			12 1024 * 1024 * hugeareasize!

			auto hugearea
			hugeareasize@ Malloc hugearea!

			auto ptr
			hugearea@ ptr!

			while (hugeareasize@)
				SimpleRandom ptr@!

				4 ptr +=
				4 hugeareasize -=
			end

			"wrote a 12MB region with random data even though we don't even have that much RAM!\n" Printf
			"behold the power of swap\n" Printf

			hugearea@ Free
		end
	end

	while (1)
		1000 OSThreadSleep drop
	end
end