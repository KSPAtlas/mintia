#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/KeIPL.h"
#include "<inc>/KeCrash.h"
#include "<inc>/HALCPU.h"
#include "<inc>/KeDPC.h"

#include "<inc>/KeProcess.h"

#include "<inc>/HALInterrupt.h"

// XXX this global will NOT work out well if we ever go multiprocessor
var KeIPLCurrent IPLHIGH
public KeIPLCurrent

fn KeIPLCurrentGet { -- ipl }
	KeIPLCurrent@ ipl!
end

fn KeIPLSet { ipl -- }
	ipl@ HALPlatformIPLSet

	ipl@ KeIPLCurrent!
end

fn KeIPLRaise { newipl -- oldipl }
	auto rs
	HALCPUInterruptDisable rs!

	KeIPLCurrent@ oldipl!

	if (newipl@ oldipl@ ==)
		rs@ HALCPUInterruptRestore
		return
	end

	if (newipl@ oldipl@ <)
		newipl@ oldipl@ "IPL not greater or equal (old=%d new=%d)\n" KeCrash
	end

	newipl@ KeIPLSet

	rs@ HALCPUInterruptRestore
end

fn KeIPLLower { newipl -- }
	auto rs
	HALCPUInterruptDisable rs!

	auto oldipl
	KeIPLCurrent@ oldipl!

	if (newipl@ oldipl@ ==)
		rs@ HALCPUInterruptRestore
		return
	end

	if (newipl@ oldipl@ >)
		newipl@ oldipl@ "IPL not less or equal (old=%d new=%d)\n" KeCrash
	end

	if (oldipl@ IPLDPC >=)
		if (newipl@ IPLDPC <)
			// must have been lowered below IPLDPC
			IPLDPC KeIPLSet

			rs@ KeDPCDispatchQueue

			auto next
			KeThreadNext@ next!

			if (next@)
				0 KeThreadNext!

				newipl@ KeIPLSet

				KeThreadCurrent@ KeThreadReady

				next@ KeThreadSwitch

				rs@ HALCPUInterruptRestore

				return
			end
		end
	end

	newipl@ KeIPLSet

	rs@ HALCPUInterruptRestore
end

externptr HALInterruptStackTop

var KeInterruptNested 0

fn KeInterrupt { ipl int handler -- }
	auto oldipl
	ipl@ KeIPLRaise oldipl!

	if (KeInterruptNested@ ~~)
		1 KeInterruptNested!

		int@ handler@ HALInterruptStackTop@ HALCPURunInContext

		HALCPUInterruptEnable

		oldipl@ KeIPLLower

		HALCPUInterruptDisable drop

		0 KeInterruptNested!
	end else
		HALCPUInterruptEnable

		int@ handler@ HALInterruptHandler

		HALCPUInterruptDisable drop

		oldipl@ KeIPLLower
	end
end

externptr HALInterruptFunction

fn KeInterruptInit { -- }
	pointerof KeInterrupt HALInterruptFunction!
end