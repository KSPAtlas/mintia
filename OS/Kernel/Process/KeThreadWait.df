#include "<df>/dragonfruit.h"
#include "<inc>/HALLog.h"

#include "<inc>/HALCPU.h"
#include "<inc>/HALRTC.h"

#include "<inc>/KeCrash.h"

#include "<inc>/KeMemAlloc.h"

#include "<inc>/KeDPC.h"
#include "<inc>/KeTime.h"
#include "<inc>/KeDispatch.h"
#include "<inc>/KeTimer.h"

#include "<inc>/KeProcess.h"

#include "<inc>/KeIPL.h"

#include "<ll>/OSDLL/OSStatus.h"

// initializes a dispatch object's header

fn KeDispatchInitialize { name type dobject -- ok }
	0 ok!

	0 dobject@ KeDispatchHeader_Signaled + !

	type@ dobject@ KeDispatchHeader_Type + !

	name@ dobject@ KeDispatchHeader_Name + !

	0 dobject@ KeDispatchHeader_WaitBlockListHead + !
	0 dobject@ KeDispatchHeader_WaitBlockListTail + !
end

// initializes a WaitBlock

fn KeDispatchWaitBlockInitialize { thread waitblock -- ok }
	0 ok!

	0 waitblock@ KeDispatchWaitBlock_Prev + !
	0 waitblock@ KeDispatchWaitBlock_Next + !

	0 waitblock@ KeDispatchWaitBlock_WaitStatusReturn + !
	0 waitblock@ KeDispatchWaitBlock_WaitType + !

	thread@ waitblock@ KeDispatchWaitBlock_Thread + !

	0 waitblock@ KeDispatchWaitBlock_Object + !
end

fn KeDispatchWaitBlockDequeue { waitstatus waitblock -- ok }
	0 ok!

	if (KeIPLCurrentGet IPLDPC ~=)
		"KeDispatchWaitBlockDequeue: ipl != IPLDPC\n" KeCrash
	end

	if (waitblock@ KeDispatchWaitBlock_Object + @ ~~)
		"KeDispatchWaitBlockDequeue: attempt to dequeue a non-enqueued WaitBlock\n" KeCrash
	end

	auto object
	waitblock@ KeDispatchWaitBlock_Object + @ object!

	auto n
	waitblock@ KeDispatchWaitBlock_Next + @ n!

	if (n@)
		waitblock@ KeDispatchWaitBlock_Prev + @ n@ KeDispatchWaitBlock_Prev + !
	end else // no next means we were the tail
		waitblock@ KeDispatchWaitBlock_Prev + @ object@ KeDispatchHeader_WaitBlockListTail + !
	end

	auto p
	waitblock@ KeDispatchWaitBlock_Prev + @ p!

	if (p@)
		waitblock@ KeDispatchWaitBlock_Next + @ p@ KeDispatchWaitBlock_Next + !
	end else // no prev means we were the head
		waitblock@ KeDispatchWaitBlock_Next + @ object@ KeDispatchHeader_WaitBlockListHead + !
	end

	0 waitblock@ KeDispatchWaitBlock_Next + !
	0 waitblock@ KeDispatchWaitBlock_Prev + !

	0 waitblock@ KeDispatchWaitBlock_Object + !

	waitstatus@ waitblock@ KeDispatchWaitBlock_WaitStatusReturn + !
end

// adds a WaitBlock to the tail of a dispatch object's WaitBlockList

fn KeDispatchWaitBlockEnqueue { waittype waitblock object -- ok }
	0 ok!

	if (KeIPLCurrentGet IPLDPC ~=)
		"KeDispatchWaitBlockInsert: ipl != IPLDPC\n" KeCrash
	end

	if (waitblock@ KeDispatchWaitBlock_Object + @)
		"KeDispatchWaitBlockEnqueue: attempt to queue an enqueued WaitBlock\n" KeCrash
	end

	auto t
	object@ KeDispatchHeader_WaitBlockListTail + @ t!

	if (t@ ~~)
		waitblock@ object@ KeDispatchHeader_WaitBlockListHead + !
	end else
		waitblock@ t@ KeDispatchWaitBlock_Next + !
		t@ waitblock@ KeDispatchWaitBlock_Prev + !
	end

	waitblock@ object@ KeDispatchHeader_WaitBlockListTail + !

	object@ waitblock@ KeDispatchWaitBlock_Object + !

	waittype@ waitblock@ KeDispatchWaitBlock_WaitType + !
end

// satisfies a WaitBlock

fn KeDispatchWaitBlockSatisfy { waitstatus priboost waitblock -- ok }
	if (KeIPLCurrentGet IPLDPC ~=)
		"KeDispatchWaitBlockSatisfy: ipl != IPLDPC\n" KeCrash
	end

	waitstatus@ waitblock@ KeDispatchWaitBlockDequeue ok!

	if (ok@)
		return
	end

	auto thread
	waitblock@ KeDispatchWaitBlock_Thread + @ thread!

	1 thread@ KeThread_WaitCount + -=

	auto wt
	waitblock@ KeDispatchWaitBlock_WaitType + @ wt!

	if (wt@ THREADWAITANY ==)
		waitstatus@ priboost@ thread@ KeThreadWakeup drop
	end elseif (wt@ THREADWAITALL ==)
		if (thread@ KeThread_WaitCount + @ 0 ==)
			STATUS_ALL_WAITS_SATISFIED priboost@ thread@ KeThreadWakeup drop
		end
	end
end

// satisfies all waiters on a dispatch object
// this SIGNALS the object

fn KeDispatchSatisfyAll { waitstatus priboost object -- count ok }
	0 ok!

	0 count!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	1 object@ KeDispatchHeader_Signaled + !

	auto h
	object@ KeDispatchHeader_WaitBlockListHead + @ h!

	auto wb

	while (h@)
		h@ wb!
		h@ KeDispatchWaitBlock_Next + @ h!

		if (waitstatus@ priboost@ wb@ KeDispatchWaitBlockSatisfy)
			"KeDispatchSatisfyAll: couldn't satisfy WaitBlock\n" KeCrash
		end

		1 count +=
	end

	ipl@ KeIPLLower
end

// satisfies the highest priority, earliest wait on a dispatch object
// this DOES NOT SIGNAL the object

fn KeDispatchSatisfyFirst { waitstatus priboost object -- wokenthread ok }
	0 ok!

	0 wokenthread!

	auto wthpri
	0 wthpri!

	auto wokewb
	0 wokewb!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto h
	object@ KeDispatchHeader_WaitBlockListHead + @ h!

	while (h@)
		auto nw
		h@ KeDispatchWaitBlock_Thread + @ nw!

		auto npri

		if (wokenthread@ ~~)
			h@ wokewb!

			nw@ wokenthread!

			nw@ KeThread_BasePriority + @ wthpri!
		end else
			nw@ KeThread_BasePriority + @ npri!

			if (npri@ wthpri@ >)
				h@ wokewb!

				nw@ wokenthread!

				npri@ wthpri!
			end
		end

		h@ KeDispatchWaitBlock_Next + @ h!
	end

	if (wokewb@)
		if (waitstatus@ priboost@ wokewb@ KeDispatchWaitBlockSatisfy)
			"KeDispatchSatisfyFirst: couldn't satisfy WaitBlock\n" KeCrash
		end
	end

	ipl@ KeIPLLower
end

fn KeThreadWaitForMultipleDispatchObjects { waitipl waitmode alertable waittype objectcount objecttable -- ok }
	"KeThreadWaitForMultipleDispatchObjects: not yet implemented\n" KeCrash
end

fn KeThreadWaitForDispatchObject { waitipl waitmode alertable object -- ok }
	if (KeIPLCurrentGet IPLDPC ~=)
		"KeThreadWaitForDispatchObject: ipl != IPLDPC\n" KeCrash
	end

	auto current
	KeThreadCurrent@ current!

	auto waitblock
	current@ KeThread_WaitBlocks + waitblock! // now points to current thread's first waitblock

	while (1)
		if (object@ KeDispatchHeader_Signaled + @)
			0 ok!

			return
		end

		1 current@ KeThread_WaitCount + !

		THREADWAITANY waitblock@ object@ KeDispatchWaitBlockEnqueue ok!

		waitipl@ waitmode@ alertable@ KeThreadWait ok!

		// if we got woken up to deliver an APC, it will be executed here when we
		// lower the IPL.
		// the object may become signaled while this occurs, hence the check above.

		waitipl@ KeIPLLower

		// we were awoken to deliver a kernel APC. raise back to IPLDPC and retry.

		IPLDPC KeIPLRaise drop

		if (ok@ STATUS_KERNEL_APC ~=)
			break
		end elseif (object@ KeDispatchHeader_Type + @ DISPATCHOBJECT_MUTEX ==)
			// this special case is for the situation where a mutex is released while a waiter
			// is executing an APC. if it weren't for this, and for the code to deal with it in
			// KeMutexAcquire, it would just keep waiting on a wakeup that would never arrive.

			return
		end
	end
end

fn KeThreadWakeup { waitstatus priboost thread -- woken }
	if (KeIPLCurrentGet IPLDPC ~=)
		"KeThreadWakeup: ipl != IPLDPC\n" KeCrash
	end

	0 woken!

	auto status
	thread@ KeThread_Status + @ status!

	if (status@ THREADSTATUS_TERMINATED ==)
		// XXX are there legitimate, normal situations where you might try to wake up a dead thread
		// that has not yet been cleaned up?

		"KeThreadWakeup: thread is already dead\n" KeCrash
	end

	if (status@ THREADSTATUS_WAITINGALERTABLE ~= status@ THREADSTATUS_WAITINGUNALERTABLE ~= &&)
		// thread isn't waiting

		return
	end

	auto wb
	thread@ KeThread_WaitBlocks + wb!

	auto i
	0 i!

	while (i@ THREADWAITBLOCKS <)
		if (wb@ KeDispatchWaitBlock_Object + @)
			if (0 wb@ KeDispatchWaitBlockDequeue)
				"KeThreadWakeup: couldn't dequeue WaitBlock\n" KeCrash
			end
		end

		1 i +=
		KeDispatchWaitBlock_SIZEOF wb +=
	end

	priboost@ thread@ KeThreadPriorityBoost
	waitstatus@ thread@ KeThread_WaitStatus + !
	QUEUEBACK thread@ KeThreadReady

	1 woken!
end

fn KeThreadWait { waitipl waitmode alertable -- ok }
	if (KeIPLCurrentGet IPLDPC ~=)
		"KeThreadWait: ipl != IPLDPC\n" KeCrash
	end

	auto current
	KeThreadCurrent@ current!

	waitmode@ current@ KeThread_WaitMode + !

	waitipl@ current@ KeThread_WaitIPL + !

	0 current@ KeThread_WaitStatus + !

	if (alertable@)
		THREADSTATUS_WAITINGALERTABLE KeThreadYield
	end else
		THREADSTATUS_WAITINGUNALERTABLE KeThreadYield
	end

	current@ KeThread_WaitStatus + @ ok!
end

fn KeThreadSleep { ms waitmode alertable -- ok }
	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto current
	KeThreadCurrent@ current!

	"KeThreadSleep" 0 current@ KeThread_Timer + KeTimerInitialize drop

	0 0 ms@ current@ KeThread_Timer + KeTimerEnqueue drop

	ipl@ waitmode@ alertable@ current@ KeThread_Timer + KeThreadWaitForDispatchObject ok!

	ipl@ KeIPLLower
end