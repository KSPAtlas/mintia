#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/KeIPL.h"
#include "<inc>/KeCrash.h"
#include "<inc>/KeAPC.h"

#include "<inc>/KeDPC.h"

#include "<inc>/KeTime.h"
#include "<inc>/KeTimer.h"

#include "<inc>/KeProcess.h"

#include "<inc>/HALCPU.h"

#include "<ll>/OSDLL/OSStatus.h"

fn KeAPCInitialize { thread exitfunc kernelfunc normalfunc mode apc -- ok }
	thread@ apc@ KeAPC_Thread + !

	exitfunc@ apc@ KeAPC_FunctionExit + !

	kernelfunc@ apc@ KeAPC_FunctionKernel + !
	normalfunc@ apc@ KeAPC_FunctionNormal + !

	mode@ apc@ KeAPC_Mode + !

	if (normalfunc@ ~~ mode@ KERNELMODE ~= &&)
		mode@ "KeAPCInitialize: special APC not kernel mode (%d)\n" KeCrash
	end

	0 apc@ KeAPC_Context1 + !
	0 apc@ KeAPC_Context2 + !

	0 apc@ KeAPC_APCListPrev + !
	0 apc@ KeAPC_APCListNext + !

	0 apc@ KeAPC_Enqueued + !

	0 ok!
end

fn KeAPCEnqueue { context1 context2 priboost apc -- ok }
	0 ok!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (apc@ KeAPC_Enqueued + @)
		"KeAPCEnqueue: attempt to queue an enqueued APC\n" KeCrash
	end

	0 apc@ KeAPC_APCListNext + !
	0 apc@ KeAPC_APCListPrev + !

	auto thread
	apc@ KeAPC_Thread + @ thread!

	if (thread@ KeThread_APCQueueable + @ ~~)
		ERR ok!
	end else
		context1@ apc@ KeAPC_Context1 + !
		context2@ apc@ KeAPC_Context2 + !

		1 apc@ KeAPC_Enqueued + !

		auto mode
		apc@ KeAPC_Mode + @ mode!

		auto t

		if (mode@ KERNELMODE ==)
			// TODO queue special APCs in front of queue

			// place APC on target thread's kernel mode APC queue

			thread@ KeThread_APCKernelListTail + @ t!

			if (t@ ~~)
				apc@ thread@ KeThread_APCKernelListHead + !
			end else
				apc@ t@ KeAPC_APCListNext + !
				t@ apc@ KeAPC_APCListPrev + !
			end

			apc@ thread@ KeThread_APCKernelListTail + !

			auto threadstatus
			thread@ KeThread_Status + @ threadstatus!

			if (threadstatus@ THREADSTATUS_WAITINGALERTABLE == threadstatus@ THREADSTATUS_WAITINGUNALERTABLE == ||)
				if (thread@ KeThread_WaitIPL + @ IPLLOW ==)
					// target thread is waiting, and is at IPLLOW

					auto wake
					0 wake!

					if (apc@ KeAPC_FunctionNormal + @ ~~)
						// no normal function means that it's a special APC, cause a wakeup
						1 wake!
					end elseif (thread@ KeThread_KernelAPCDisableCount + @ 0 == thread@ KeThread_KernelAPCInProgress + @ ~~ &&)
						// it's a normal APC. the kernel APC disable count is 0, and the
						// target thread isn't in an APC already, so cause a wakeup
						1 wake!
					end

					if (wake@)
						if (STATUS_KERNEL_APC priboost@ thread@ KeThreadWakeup ~~)
							"KeAPCEnqueue: failed to wake target thread (kernel APC)\n" KeCrash
						end
					end
				end
			end
		end elseif (mode@ USERMODE ==)
			// TODO place APC in front of queue if kernel function is the termination APC function

			// place APC on target thread's usermode APC queue

			thread@ KeThread_APCUserListTail + @ t!

			if (t@ ~~)
				apc@ thread@ KeThread_APCUserListHead + !
			end else
				apc@ t@ KeAPC_APCListNext + !
				t@ apc@ KeAPC_APCListPrev + !
			end

			apc@ thread@ KeThread_APCUserListTail + !

			if (thread@ KeThread_Status + @ THREADSTATUS_WAITINGALERTABLE ==)
				if (thread@ KeThread_WaitMode + @ USERMODE ==)
					// wake thread if it was in an alertable wait on usermode's behalf

					if (STATUS_USER_APC priboost@ thread@ KeThreadWakeup ~~)
						"KeAPCEnqueue: failed to wake target thread (user APC)\n" KeCrash
					end
				end
			end
		end
	end

	ipl@ KeIPLLower
end

fn KeAPCDispatchQueue { -- }
	// TODO
end