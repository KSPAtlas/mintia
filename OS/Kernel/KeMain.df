#include "<df>/dragonfruit.h"
#include "<inc>/HALLog.h"

#include "<inc>/KeCrash.h"
#include "<inc>/KeIPL.h"

#include "<inc>/KeMem.h"

#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"

#include "<inc>/KeDPC.h"
#include "<inc>/KeTime.h"
#include "<inc>/KeTimer.h"

#include "<inc>/KeProcess.h"

extern KeInterruptInit { -- }

extern KeMemInit { -- }

extern KeTimerInit { -- }

extern KeSecurityInit { -- }

extern KeProcessInit { -- }

extern KeThreadInit { -- }

buffer TestThread1 KeThread_SIZEOF

buffer TestThread2 KeThread_SIZEOF

fn KeMain { -- ret }
	// early init that takes place before there's a process context

	IPLDPC KeIPLLower

	KeInterruptInit

	KeTimerInit

	KeMemInit

	KeSecurityInit

	KeProcessInit

	KeThreadInit

	0xCCCCCCCC 'x' pointerof TestKernelThread "cthread" TestThread2 KeThreadWorkerInitialize ret!

	PRIORITY_LOWREALTIME TestThread2 KeThread_BasePriority + !
	PRIORITY_LOWREALTIME TestThread2 KeThread_Priority + !

	KeThreadNextPick KeThreadSwitch

	0 ret!
end

var KeThreadBigTest 0

fn KeIdleThread { -- }
	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	// the idle thread is never ever not ready to run.

	while (1)
		HALCPUHalt
	end
end

fn KeMainInThreadContext { -- }
	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	"Hello Andromeda World!\n" "KeMain" HALLog

	KeMemUsageDump

	QUEUEBACK TestThread2 KeThreadReady

	while (1)
		// "=" Printf

		// QUEUEBACK KeThreadBigTest@ KeThreadReady

		// "= " Printf

		50 KeThreadSleep

		"o" Printf
	end
end

fn TestKernelThread { context1 context2 -- }
	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	while (1)
		60 KeThreadSleep

		context2@ Putc
	end
end