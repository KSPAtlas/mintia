#include "<df>/dragonfruit.h"
#include "<inc>/HALLog.h"

#include "<inc>/KeCrash.h"
#include "<inc>/KeIPL.h"

#include "<inc>/KeMemAlloc.h"

#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"

#include "<inc>/KeTimer.h"

#include "<inc>/KeProcess.h"

extern KeInterruptInit { -- }

extern KeMemInit { -- }

extern KeTimerInit { -- }

extern KeSecurityInit { -- }

extern KeProcessInit { -- }

extern KeThreadInit { -- }

externptr KeMemPageFreeCount

buffer TestTimer KeTimer_SIZEOF

buffer TestTimer2 KeTimer_SIZEOF

buffer TestTimer3 KeTimer_SIZEOF

buffer TestTimer4 KeTimer_SIZEOF

fn (DPCFunction) TestTimerFunction { context1 context2 -- }
	context1@ context2@ "timer=%x interval=%dms\n" Printf

	context1@ context2@ context1@ context2@ KeTimerEnqueue drop
end

buffer TestThread1 KeThread_SIZEOF

buffer TestThread2 KeThread_SIZEOF

fn KeMain { -- ret }
	// early init that takes place before there's a process context

	pointerof TestTimerFunction TestTimer KeTimerInitialize drop

	pointerof TestTimerFunction TestTimer2 KeTimerInitialize drop

	pointerof TestTimerFunction TestTimer3 KeTimerInitialize drop

	pointerof TestTimerFunction TestTimer4 KeTimerInitialize drop

	IPLLOW KeIPLLower

	KeInterruptInit

	KeTimerInit

	KeMemInit

	KeSecurityInit

	KeProcessInit

	KeThreadInit

	0xDEADBEEF 'b' pointerof TestKernelThread "test" TestThread1 KeThreadWorkerInitialize ret!

	TestThread1 KeThreadReady

	0xCCCCCCCC 'c' pointerof TestKernelThread "test2" TestThread2 KeThreadWorkerInitialize ret!

	PRIORITY_HIGHUSER TestThread2 KeThread_Priority + !

	TestThread2 KeThreadBigTest!

	KeThreadNextPick KeThreadSwitch

	0 ret!
end

var KeThreadBigTest 0

fn KeMainInThreadContext { -- }
	"Hello Andromeda World!\n" "KeMain" HALLog

	KeMemPageFreeCount@ 12 << 1024 / "%dKB memory available.\n" "KeMain" HALLog

	while (1)
		"HEY: " Printf

		KeThreadBigTest@ KeThreadReady

		":YAH " Printf

		HALCPUHalt
	end
end

fn TestKernelThread { context1 context2 -- }
	context1@ "ctx1 = %x\n" Printf
	context2@ "ctx2 = %x\n" Printf

	//2000 TestTimer 2000 TestTimer KeTimerEnqueue drop
	//1500 TestTimer2 1500 TestTimer2 KeTimerEnqueue drop
	//1000 TestTimer3 1000 TestTimer3 KeTimerEnqueue drop
	//500 TestTimer4 500 TestTimer4 KeTimerEnqueue drop

	while (1)
		context2@ Putc

		if (context1@ 0xDEADBEEF ~=)
			THREADSTATUS_SUSPENDED KeThreadYieldNow
		end

		HALCPUHalt
	end
end