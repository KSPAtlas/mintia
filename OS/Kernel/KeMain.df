#include "<df>/dragonfruit.h"
#include "<inc>/HALLog.h"

#include "<inc>/KeCrash.h"
#include "<inc>/KeIPL.h"

#include "<inc>/KeMemAlloc.h"

#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"

#include "<inc>/KeTimer.h"

#include "<inc>/KeProcess.h"

extern KeInterruptInit { -- }

extern KeMemInit { -- }

extern KeTimerInit { -- }

extern KeSecurityInit { -- }

extern KeProcessInit { -- }

extern KeThreadInit { -- }

externptr KeMemPageFreeCount

buffer TestTimer KeTimer_SIZEOF

buffer TestTimer2 KeTimer_SIZEOF

buffer TestTimer3 KeTimer_SIZEOF

buffer TestTimer4 KeTimer_SIZEOF

fn (DPCFunction) TestTimerFunction { context1 context2 -- }
	context1@ context2@ "timer=%x interval=%dms\n" Printf

	context1@ context2@ context1@ context2@ KeTimerEnqueue drop
end

fn KeMain { -- ret }
	// early init that takes place before there's a process context

	pointerof TestTimerFunction TestTimer KeTimerInitialize drop

	pointerof TestTimerFunction TestTimer2 KeTimerInitialize drop

	pointerof TestTimerFunction TestTimer3 KeTimerInitialize drop

	pointerof TestTimerFunction TestTimer4 KeTimerInitialize drop

	IPLLOW KeIPLLower

	KeInterruptInit

	KeTimerInit

	KeMemInit

	KeSecurityInit

	KeProcessInit

	KeThreadInit

	auto thread

	0xDEADBEEF 0xABCDEF00 pointerof TestKernelThread "test" KeThreadWorkerCreate ret! thread!

	thread@ KeThreadReady

	KeThreadNextPick KeThreadSwitch

	0 ret!
end


fn KeMainInThreadContext { -- }
	"Hello Andromeda World!\n" "KeMain" HALLog

	KeMemPageFreeCount@ 12 << 1024 / "%dKB memory available.\n" "KeMain" HALLog

	while (1)
		'a' Putc
	end
end

fn TestKernelThread { context1 context2 -- }
	context1@ "ctx1 = %x\n" Printf
	context2@ "ctx2 = %x\n" Printf

	//2000 TestTimer 2000 TestTimer KeTimerEnqueue drop
	//1500 TestTimer2 1500 TestTimer2 KeTimerEnqueue drop
	//1000 TestTimer3 1000 TestTimer3 KeTimerEnqueue drop
	//500 TestTimer4 500 TestTimer4 KeTimerEnqueue drop

	while (1)
		'b' Putc
	end
end