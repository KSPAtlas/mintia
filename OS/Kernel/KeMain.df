#include "<df>/dragonfruit.h"
#include "<inc>/HALLog.h"

#include "<inc>/KeCrash.h"
#include "<inc>/KeIPL.h"

#include "<inc>/KeMemAlloc.h"

#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"

#include "<inc>/KeTimer.h"

#include "<inc>/KeProcess.h"

extern KeInterruptInit { -- }

extern KeMemInit { -- }

extern KeTimerInit { -- }

extern KeSecurityInit { -- }

extern KeProcessInit { -- }

extern KeThreadInit { -- }

externptr KeMemPageFreeCount

buffer TestThread1 KeThread_SIZEOF

buffer TestThread2 KeThread_SIZEOF

fn KeMain { -- ret }
	// early init that takes place before there's a process context

	IPLDPC KeIPLLower

	KeInterruptInit

	KeTimerInit

	KeMemInit

	KeSecurityInit

	KeProcessInit

	KeThreadInit

	0xBBBBBBBB 'b' pointerof TestKernelThread "bthread" TestThread1 KeThreadWorkerInitialize ret!

	QUEUEBACK TestThread1 KeThreadReady

	0xCCCCCCCC 'c' pointerof TestKernelThread "cthread" TestThread2 KeThreadWorkerInitialize ret!

	PRIORITY_LOWREALTIME TestThread2 KeThread_Priority + !

	TestThread2 KeThreadBigTest!

	KeThreadNextPick KeThreadSwitch

	0 ret!
end

var KeThreadBigTest 0

fn KeMainInThreadContext { -- }
	IPLLOW KeIPLLower

	"Hello Andromeda World!\n" "KeMain" HALLog

	KeMemPageFreeCount@ 12 << 1024 / "%dKB memory available.\n" "KeMain" HALLog

	while (1)
		"HEY:" Printf

		QUEUEBACK KeThreadBigTest@ KeThreadReady

		":YAH " Printf

		// HALCPUHalt
	end
end

fn TestKernelThread { context1 context2 -- }
	IPLLOW KeIPLLower

	while (1)
		if (context1@ 0xCCCCCCCC ==)
			THREADSTATUS_SUSPENDED KeThreadYield
		end

		context2@ Putc

		// HALCPUHalt
	end
end