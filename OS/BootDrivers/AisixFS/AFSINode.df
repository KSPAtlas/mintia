#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/FSRTL.h"

#include "AisixFS.h"

fn AFSINodeRead { inum mount -- ptr pfdbe ok }
	auto block
	auto off

	auto inode

	inum@ AFSINode_SIZEOF * off!

	mount@ IOMount_FSContext + @ AFSData_IStart + @ off@ AFSBLOCKSHIFT >> + AFSBLOCKSHIFT << block!

	0 // flags
	0 // kflags
	block@ // offset
	mount@ // mount
	FSVolumeBlockRead ok! pfdbe! ptr!

	if (ok@)
		return
	end

	off@ AFSBLOCKOFFMASK & ptr +=
end

fn AFSFCBCacheLock { mount -- ok }
	KERNELMODE // waitmode
	1 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	mount@ IOMount_FSContext + @ AFSData_FCBCacheMutex + // object
	KeThreadWaitForObject ok!
end

fn AFSFCBCacheUnlock { mount -- }
	mount@ IOMount_FSContext + @ AFSData_FCBCacheMutex + KeMutexRelease drop
end

fn AFSFCBRemove { fcb buckethead -- }
	// remove from hash list.
	// assumes fcb cache is locked.

	auto fcbdata
	fcb@ IOFileControlBlock_FSContext + @ fcbdata!

	auto n
	fcbdata@ AFSFCBData_NextFCB + @ n!

	if (n@)
		fcbdata@ AFSFCBData_PrevFCB + @ n@ IOFileControlBlock_FSContext + @ AFSFCBData_PrevFCB + !
	end else // no next means we were the tail
		fcbdata@ AFSFCBData_PrevFCB + @ buckethead@ 4 + !
	end

	fcbdata@ AFSFCBData_PrevFCB + @ n!

	if (n@)
		fcbdata@ AFSFCBData_NextFCB + @ n@ IOFileControlBlock_FSContext + @ AFSFCBData_NextFCB + !
	end else // no prev means we were the head
		fcbdata@ AFSFCBData_NextFCB + @ buckethead@!
	end
end

fn AFSFCBInsert { fcb buckethead -- }
	// insert into hash list on the recently-used end.
	// assumes fcb cache is locked.

	auto fcbdata
	fcb@ IOFileControlBlock_FSContext + @ fcbdata!

	auto n
	buckethead@@ n!

	0 fcbdata@ AFSFCBData_PrevFCB + !
	n@ fcbdata@ AFSFCBData_NextFCB + !

	if (n@)
		fcbdata@ n@ IOFileControlBlock_FSContext + @ AFSFCBData_PrevFCB + !
	end else // no head, set tail
		fcb@ buckethead@ 4 + !
	end

	fcb@ buckethead@!
end

fn AFSMountReference { mount -- oldcount }
	auto afsdata
	mount@ IOMount_FSContext + @ afsdata!

	auto rs
	HALCPUInterruptDisable rs!

	afsdata@ AFSData_FCBRefTotal + @ oldcount!

	oldcount@ 1 + afsdata@ AFSData_FCBRefTotal + !

	rs@ HALCPUInterruptRestore
end

fn AFSMountDereference { mount -- oldcount }
	auto afsdata
	mount@ IOMount_FSContext + @ afsdata!

	auto rs
	HALCPUInterruptDisable rs!

	afsdata@ AFSData_FCBRefTotal + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ 0 ==)
			"AFSMountDereference: underflow\n" KeCrash
		end
	end

	oldcount@ 1 - afsdata@ AFSData_FCBRefTotal + !

	rs@ HALCPUInterruptRestore
end

fn AFSFCBReference { fcb -- oldcount }
	auto rs
	HALCPUInterruptDisable rs!

	fcb@ IOFileControlBlockReference oldcount!

	if (oldcount@ 0 ==)
		// fcb@ "->0x%08x " Printf

		auto fcbdata
		fcb@ IOFileControlBlock_FSContext + @ fcbdata!

		auto mountdata
		fcb@ IOFileControlBlock_DeviceObject + @ IOMount_FSContext + @ mountdata!

		// raised to 1, remove from reusable list

		auto ls
		fcbdata@ AFSFCBData_PrevReusableFCB + @ ls!

		auto ns
		fcbdata@ AFSFCBData_NextReusableFCB + @ ns!

		if (ls@)
			ns@ ls@ IOFileControlBlock_FSContext + @ AFSFCBData_NextReusableFCB + !
		end else
			ns@ mountdata@ AFSData_FCBReusableListHead + !
		end

		if (ns@)
			ls@ ns@ IOFileControlBlock_FSContext + @ AFSFCBData_PrevReusableFCB + !
		end else
			ls@ mountdata@ AFSData_FCBReusableListTail + !
		end

		0 fcbdata@ AFSFCBData_PrevReusableFCB + !
		0 fcbdata@ AFSFCBData_NextReusableFCB + !
	end

	rs@ HALCPUInterruptRestore
end

fn AFSFCBDereference { fcb -- oldcount }
	auto rs
	HALCPUInterruptDisable rs!

	fcb@ IOFileControlBlockDereference oldcount!

	if (oldcount@ 1 ==)
		// fcb@ "0x%08x-> " Printf

		auto fcbdata
		fcb@ IOFileControlBlock_FSContext + @ fcbdata!

		auto mountdata
		fcb@ IOFileControlBlock_DeviceObject + @ IOMount_FSContext + @ mountdata!

		// deref'd to 0, add to back of reusable list

		auto t
		mountdata@ AFSData_FCBReusableListTail + @ t!

		if (t@ ~~)
			0 fcbdata@ AFSFCBData_NextReusableFCB + !
			0 fcbdata@ AFSFCBData_PrevReusableFCB + !

			fcb@ mountdata@ AFSData_FCBReusableListHead + !
			fcb@ mountdata@ AFSData_FCBReusableListTail + !
		end else
			0 fcbdata@ AFSFCBData_NextReusableFCB + !

			t@ fcbdata@ AFSFCBData_PrevReusableFCB + !
			fcb@ t@ IOFileControlBlock_FSContext + @ AFSFCBData_NextReusableFCB + !
			fcb@ mountdata@ AFSData_FCBReusableListTail + !
		end
	end

	rs@ HALCPUInterruptRestore
end

fn AFSFCBCacheDestroy { mount -- ok }
	auto afsdata
	mount@ IOMount_FSContext + @ afsdata!

	// iterate each bucket from 0 to AFSFCBBUCKETS-1.
	// for each bucket, destroy the FCB.

	auto i
	0 i!

	while (i@ AFSFCBBUCKETS <)
		auto buckethead
		afsdata@ AFSData_FCBBucketListHeads + i@ 3 << + buckethead!

		auto fcb
		buckethead@@ fcb!

		while (fcb@)
			if (DEBUGCHECKS)
				if (fcb@ IOFileControlBlock_References + @)
					"AFSFCBCacheDestroy: fcb refcount > 0\n" KeCrash
				end
			end

			auto fcbdata
			fcb@ IOFileControlBlock_FSContext + @ fcbdata!

			auto nextfcb
			fcbdata@ AFSFCBData_NextFCB + @ nextfcb!

			1 // writeout
			fcb@ // fcb
			IOFileControlBlockDelete

			fcbdata@ MmFree

			nextfcb@ fcb!
		end

		1 i +=
	end
end

fn AFSFCBRead { inum mount -- fcb ok }
	auto afsdata
	mount@ IOMount_FSContext + @ afsdata!

	if (inum@ 0 ==)
		"AFSFCBRead: inum == 0\n" KeCrash
	end

	if (inum@ afsdata@ AFSData_ICount + @ >=)
		"AFSFCBRead: inum >= icount\n" KeCrash
	end

	mount@ AFSFCBCacheLock ok!

	if (ok@)
		return
	end

	auto bucket
	inum@ AFSFCBMASK & bucket!

	auto buckethead
	afsdata@ AFSData_FCBBucketListHeads + bucket@ 3 << + buckethead!

	auto buckettail
	afsdata@ AFSData_FCBBucketListHeads + bucket@ 3 << + 4 + buckettail!

	buckethead@@ fcb!

	while (fcb@)
		if (fcb@ IOFileControlBlock_FSContext + @ AFSFCBData_INum + @ inum@ ==)
			break
		end

		fcb@ IOFileControlBlock_FSContext + @ AFSFCBData_NextFCB + @ fcb!
	end

	auto pfdbe
	auto fcbdata
	auto rs

	if (fcb@ ~~)
		// didn't find, need to allocate and read in the inode.

		if (afsdata@ AFSData_FCBUsedCount + @ AFSFCBCacheCount@ >=)
			// the cache is full. try to reclaim an unused FCB.
			// this will involve destroying its cacheblock.
			// if there are none, we will be forced to allocate
			// a new one and go above the limit for a while.
			// while above the limit, any FCBs whose refcounts
			// drop to 0 get instantly freed...

			mount@ IOMount_FSContext + @ AFSData_FCBReusableListHead + @ fcb!

			if (fcb@)
				// found one we can reclaim!

				// this is just to take it off the reusable list.
				// the refcount and other things get reset back to zero by
				// IOFileControlBlockInitialize.
				fcb@ AFSFCBReference drop

				auto cacheblock
				fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

				if (cacheblock@)
					1 // writeout
					cacheblock@ // cacheblock
					IOCacheInfoBlockDestroy ok!

					if (DEBUGCHECKS)
						if (ok@)
							ok@ "AFSFCBRead: couldn't destroy cacheblock (%i)\n" KeCrash
						end
					end
				end

				// remove from hash bucket

				fcb@ IOFileControlBlock_FSContext + @ AFSFCBData_INum + @ AFSFCBMASK & bucket!

				afsdata@ AFSData_FCBBucketListHeads + bucket@ 3 << + buckethead!

				fcb@ // fcb
				buckethead@ // buckethead
				AFSFCBRemove
			end
		end

		auto ptr

		inum@ // inum
		mount@ // mount
		AFSINodeRead ok! pfdbe! ptr!

		if (ok@)
			mount@ AFSFCBCacheUnlock

			return
		end

		if (fcb@ ~~)
			// didn't manage to get an FCB by now. allocate one

			// these fields are filled in below by IOFileControlBlockInitialize
			0 // dispatchtable
			0 // devobj
			0 // filetype
			0 // flags
			IOFileControlBlockCreate ok! fcb!

			if (ok@)
				mount@ AFSFCBCacheUnlock

				pfdbe@ MmEvictablePageDereference drop

				return
			end

			// allocate a new fcbdata

			AFSFCBData_SIZEOF // bytes
			'AFCX' // tag
			MmAllocWithTag ok! fcbdata!

			if (ok@)
				-1 // writeout
				fcb@ // fcb
				IOFileControlBlockDelete

				mount@ AFSFCBCacheUnlock

				pfdbe@ MmEvictablePageDereference drop

				return
			end

			HALCPUInterruptDisable rs!
			1 afsdata@ AFSData_FCBUsedCount + +=
			rs@ HALCPUInterruptRestore
		end else
			// reuse the fcbdata from last time
			fcb@ IOFileControlBlock_FSContext + @ fcbdata!
		end

		0 fcbdata@ AFSFCBData_NextFCB + !
		0 fcbdata@ AFSFCBData_PrevFCB + !

		0 fcbdata@ AFSFCBData_NextReusableFCB + !
		0 fcbdata@ AFSFCBData_PrevReusableFCB + !

		inum@ fcbdata@ AFSFCBData_INum + !

		ptr@ AFSINode_startblock + @ fcbdata@ AFSFCBData_FirstFATLink + !
		0 fcbdata@ AFSFCBData_GID + !
		ptr@ AFSINode_uid + @ fcbdata@ AFSFCBData_UID + !
		ptr@ AFSINode_permissions + @ fcbdata@ AFSFCBData_Permissions + !
		ptr@ AFSINode_iparent + @ fcbdata@ AFSFCBData_IParent + !

		0 fcbdata@ AFSFCBData_LastFATLinkBlkOff + !
		ptr@ AFSINode_startblock + @ fcbdata@ AFSFCBData_LastFATLinkValue + !

		auto filetype

		if (ptr@ AFSINode_type + @ 1 ==)
			OSFILETYPE_FILE filetype!
		end elseif (ptr@ AFSINode_type + @ 2 ==)
			OSFILETYPE_DIRECTORY filetype!
		end else
			ptr@ AFSINode_type + @
			inum@
			"AFSFCBRead: i=%d weird inode type %d\n" KeCrash
		end

		DriverAFSDispatch // dispatchtable
		mount@ // devobj
		filetype@ // filetype
		0 // flags
		fcb@ // fcb
		IOFileControlBlockInitialize ok!

		if (ok@)
			"AFSFCBRead: failed to initialize FCB\n" KeCrash
		end

		fcbdata@ fcb@ IOFileControlBlock_FSContext + !

		ptr@ AFSINode_bytesize + @ fcb@ IOFileControlBlock_SizeInBytes + !

		ptr@ AFSINode_timestamp + @ fcb@ IOFileControlBlock_AccessTime + KeTime_SecPart + !
		ptr@ AFSINode_timestamp + @ fcb@ IOFileControlBlock_ModifyTime + KeTime_SecPart + !
		ptr@ AFSINode_timestamp + @ fcb@ IOFileControlBlock_ChangeTime + KeTime_SecPart + !

		pfdbe@ MmEvictablePageDereference drop

		fcb@ // fcb
		buckethead@ // buckethead
		AFSFCBInsert

		fcb@ IOFileControlBlockReference drop

		// fcb@ "->0x%08x " Printf
	end else
		// found the FCB, it was in the cache already!

		// remove from hash list and reinsert on the recently-used end

		if (fcb@ buckethead@@ ~=)
			fcb@ // fcb
			buckethead@ // buckethead
			AFSFCBRemove

			fcb@ // fcb
			buckethead@ // buckethead
			AFSFCBInsert
		end

		fcb@ AFSFCBReference drop
	end

	mount@ AFSFCBCacheUnlock
end