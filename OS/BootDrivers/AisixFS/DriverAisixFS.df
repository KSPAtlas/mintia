#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/FSRTL.h"

#include "AisixFS.h"

table DriverAFSFilesystem
	0                              // next
	0                              // prev

	"AisixFS"                      // name
	pointerof DriverAFSDispatch    // dispatchtable

	pointerof DriverAFSMount       // mountfunction
	pointerof DriverAFSUnmount     // unmountfunction
	pointerof DriverAFSFlush       // flushfunction
	pointerof DriverAFSUpdateFlags // updateflags
	0                              // flags

	0                              // reserved
	0                              // reserved
	0                              // reserved
	0                              // reserved
	0                              // reserved
	0                              // reserved
	0                              // reserved
endtable

table DriverAFSDispatch
	pointerof AFSOpen                    // open
	pointerof AFSClose                   // close
	0                                    // iocontrol
	pointerof AFSReadFile                // read
	pointerof AFSWriteFile               // write
	0                                    // system control
	pointerof AFSParse                   // parse
	0                                    // create
	0                                    // flush
	pointerof AFSDeleteObject            // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	0                                    // readblock
	0                                    // writeblock
	0                                    // grow
	pointerof AFSReadDirectory           // readdirectory
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable
public DriverAFSDispatch

var AFSFCBCacheCount 0
public AFSFCBCacheCount

fn (FDriverInit) DriverInit { stage -- ok }
	if (stage@ STAGE_THREAD ==)
		auto heapcharge
		IOFileControlBlock_SIZEOF MmChargeBytesGet
		AFSFCBData_SIZEOF MmChargeBytesGet + heapcharge!

		MmPageFreeCount@ PAGESHIFT << heapcharge@ / 128 / AFSFCBCacheCount!

		AFSFCBCacheCount@ 256 min AFSFCBCacheCount!

		AFSFCBCacheCount@ 16 max AFSFCBCacheCount!

		AFSFCBCacheCount@ heapcharge@ *
		AFSFCBCacheCount@
		"caching %d FCBs (~%d bytes) per mount\n" "DriverAFSInit" HALLog

		DriverAFSFilesystem // filesystem
		IOFilesystemRegister ok!

		if (ok@)
			return
		end
	end

	0 ok!
end

fn (IOFilesystemMountFunction) DriverAFSMount { mount -- ok }
	AFSBLOCKSIZE // blocksize
	mount@ // mount
	FSVolumeInitialize ok! drop

	if (ok@)
		return
	end

	auto pageframe

	auto pfdbe

	0 // flags
	0 // offset
	mount@ // mount
	FSVolumeBlockRead ok! pfdbe! pageframe!

	if (ok@)
		return
	end

	if (pageframe@ AFSSuperblock_Magic + @ AFSSUPERBLOCKMAGIC ~=)
		pfdbe@ MmEvictablePageDereference drop

		STATUS_IO_BAD_FILESYSTEM ok!

		return
	end

	if (pageframe@ AFSSuperblock_Version + @ AFSSUPERBLOCKVERSION ~=)
		pfdbe@ MmEvictablePageDereference drop

		STATUS_IO_BAD_FILESYSTEM ok!

		return
	end

	auto afsdata

	AFSData_SIZEOF // bytes
	'AFSD' // tag
	MmAllocWithTag ok! afsdata!

	if (ok@)
		pfdbe@ MmEvictablePageDereference drop

		return
	end

	pageframe@ AFSSuperblock_FATStart + @ afsdata@ AFSData_FATStart + !
	pageframe@ AFSSuperblock_FATSize + @ afsdata@ AFSData_FATSize + !
	pageframe@ AFSSuperblock_IStart + @ afsdata@ AFSData_IStart + !
	pageframe@ AFSSuperblock_ICount + @ afsdata@ AFSData_ICount + !
	pageframe@ AFSSuperblock_VolSize + @ afsdata@ AFSData_VolSize + !
	0 afsdata@ AFSData_LastFreeBlock + !
	0 afsdata@ AFSData_FCBUsedCount + !
	0 afsdata@ AFSData_FCBReusableListHead + !
	0 afsdata@ AFSData_FCBReusableListTail + !
	0 afsdata@ AFSData_FCBRefTotal + !

	0 afsdata@ AFSData_WritableFiles + !

	"AFSFCBCacheMutex" // name
	KERNELMODE // mode
	afsdata@ AFSData_FCBCacheMutex + // mutex
	KeMutexInitialize ok!

	if (DEBUGCHECKS)
		if (ok@)
			"DriverAFSMount: couldn't initialize fcb cache mutex\n" KeCrash
		end
	end

	afsdata@ AFSData_FCBBucketListHeads + // ptr
	AFSFCBBUCKETS 8 * // size
	0 // word
	memset

	afsdata@ mount@ IOMount_FSContext + !

	pfdbe@ MmEvictablePageDereference drop

	auto rootfcb

	1 // inum
	mount@ // mount
	AFSFCBRead ok! rootfcb!

	if (ok@)
		afsdata@ MmFree

		return
	end

	rootfcb@ mount@ IOMount_RootFCB + !

	auto i
	0 i!

	auto mutex
	afsdata@ AFSData_FATMutexes + mutex!

	while (i@ AFSFATMUTEXES <)
		"AFSFATMutex" // name
		KERNELMODE // mode
		mutex@ // mutex
		KeMutexInitialize ok!

		if (DEBUGCHECKS)
			if (ok@)
				"DriverAFSMount: couldn't initialize FAT mutex\n" KeCrash
			end
		end

		1 i +=
		KeMutex_SIZEOF mutex +=
	end

	0 ok!
end

fn (IOFilesystemUnmountFunction) DriverAFSUnmount { mount -- ok }
	auto afsdata
	mount@ IOMount_FSContext + @ afsdata!

	if (afsdata@ AFSData_FCBRefTotal + @)
		STATUS_IO_DEVICE_BUSY ok!

		return
	end

	mount@ IOMount_RootFCB + @ AFSFCBDereference drop

	mount@ // mount
	AFSFCBCacheDestroy ok!

	if (ok@)
		ok@ "DriverAFSUnmount: cache destroy failed\n" KeCrash
	end

	afsdata@ MmFree

	0 mount@ IOMount_FSContext + !

	1 // trunc
	mount@ // mount
	FSVolumeFlush drop
end

fn (IOFilesystemFlushFunction) DriverAFSFlush { mount -- ok }
	// "DriverAFSFlush: TODO\n" KeCrash

	// I mean, we access the volume through the page cache,
	// so we don't have anything to flush I don't think...

	0 ok!
end

fn (IOFilesystemUpdateFlagsFunction) DriverAFSUpdateFlags { newflags oldflags mount -- ok }
	0 ok!

	if (newflags@ OSMOUNT_READONLY &)
		if (oldflags@ OSMOUNT_READONLY & ~~)
			// volume is being downgraded to read-only.
			// only allow if there are no writable files opened.

			auto rs
			HALCPUInterruptDisable rs!

			if (mount@ IOMount_FSContext + @ AFSData_WritableFiles + @)
				rs@ HALCPUInterruptRestore

				STATUS_IO_DEVICE_BUSY ok!

				return
			end

			// evade a race condition by setting the readonly flag here

			OSMOUNT_READONLY mount@ IOMount_Flags + |=

			rs@ HALCPUInterruptRestore

			// flush all modified pages to ensure the volume
			// won't be written while read-only.

			0 // trunc
			mount@ // mount
			FSVolumeFlush drop
		end
	end
end