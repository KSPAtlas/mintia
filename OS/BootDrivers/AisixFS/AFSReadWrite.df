#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/FSRTL.h"

#include "AisixFS.h"

fn AFSWalkFAT { startcount startblkno mount -- left blkno ok }
	startblkno@ blkno!
	startcount@ left!

	auto fatblkno
	0 fatblkno!

	auto curfatblkno
	-1 curfatblkno!

	auto fatpfdbe
	0 fatpfdbe!

	auto off

	auto fatdata

	auto fatbase
	mount@ IOMount_FSContext + @ AFSData_FATStart + @ fatbase!

	while (left@)
		if (blkno@ 0xFFFFFFFF ==)
			"AFSWalkFAT: balloc\n" KeCrash
		end

		blkno@ 1024 / fatblkno! // 4096/4 = 1024 FAT entries per block
		blkno@ 2 << AFSBLOCKOFFMASK & off!

		if (fatblkno@ curfatblkno@ ~=)
			// must read in a new FAT block

			if (fatpfdbe@)
				fatpfdbe@ MmEvictablePageDereference drop
			end

			0 // flags
			fatbase@ fatblkno@ + AFSBLOCKSHIFT << // offset
			mount@ // mount
			FSVolumeBlockRead ok! fatpfdbe! fatdata!

			if (ok@)
				return
			end

			fatblkno@ curfatblkno!
		end

		fatdata@ blkno@ 2 << + @ blkno!

		1 left -=
	end

	if (fatpfdbe@)
		fatpfdbe@ MmEvictablePageDereference drop
	end
end

fn (IODispatchReadFunction) AFSReadFile { timeout flags length bufsize offset buffer fcb lastmode -- bytesread ok }
	"AFSReadFile: TODO\n" KeCrash
end

fn (IODispatchWriteFunction) AFSWriteFile { flags length bufsize offset buffer fcb lastmode -- byteswritten ok }
	"AFSWriteFile: TODO\n" KeCrash
end