#include "<df>/dragonfruit.h"

#include "<ll>/rta3x/a3x.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALLIMNstationCitron.h"
#include "<inc>/HALInterrupt.h"

#include "<inc>/Kernel.h"

var DriverRTCPortCmd 0
var DriverRTCPortData 0
var DriverRTCInterruptNumber 0

externptr HALRTCQueryFunction

const RTCCMDINTERVAL 1
const RTCCMDQUERYSEC 2
const RTCCMDQUERYMS 3

buffer DriverRTCTimeCurrent KeTime_SIZEOF

extern DriverRTCInterrupt { int -- }

fn (FDriverInitEarly) DriverInitEarly { arg1 arg2 arg3 arg4 -- ok }
	if (HALRTCQueryFunction@)
		-1 ok!

		return
	end

	HALLIMNstationLowBuffer@ "clock,cmdPort" strcpy
	HALLIMNstationLowBuffer@ HALLIMNstationDGetProperty DriverRTCPortCmd!
	
	HALLIMNstationLowBuffer@ "clock,dataPort" strcpy
	HALLIMNstationLowBuffer@ HALLIMNstationDGetProperty DriverRTCPortData!

	HALLIMNstationLowBuffer@ "interrupt#" strcpy
	HALLIMNstationLowBuffer@ HALLIMNstationDGetProperty DriverRTCInterruptNumber!

	pointerof DriverRTCQuery HALRTCQueryFunction!

	auto ctime
	DriverRTCTimeCurrent ctime!

	ctime@ DriverRTCQuerySlow

	auto utime
	DriverRTCUpdateLast utime!

	ctime@ KeTime_SecPart + @ utime@ KeTime_SecPart + !
	ctime@ KeTime_MsPart + @ utime@ KeTime_MsPart + !

	0 ok!
end

buffer DriverRTCUpdateLast KeTime_SIZEOF

fn (FDriverInit) DriverInit { stage -- ok }
	if (stage@ STAGE_PRETASKING ==)
		// start the clock interrupt

		pointerof DriverRTCInterrupt DriverRTCInterruptNumber@ IPLCLOCK HALInterruptRegister

		HALRTCINTERVAL DriverRTCPortData@ HALLIMNstationCitronOutl
		RTCCMDINTERVAL DriverRTCPortCmd@ HALLIMNstationCitronCommand
	end

	0 ok!
end

fn (HALRTCQueryF) DriverRTCQuery { time -- }
	auto ctime
	DriverRTCTimeCurrent ctime!

	auto utime
	DriverRTCUpdateLast utime!

	// update our local cache of the current time from the RTC's every second
	// because otherwise we can begin to drift juuuuust a little bit

	if (ctime@ KeTime_SecPart + @ utime@ KeTime_SecPart + @ - 1 >=)
		ctime@ DriverRTCQuerySlow

		ctime@ KeTime_SecPart + @ utime@ KeTime_SecPart + !
		ctime@ KeTime_MsPart + @ utime@ KeTime_MsPart + !
	end

	ctime@ KeTime_SecPart + @ time@ KeTime_SecPart + !
	ctime@ KeTime_MsPart + @ time@ KeTime_MsPart + !
end

fn DriverRTCQuerySlow { time -- }
	auto ipl
	IPLHIGH KeIPLRaise ipl!

	RTCCMDQUERYSEC DriverRTCPortCmd@ HALLIMNstationCitronCommand
	DriverRTCPortData@ HALLIMNstationCitronInl time@ KeTime_SecPart + !

	RTCCMDQUERYMS DriverRTCPortCmd@ HALLIMNstationCitronCommand
	DriverRTCPortData@ HALLIMNstationCitronInl time@ KeTime_MsPart + !

	ipl@ KeIPLLower
end

externptr KeIPLCurrent

externptr KeDPCListTail
externptr KeDPCListHead

externptr KeTimerExpirationEarliest
externptr KeTimerExpirationDPC

fn (HALInterruptHandler) DriverRTCInterrupt { int -- }
	auto currenttime

	DriverRTCTimeCurrent currenttime!

	HALRTCINTERVAL currenttime@ KeTimeAddMs

	auto cth
	KeThreadCurrent@ cth!

	if (cth@)
		auto qt
		cth@ KeThread_Quantum + @ qt!

		if (qt@ QUANTUMUNITSPERTICK <=)
			0 qt!
		end else
			QUANTUMUNITSPERTICK qt -=
		end

		if (qt@ ~~)
			KeThreadQuantumDPC expdpc!

			if (expdpc@ KeDPC_Enqueued + @ ~~)
				KeDPCListHead@ h!

				if (h@ ~~)
					expdpc@ KeDPCListHead!
					expdpc@ KeDPCListTail!
				end else
					expdpc@ KeDPCListHead!
					h@ expdpc@ KeDPC_Next + !
				end

				1 expdpc@ KeDPC_Enqueued + !
			end
		end

		qt@ cth@ KeThread_Quantum + !
	end

	auto expdpc
	KeTimerExpirationDPC expdpc!

	if (expdpc@ KeDPC_Enqueued + @ ~~)
		if (KeTimerExpirationEarliest currenttime@ KeTimeCompare TIMEEARLIER ==)
			auto h
			KeDPCListHead@ h!

			currenttime@ KeTime_SecPart + @ expdpc@ KeDPC_Context1 + !
			currenttime@ KeTime_MsPart + @ expdpc@ KeDPC_Context2 + !

			if (h@ ~~)
				expdpc@ KeDPCListHead!
				expdpc@ KeDPCListTail!
			end else
				expdpc@ KeDPCListHead!
				h@ expdpc@ KeDPC_Next + !
			end

			1 expdpc@ KeDPC_Enqueued + !
		end
	end
end