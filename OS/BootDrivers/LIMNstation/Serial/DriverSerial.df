#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALLIMNstationCitron.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/IO.h"

struct SerialPort
	4 PortCMD
	4 PortData
	4 RingBuffer
	KeDPC_SIZEOF DPC
endstruct

const SERIALA_PORTCMD   0x10
const SERIALA_PORTDATA  0x11
const SERIALA_INTERRUPT 4

const SERIALB_PORTCMD   0x12
const SERIALB_PORTDATA  0x13
const SERIALB_INTERRUPT 5

var SerialPortA 0
var SerialPortB 0

const SERIALCMDWRITE   1
const SERIALCMDREAD    2
const SERIALCMDINTR    3
const SERIALCMDINTROFF 4

table DriverSerialDispatch
	0                                    // open
	0                                    // close
	pointerof DriverSerialIOControl      // iocontrol
	pointerof DriverSerialRead           // read
	pointerof DriverSerialWrite          // write
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	0                                    // readblock
	0                                    // writeblock
	0                                    // truncate
	0                                    // readdirectory
	0                                    // getpageaddr
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

table DriverSerial
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"serial"                             // name
	OSFILETYPE_CHARDEVICE                // type
	pointerof DriverSerialDispatch       // dispatch table
	SerialPort_SIZEOF                    // extension size

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

fn (FDriverInit) DriverInit { stage -- ok }
	if (stage@ STAGE_THREAD ==)
		auto dev
		auto ringbuffer

		"serial0" // name
		0 // sizeinbytes
		DriverSerial // driver
		ACCESS_ALL // permissions
		IODeviceCreate ok! dev!

		if (ok@)
			ok@ "SerialInit: failed to create serial0 (%i)\n" KeCrash
		end

		auto serialport
		dev@ IODeviceGetExtension serialport!

		SERIALA_PORTCMD  serialport@ SerialPort_PortCMD + !
		SERIALA_PORTDATA serialport@ SerialPort_PortData + !

		dev@ SerialPortA!

		7 // sizelog (1<<7 = 128 bytes)
		0 // valuesizelog (1 byte)
		IPLSERIAL // synchipl
		0 // chargedprocess
		ExRingBufferCreate ok! ringbuffer!

		if (ok@)
			ok@ "SerialInit: failed to create ring buffer 0 (%i)\n" KeCrash
		end

		ringbuffer@ serialport@ SerialPort_RingBuffer + !

		pointerof DriverSerialDPCFunction // function
		serialport@ SerialPort_DPC + // dpc
		KeDPCInitialize ok!

		if (ok@)
			ok@ "SerialInit: failed to initialize DPC 0 (%i)\n" KeCrash
		end

		"serial1" // name
		0 // sizeinbytes
		DriverSerial // driver
		ACCESS_ALL // permissions
		IODeviceCreate ok! dev!

		if (ok@)
			ok@ "SerialInit: failed to create serial1 (%i)\n" KeCrash
		end

		dev@ IODeviceGetExtension serialport!

		SERIALB_PORTCMD  serialport@ SerialPort_PortCMD + !
		SERIALB_PORTDATA serialport@ SerialPort_PortData + !

		dev@ SerialPortB!

		7 // sizelog (1<<7 = 128 bytes)
		0 // valuesizelog (1 byte)
		IPLSERIAL // synchipl
		0 // chargedprocess
		ExRingBufferCreate ok! ringbuffer!

		if (ok@)
			ok@ "SerialInit: failed to create ring buffer 1 (%i)\n" KeCrash
		end

		ringbuffer@ serialport@ SerialPort_RingBuffer + !

		pointerof DriverSerialDPCFunction // function
		serialport@ SerialPort_DPC + // dpc
		KeDPCInitialize ok!

		if (ok@)
			ok@ "SerialInit: failed to initialize DPC 1 (%i)\n" KeCrash
		end

		// register interrupts and start interrupting

		pointerof DriverSerialInterrupt // function
		SERIALA_INTERRUPT // interrupt number
		IPLSERIAL // interrupt priority level
		HALInterruptRegister

		pointerof DriverSerialInterrupt // function
		SERIALB_INTERRUPT // interrupt number
		IPLSERIAL // interrupt priority level
		HALInterruptRegister

		SERIALCMDINTR SERIALA_PORTCMD HALLIMNstationCitronCommand
		SERIALCMDINTR SERIALB_PORTCMD HALLIMNstationCitronCommand
	end

	0 ok!
end

fn SerialPutc { c s -- }
	// huge TODO: make serial port writing interrupt-driven. in real life this
	// place could have interrupts disabled for a REALLY long time!

	auto rs
	HALCPUInterruptDisable rs!

	c@ s@ SerialPort_PortData + @ HALLIMNstationCitronOutb
	SERIALCMDWRITE s@ SerialPort_PortCMD + @ HALLIMNstationCitronCommand

	rs@ HALCPUInterruptRestore
end

fn SerialGetc { s -- c }
	auto rs
	HALCPUInterruptDisable rs!

	SERIALCMDREAD s@ SerialPort_PortCMD + @ HALLIMNstationCitronCommand
	s@ SerialPort_PortData + @ HALLIMNstationCitronIni c!

	rs@ HALCPUInterruptRestore

	if (c@ 0xFFFF ==)
		ERR c! return
	end
end

fn (HALInterruptHandler) DriverSerialInterrupt { int -- }
	auto serialport

	if (int@ SERIALA_INTERRUPT ==)
		SerialPortA@ serialport!
	end elseif (int@ SERIALB_INTERRUPT ==)
		SerialPortB@ serialport!
	end else
		int@ "DriverSerialInterrupt: weird interrupt number %d\n" KeCrash
	end

	serialport@ IODeviceGetExtension serialport!

	auto ringbuf
	serialport@ SerialPort_RingBuffer + @ ringbuf!

	auto c
	serialport@ SerialGetc c!

	while (c@ ERR ~=)
		c@ // value
		1  // overwrite
		OSWAIT_TIMEOUTINFINITE // timeout
		KERNELMODE // lastmode
		EXRINGDONTWAIT // waitonfull
		ringbuf@ // ringbuffer
		ExRingBufferWriteValue drop drop

		serialport@ SerialGetc c!
	end

	auto dpc
	serialport@ SerialPort_DPC + dpc!

	if (dpc@ KeDPC_Enqueued + @ ~~)
		// defer waking up any blocked readers til later,
		// otherwise we will BSOD since we're at IPLSERIAL

		ringbuf@ // context1
		0 // context2
		DPCLOWIMPORTANCE // importance
		dpc@ // dpc
		KeDPCEnqueue
	end
end

fn (DPCFunction) DriverSerialDPCFunction { context1 context2 -- }
	// actually wake up blocked readers following a serial port interrupt

	IOBOOSTSERIAL // priboost
	context1@ // ringbuffer
	ExRingBufferWakeReader
end

fn (IODispatchIOControlFunction) DriverSerialIOControl { arg1 arg2 arg3 arg4 fcb -- ok }
	0 ok!
end

fn (IODispatchReadFunction) DriverSerialRead { timeout flags kflags length offset buffer fcb lastmode -- bytesread ok }
	auto serialport
	fcb@ IOFileControlBlockGetDeviceObject IODeviceGetExtension serialport!

	auto ringbuf
	serialport@ SerialPort_RingBuffer + @ ringbuf!

	0 bytesread!

	auto waitonempty
	EXRINGDONTWAIT waitonempty!

	if (flags@ OSACCESSFLAG_NONBLOCK & ~~)
		EXRINGWAIT waitonempty!
	end

	while (bytesread@ length@ <)
		auto c

		timeout@ // timeout
		lastmode@ // lastmode
		waitonempty@ // waitonempty
		ringbuf@ // ringbuffer
		ExRingBufferReadValue ok! drop c!

		if (ok@)
			return
		end

		if (lastmode@ USERMODE ==)
			c@ buffer@ KeSafeStoreByte ok!

			if (ok@)
				return
			end
		end else
			c@ buffer@ sb
		end

		1 buffer +=
		1 bytesread +=
	end

	0 ok!
end

fn (IODispatchWriteFunction) DriverSerialWrite { flags length offset buffer fcb lastmode -- byteswritten ok }
	auto serialport
	fcb@ IOFileControlBlockGetDeviceObject IODeviceGetExtension serialport!

	0 byteswritten!

	while (byteswritten@ length@ <)
		auto c

		if (lastmode@ USERMODE ==)
			buffer@ KeSafeGetByte ok! c!

			if (ok@)
				return
			end
		end else
			buffer@ gb c!
		end

		c@ serialport@ SerialPutc

		1 buffer +=
		1 byteswritten +=
	end

	0 ok!
end