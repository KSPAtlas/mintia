#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALLIMNstationCitron.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

const DKS_REALDISK  1
const DKS_PARTITION 2

struct Disk
	4 Type
	4 DKSID
	4 BlockOffset
	4 BlockSize
	4 Blocks
endstruct

const REQREAD  1
const REQWRITE 2

struct DKSRequest
	4 Next

	4 Type
	4 Buffer
	4 BlockNumber
	4 Length
	4 WakeEvent
	4 Disk
endstruct

var DKSRequestListHead 0
var DKSRequestListTail 0

const DKSMAXDISKID 7

const DKSPORTCMD 0x19
const DKSPORTA   0x1A
const DKSPORTB   0x1B

const DKSCMDSELECT  0x1
const DKSCMDREAD    0x2
const DKSCMDWRITE   0x3
const DKSCMDINFO    0x4
const DKSCMDPOLL    0x5
const DKSCMDINTR    0x6
const DKSCMDINTROFF 0x7

const DKSINTERRUPT  0x3

const DKSBLOCKTRANSFER 0x0

table DriverDKSDispatch
	0                                    // open
	0                                    // close
	pointerof DriverDKSIOControl         // iocontrol
	pointerof DriverDKSRead              // read
	pointerof DriverDKSWrite             // write
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	pointerof DriverDKSReadBlock         // readblock
	pointerof DriverDKSWriteBlock        // writeblock
	0                                    // truncate
	0                                    // readdirectory
	0                                    // getpageaddr
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

table DriverDKS
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"dks"                                // name
	OSFILETYPE_BLOCKDEVICE               // type
	pointerof DriverDKSDispatch          // dispatch table
	Disk_SIZEOF                          // extension size

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

buffer DKSDPC KeDPC_SIZEOF

externptr HALLIMNstationDKSBuffer

fn (FDriverInit) DriverInit { stage -- ok }
	if (stage@ STAGE_THREAD ==)
		pointerof DriverDKSDPCFunction // function
		DKSDPC // dpc
		KeDPCInitialize ok!

		if (ok@)
			ok@ "DKSDriverInit: failed to initialize DPC\n" KeCrash
		end

		// detect and register disks

		auto diskid
		0 diskid!

		auto namebuf
		64 alloc namebuf!

		namebuf@ // dest
		"dks" // src
		strcpy

		pointerof DriverDKSInterrupt // function
		DKSINTERRUPT // interrupt number
		IPLDISK // interrupt priority level
		HALInterruptRegister

		DKSCMDINTR DKSPORTCMD HALLIMNstationCitronCommand

		auto dev
		auto disk

		while (diskid@ DKSMAXDISKID <=)
			auto present
			auto blocks

			diskid@ DKSPORTA HALLIMNstationCitronOutl

			DKSCMDPOLL DKSPORTCMD HALLIMNstationCitronCommand

			DKSPORTA HALLIMNstationCitronInl present!
			DKSPORTB HALLIMNstationCitronInl blocks!

			if (present@ 1 &)
				// we have a disk at this ID

				diskid@ // n
				namebuf@ 3 + // buf
				itoa

				blocks@ namebuf@ diskid@ "ID %d: NAME=%s BLOCKSZ=4096 BLOCKS=%d\n" "DKSDriverInit" HALLog

				auto sizeinbytes

				if (blocks@ 1048576 <)
					blocks@ 4096 * sizeinbytes!

					namebuf@ // name
					sizeinbytes@ // sizeinbytes
					DriverDKS // driver
					ACCESS_OWNER_ALL ACCESS_GROUP_ALL | // permissions
					IODeviceCreate ok! dev!

					if (ok@)
						ok@ "DKSDriverInit: failed to create device object (%i)\n" KeCrash
					end

					4096 dev@ IODevice_BlockSize + !

					dev@ IODevice_Extension + @ disk!

					DKS_REALDISK disk@ Disk_Type + !
					diskid@ disk@ Disk_DKSID + !
					0 disk@ Disk_BlockOffset + !
					blocks@ disk@ Disk_Blocks + !
					4096 disk@ Disk_BlockSize + !

					auto partitiontable

					dev@ // devobject
					IOPartitionTableRead ok! partitiontable!

					if (ok@ 0 ==)
						auto pcount
						partitiontable@ IOPartitionTable_PartitionCount + @ pcount!

						auto pte
						partitiontable@ IOPartitionTable_SIZEOF + pte!

						namebuf@ 4 + // dest
						"s" // src
						strcpy

						while (pcount@)
							pte@ IOPartitionEntry_ID + @ // n
							namebuf@ 5 + // buf
							itoa

							pte@ IOPartitionEntry_SizeInBlocks + @ blocks!

							blocks@ 4096 * sizeinbytes!

							namebuf@ // name
							sizeinbytes@ // sizeinbytes
							DriverDKS // driver
							ACCESS_OWNER_ALL ACCESS_GROUP_ALL | // permissions
							IODeviceCreate ok! dev!

							if (ok@)
								ok@ "DKSDriverInit: failed to create device object (%i)\n" KeCrash
							end

							4096 dev@ IODevice_BlockSize + !

							dev@ IODevice_Extension + @ disk!

							DKS_PARTITION disk@ Disk_Type + !
							diskid@ disk@ Disk_DKSID + !
							pte@ IOPartitionEntry_BlockOffset + @ disk@ Disk_BlockOffset + !
							blocks@ disk@ Disk_Blocks + !
							4096 disk@ Disk_BlockSize + !

							IOPartitionEntry_SIZEOF pte +=
							1 pcount -=
						end
					end
				end else
					namebuf@ "%s: disk is >=4GB; this is not supported! skipping.\n" "DKSDriverInit" HALLog
				end
			end

			1 diskid +=
		end
	end

	0 ok!
end

fn (DPCFunction) DriverDKSDPCFunction { context1 context2 -- }
	// fulfill pending request

	auto ior
	DKSRequestListHead@ ior!

	if (DEBUGCHECKS)
		if (ior@ ~~)
			"DriverDKSDPCFunction: no request\n" KeCrash
		end
	end

	if (ior@ DKSRequest_Type + @ REQREAD ==)
		ior@ DKSRequest_Buffer + @ // dest
		HALLIMNstationDKSBuffer@ // src
		ior@ DKSRequest_Length + @ // size
		memcpy
	end

	IOBOOSTDISK // priboost
	ior@ DKSRequest_WakeEvent + @ // event
	KeEventSignal drop

	ior@ DKSRequest_Next + @ ior!

	ior@ DKSRequestListHead!

	if (ior@)
		auto disk
		ior@ DKSRequest_Disk + @ disk!

		// start next one

		// believe it or not its safe (and necessary) to return with
		// interrupts disabled here because DPCs behave strangely in this
		// operating system.

		// the reason its necessary is to prevent loss of disk interrupts.

		if (ior@ DKSRequest_Type + @ REQREAD ==)
			HALCPUInterruptDisable drop

			disk@ Disk_DKSID + @ DKSPORTA HALLIMNstationCitronOutl
			DKSCMDSELECT DKSPORTCMD HALLIMNstationCitronCommand

			ior@ DKSRequest_BlockNumber + @ disk@ Disk_BlockOffset + @ + DKSPORTA HALLIMNstationCitronOutl
			DKSCMDREAD DKSPORTCMD HALLIMNstationCitronCommandASync

			return
		end else
			HALLIMNstationDKSBuffer@ // dest
			ior@ DKSRequest_Buffer + @ // src
			disk@ Disk_BlockSize + @ // size
			memcpy

			HALCPUInterruptDisable drop

			disk@ Disk_DKSID + @ DKSPORTA HALLIMNstationCitronOutl
			DKSCMDSELECT DKSPORTCMD HALLIMNstationCitronCommand

			ior@ DKSRequest_BlockNumber + @ disk@ Disk_BlockOffset + @ + DKSPORTA HALLIMNstationCitronOutl
			DKSCMDWRITE DKSPORTCMD HALLIMNstationCitronCommandASync

			return
		end
	end else
		0 DKSRequestListTail!
	end
end

fn (HALInterruptHandler) DriverDKSInterrupt { int -- }
	auto event
	auto details

	DKSCMDINFO DKSPORTCMD HALLIMNstationCitronCommand
	DKSPORTA HALLIMNstationCitronInl event!
	DKSPORTB HALLIMNstationCitronInl details!

	if (event@ DKSBLOCKTRANSFER ==)
		auto dpc
		DKSDPC dpc!

		if (dpc@ KeDPC_Enqueued + @ ~~)
			// defer doing fun work til later,
			// otherwise we will BSOD since we're at IPLDISK

			0 // context1
			0 // context2
			DPCLOWIMPORTANCE // importance
			dpc@ // dpc
			KeDPCEnqueue
		end
	end
end

fn DKSBlockReadCommand { buf len blockno disk event ior -- ok }
	0 ok!

	REQREAD ior@ DKSRequest_Type + !
	buf@ ior@ DKSRequest_Buffer + !
	blockno@ ior@ DKSRequest_BlockNumber + !
	len@ ior@ DKSRequest_Length + !
	disk@ ior@ DKSRequest_Disk + !
	0 ior@ DKSRequest_Next + !
	event@ ior@ DKSRequest_WakeEvent + !

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto t
	DKSRequestListTail@ t!

	if (t@ ~~)
		ior@ DKSRequestListHead!
		ior@ DKSRequestListTail!

		// no pending requests, start the disk

		auto rs
		HALCPUInterruptDisable rs!

		disk@ Disk_DKSID + @ DKSPORTA HALLIMNstationCitronOutl
		DKSCMDSELECT DKSPORTCMD HALLIMNstationCitronCommand

		blockno@ disk@ Disk_BlockOffset + @ + DKSPORTA HALLIMNstationCitronOutl
		DKSCMDREAD DKSPORTCMD HALLIMNstationCitronCommandASync

		rs@ HALCPUInterruptRestore
	end else
		ior@ t@ DKSRequest_Next + !
		ior@ DKSRequestListTail!
	end

	ipl@ KeIPLLower
end

fn DKSBlockWriteCommand { buf blockno disk event ior -- ok }
	0 ok!

	REQWRITE ior@ DKSRequest_Type + !
	buf@ ior@ DKSRequest_Buffer + !
	blockno@ ior@ DKSRequest_BlockNumber + !
	0 ior@ DKSRequest_Length + ! // always blocksize
	disk@ ior@ DKSRequest_Disk + !
	0 ior@ DKSRequest_Next + !
	event@ ior@ DKSRequest_WakeEvent + !

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto t
	DKSRequestListTail@ t!

	if (t@ ~~)
		ior@ DKSRequestListHead!
		ior@ DKSRequestListTail!

		// no pending requests, start the disk

		HALLIMNstationDKSBuffer@ // dest
		buf@ // src
		disk@ Disk_BlockSize + @ // len
		memcpy

		auto rs
		HALCPUInterruptDisable rs!

		disk@ Disk_DKSID + @ DKSPORTA HALLIMNstationCitronOutl
		DKSCMDSELECT DKSPORTCMD HALLIMNstationCitronCommand

		blockno@ disk@ Disk_BlockOffset + @ + DKSPORTA HALLIMNstationCitronOutl
		DKSCMDWRITE DKSPORTCMD HALLIMNstationCitronCommandASync

		rs@ HALCPUInterruptRestore
	end else
		ior@ t@ DKSRequest_Next + !
		ior@ DKSRequestListTail!
	end

	ipl@ KeIPLLower
end

fn (IODispatchIOControlFunction) DriverDKSIOControl { arg1 arg2 arg3 arg4 fcb -- ok }
	0 ok!
end

// routines for I/O by byte offset.
// these are called when the device object is opened directly, either cached
// (in which case the caller is the page cache) or uncached.

// if caller isn't careful these can lead to some redundant reads and writes.
// which are slow.

fn (IODispatchReadFunction) DriverDKSRead { timeout flags kflags length offset buffer fcb lastmode -- bytesread ok }
	auto disk
	fcb@ IOFileControlBlock_DeviceObject + @ IODevice_Extension + @ disk!

	auto blocksize
	fcb@ IOFileControlBlock_DeviceObject + @ IODevice_BlockSize + @ blocksize!

	auto bytesize
	fcb@ IOFileControlBlock_SizeInBytes + @ bytesize!

	0 ok!

	0 bytesread!

	if (offset@ bytesize@ >=)
		return
	end

	auto event
	KeEvent_SIZEOF alloc event!

	0 // signaled
	KEEVENT_SYNCH // type
	"DKSReadEvent" // name
	event@ // event
	KeEventInitialize ok!

	if (DEBUGCHECKS)
		if (ok@)
			"DriverDKSRead: failed to initialize event\n" KeCrash
		end
	end

	auto ior
	DKSRequest_SIZEOF alloc ior!

	auto blockbuf
	0 blockbuf!

	if (lastmode@ USERMODE ==)
		blocksize@ // bytes
		'Bloc' // tag
		MmAllocWithTag ok! blockbuf!

		if (ok@)
			return
		end
	end

	bytesize@ offset@ -
	length@
	min length!

	while (bytesread@ length@ <)
		auto blockoff
		offset@ blocksize@ % blockoff!

		auto m
		length@ bytesread@ -
		blocksize@ blockoff@ -
		min m!

		if (lastmode@ USERMODE ==)
			// sadly for direct USERMODE reads we need to split the read
			// operation between the disk request and the copy to userspace.

			blockbuf@ blockoff@ + // buf
			m@ // len
			offset@ blocksize@ / // blockno
			disk@ // disk
			event@ // event
			ior@ // ior
			DKSBlockReadCommand ok!

			if (ok@)
				blockbuf@ MmFree

				return
			end
		end else
			buffer@ blockoff@ + // buf
			m@ // len
			offset@ blocksize@ / // blockno
			disk@ // disk
			event@ // event
			ior@ // ior
			DKSBlockReadCommand ok!

			if (ok@)
				return
			end
		end

		KERNELMODE // waitmode
		0 // alertable
		OSWAIT_TIMEOUTINFINITE // timeout
		event@ // object
		KeThreadWaitForObject ok!

		if (DEBUGCHECKS)
			if (ok@)
				ok@ "DriverDKSRead: couldn't wait on event (%i)\n" KeCrash
			end
		end

		if (lastmode@ USERMODE ==)
			buffer@ blockoff@ + // dest
			blockbuf@ // src
			m@ // size
			KeSafeCopyOut ok!

			if (ok@)
				blockbuf@ MmFree

				return
			end
		end

		event@ KeEventReset drop

		m@ buffer +=
		m@ bytesread +=
		m@ offset +=
	end

	if (blockbuf@)
		blockbuf@ MmFree
	end
end

fn (IODispatchWriteFunction) DriverDKSWrite { flags length offset buffer fcb lastmode -- byteswritten ok }
	auto disk
	fcb@ IOFileControlBlock_DeviceObject + @ IODevice_Extension + @ disk!

	auto blocksize
	fcb@ IOFileControlBlock_DeviceObject + @ IODevice_BlockSize + @ blocksize!

	auto bytesize
	fcb@ IOFileControlBlock_SizeInBytes + @ bytesize!

	0 ok!

	0 byteswritten!

	if (offset@ bytesize@ >=)
		STATUS_IO_END_OF_DISK ok!

		return
	end

	auto event
	KeEvent_SIZEOF alloc event!

	0 // signaled
	KEEVENT_SYNCH // type
	"DKSWriteEvent" // name
	event@ // event
	KeEventInitialize ok!

	if (DEBUGCHECKS)
		if (ok@)
			"DriverDKSWrite: failed to initialize event\n" KeCrash
		end
	end

	auto ior
	DKSRequest_SIZEOF alloc ior!

	auto blockbuf
	0 blockbuf!

	if (lastmode@ USERMODE ==)
		blocksize@ // bytes
		'Bloc' // tag
		MmAllocWithTag ok! blockbuf!

		if (ok@)
			return
		end
	end

	bytesize@ offset@ -
	length@
	min length!

	while (byteswritten@ length@ <)
		auto blockoff
		offset@ blocksize@ % blockoff!

		auto m
		length@ byteswritten@ -
		blocksize@ blockoff@ -
		min m!

		if (m@ blocksize@ ~=)
			if (blockbuf@)
				blockbuf@ MmFree
			end

			STATUS_IO_UNALIGNED ok!

			return
		end

		if (lastmode@ USERMODE ==)
			// sadly for direct USERMODE writes we need to split the write
			// operation between the disk request and the copy from userspace.

			blockbuf@ // dest
			buffer@ // src
			blocksize@ // size
			KeSafeCopyIn ok!

			if (ok@)
				blockbuf@ MmFree

				return
			end

			blockbuf@ // buf
			offset@ blocksize@ / // blockno
			disk@ // disk
			event@ // event
			ior@ // ior
			DKSBlockWriteCommand ok!

			if (ok@)
				blockbuf@ MmFree

				return
			end
		end else
			buffer@ // buf
			offset@ blocksize@ / // blockno
			disk@ // disk
			event@ // event
			ior@ // ior
			DKSBlockWriteCommand ok!

			if (ok@)
				return
			end
		end

		KERNELMODE // waitmode
		0 // alertable
		OSWAIT_TIMEOUTINFINITE // timeout
		event@ // object
		KeThreadWaitForObject ok!

		if (DEBUGCHECKS)
			if (ok@)
				ok@ "DriverDKSWrite: couldn't wait on event (%i)\n" KeCrash
			end
		end

		event@ KeEventReset drop

		m@ buffer +=
		m@ byteswritten +=
		m@ offset +=
	end

	if (blockbuf@)
		blockbuf@ MmFree
	end
end

// routines for I/O by block offset. rarely called.

fn (IODispatchWriteBlockFunction) DriverDKSWriteBlock { blockno buffer devobject -- ok }
	// write by block

	auto disk
	devobject@ IODevice_Extension + @ disk!

	auto blocksize
	devobject@ IODevice_BlockSize + @ blocksize!

	if (blockno@ disk@ Disk_Blocks + @ >=)
		STATUS_IO_END_OF_DISK ok!

		return
	end

	auto event
	KeEvent_SIZEOF alloc event!

	0 // signaled
	KEEVENT_SYNCH // type
	"DKSWriteBlockEvent" // name
	event@ // event
	KeEventInitialize ok!

	if (DEBUGCHECKS)
		if (ok@)
			"DriverDKSWriteBlock: failed to initialize event\n" KeCrash
		end
	end

	auto ior
	DKSRequest_SIZEOF alloc ior!

	buffer@ // buf
	blockno@ // blockno
	disk@ // disk
	event@ // event
	ior@ // ior
	DKSBlockWriteCommand ok!

	if (ok@)
		return
	end

	KERNELMODE // waitmode
	0 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	event@ // object
	KeThreadWaitForObject ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "DriverDKSWriteBlock: couldn't wait on event (%i)\n" KeCrash
		end
	end
end

fn (IODispatchReadBlockFunction) DriverDKSReadBlock { blockno buffer devobject -- ok }
	// read by block

	auto disk
	devobject@ IODevice_Extension + @ disk!

	auto blocksize
	devobject@ IODevice_BlockSize + @ blocksize!

	if (blockno@ disk@ Disk_Blocks + @ >=)
		STATUS_IO_END_OF_DISK ok!

		return
	end

	auto event
	KeEvent_SIZEOF alloc event!

	0 // signaled
	KEEVENT_SYNCH // type
	"DKSReadBlockEvent" // name
	event@ // event
	KeEventInitialize ok!

	if (DEBUGCHECKS)
		if (ok@)
			"DriverDKSReadBlock: failed to initialize event\n" KeCrash
		end
	end

	auto ior
	DKSRequest_SIZEOF alloc ior!

	buffer@ // buf
	blocksize@ // len
	blockno@ // blockno
	disk@ // disk
	event@ // event
	ior@ // ior
	DKSBlockReadCommand ok!

	if (ok@)
		return
	end

	KERNELMODE // waitmode
	0 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	event@ // object
	KeThreadWaitForObject ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "DriverDKSReadBlock: couldn't wait on event (%i)\n" KeCrash
		end
	end
end