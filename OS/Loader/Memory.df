#include "<df>/dragonfruit.h"
#include "Loader.h"

buffer MemBitmap INITBITMAPSZ
public MemBitmap

var MemAllocated 0
public MemAllocated

var MemPages 0
public MemPages

fn MemInit { -- }
	auto bm
	MemBitmap bm!

	// limit to first 64MB as thats as far as limn2k can jump

	LoaderTotalRAM@ 4096 / 16384 min MemPages!

	// reserve 32*4*4096 = 512kb
	// so as not to allocate over firmware and loader code and data

	0xFFFFFFFF bm@!
	0xFFFFFFFF bm@ 4 + !
	0xFFFFFFFF bm@ 8 + !
	0xFFFFFFFF bm@ 12 + !
end

fn HexDump { addr len -- }
	auto i
	0 i!

	while (len@)
		if (i@ 4 % 0 == i@ &&)
			'\n' Putc
		end

		addr@ @ "%9x " Printf

		1 i +=
		4 addr +=
		4 len -=
	end

	'\n' Putc
end

fn MemSetStatus { with pages start -- }
	auto max
	pages@ start@ + max!

	auto bmp
	MemBitmap start@ 32 / 4 * + bmp!

	auto word
	bmp@@ word!

	auto q
	start@ q!

	while (start@ max@ <)
		if (with@)
			word@ start@ 31 & bitset word!
		end else
			word@ start@ 31 & bitclear word!
		end

		1 start +=

		if (start@ 31 & ~~)
			word@ bmp@!

			4 bmp +=

			bmp@@ word!
		end
	end

	word@ bmp@!
end

fn MemFree { pages pstart -- }
	pages@ MemAllocated -=

	0 pages@ pstart@ MemSetStatus
end

fn MemAlloc { pages pstart -- astart ok }
	-1 ok!

	if (pages@ 0 ==)
		"tried to allocate 0 pages\n" LoaderPanic
	end

	auto chend
	MemPages@ chend!

	auto i
	pstart@ i!

	auto bmp
	MemBitmap i@ 32 / 4 * + bmp!

	auto word
	bmp@@ word!

	auto run
	0 run!

	auto mode
	0 mode!

	while (1)
		if (run@ pages@ >=)
			1 pages@ astart@ MemSetStatus

			pages@ MemAllocated +=

			0 ok!
			return
		end elseif (i@ chend@ >=)
			if (mode@)
				-1 ok!
				return
			end else
				0 i!
				1 mode!
				0 run!
				pstart@ chend!
				MemBitmap bmp!
				continue
			end
		end

		if (i@ 31 & ~~)
			bmp@@ word!

			4 bmp +=

			if (word@ 0xFFFFFFFF ==)
				0 run!
				32 i +=
				continue
			end elseif (word@ 0x00000000 ==)
				if (run@ 0 ==)
					i@ astart!
				end

				32 run +=
				32 i +=
				continue
			end
		end

		if (word@ i@ 31 & bitget)
			0 run!
		end else
			if (run@ 0 ==)
				i@ astart!
			end

			1 run +=
		end

		1 i +=
	end
end