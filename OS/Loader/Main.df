#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "Loader.h"

var LoaderTotalRAM 0
public LoaderTotalRAM

var LoaderEntrypoint 0
public LoaderEntrypoint

var LoaderHALName 0
public LoaderHALName

fnptr StandaloneEntry { ldrinfo api bootdev arg -- ret }

fn LoaderNVRAMGetVar { name -- value }
	"/nvram" a3xDeviceSelect
		name@ "getVar" a3xDCallMethod drop drop drop value!
	a3xDeviceExit
end

buffer LoaderInfoBlock LoaderInfo_SIZEOF

buffer HALNameBuffer 128

fn Main { args -- ret }
	0 ret!

	LOADERMINOR LOADERMAJOR "\nM31Loader %d.%d - loader for andromeda\n" Printf

	(* clear BSS section *)

	pointerof _bss
	pointerof _bss_end pointerof _bss -
	0 memset

	args@ ArgsInit

	LOADERMAJOR LoaderInfoBlock LoaderInfo_Major + !
	LOADERMINOR LoaderInfoBlock LoaderInfo_Minor + !

	MemBitmap LoaderInfoBlock LoaderInfo_InitMemBmp + !
	INITBITMAPSZ LoaderInfoBlock LoaderInfo_InitMemBmpSz + !
	DLLListHead@ LoaderInfoBlock LoaderInfo_DLLListHead + !
	ArgsBuffer LoaderInfoBlock LoaderInfo_ArgsBuffer + !

	// if a HAL has been specified, use that one 
	auto halp
	"HAL" ArgsValue halp!

	if (halp@ ~~)
		// nope, maybe in an NVRAM variable
		"andromeda,HAL" LoaderNVRAMGetVar halp!
	end

	if (halp@ ~~) // a HAL wasn't specified, use the default one for the platform
		"/platform" a3xDeviceSelect
			"model" a3xDGetProperty halp!
		a3xDeviceExit

		if (halp@ ~~)
			"/platform: node has no 'model' property!\n" LoaderPanic
		end

		HALNameBuffer "HAL" strcpy
		HALNameBuffer 3 + halp@ strcpy
		HALNameBuffer 3 + halp@ strlen + ".dll" strcpy

		HALNameBuffer LoaderHALName!
	end else
		halp@ LoaderHALName!
	end

	LoaderHALName@ "andromeda,HAL = %s\n" Printf

	"/memory" a3xDeviceSelect
		"totalRAM" a3xDGetProperty LoaderTotalRAM!
	a3xDeviceExit

	MemInit

	AFSInit

	if (a3xMyDevice@ AFSMount)
		"couldn't mount boot device\n" LoaderPanic
	end

	"AndromedaKernel.exe" DLLLoad ret! drop

	if (ret@ 0 ~=)
		"couldn't load AndromedaKernel.exe\n" LoaderPanic
	end

	if (LoaderEntrypoint@ ~~)
		"no entrypoint found!\n" LoaderPanic
	end

	// "binding...\n" Printf

	DLLResolveAll ret!

	if (ret@ 0 ~=)
		"couldn't bind\n" LoaderPanic
	end

	DLLRelocateAll ret!

	if (ret@ 0 ~=)
		"couldn't relocate\n" LoaderPanic
	end

	"Into the fire.\n\n" Printf

	LoaderInfoBlock a3xCIPtr@ a3xMyDevice@ args@ LoaderEntrypoint@ StandaloneEntry ret!

	a3xConsoleUserOut

	0 LoaderExit
end

fn LoaderExit { ret -- }
	AFSExit

	ret@ a3xReturn
end

fn LoaderPanic { ... fmt -- }
	"M31Loader: panic: " Printf

	argv argc@ fmt@ VPrintf

	-1 LoaderExit
end