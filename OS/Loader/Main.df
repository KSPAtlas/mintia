#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "Loader.h"

var LoaderTotalRAM 0
public LoaderTotalRAM

var LoaderEntrypoint 0
public LoaderEntrypoint

var LoaderHALName 0
public LoaderHALName

var LoaderInterruptStackTop 0

asm "

SavedSP:
	.dl 0

StandaloneEntry:
	push lr

	la  t0, SavedSP
	s.l t0, zero, sp

	la  t0, LoaderInterruptStackTop
	l.l sp, t0, zero

	subi  sp, sp, 8
	s.l   sp, zero, zero
	sio.l sp, 4, zero

	la  t0, LoaderEntrypoint
	l.l t0, t0, zero

	la  t1, a3xMyDevice
	l.l a1, t1, zero

	la  t1, a3xCIPtr
	l.l a2, t1, zero

	la  a3, LoaderInfoBlock

	jalr t0

	la  t0, SavedSP
	l.l sp, t0, zero

	pop lr

	ret

"

extern StandaloneEntry { -- ret }

fn LoaderNVRAMGetVar { name -- value }
	"/nvram" a3xDeviceSelect
		name@ "getVar" a3xDCallMethod drop drop drop value!
	a3xDeviceExit
end

buffer LoaderInfoBlock LoaderInfo_SIZEOF

buffer HALNameBuffer 128

const INTERRUPTSTACKPAGES 2

fn Main { args -- ret }
	0 ret!

	LOADERMINOR LOADERMAJOR "\nM31Loader %d.%d - loader for andromeda\n" Printf

	(* clear BSS section *)

	pointerof _bss
	pointerof _bss_end pointerof _bss -
	0 memset

	args@ ArgsInit

	"-relink" ArgsCheck DLLForceRelink!

	auto dbg
	"DBG" ArgsValue dbg!

	// if a HAL has been specified, use that one 
	auto halp
	"HAL" ArgsValue halp!

	if (halp@ ~~)
		// nope, maybe in an NVRAM variable
		"andromeda,HAL" LoaderNVRAMGetVar halp!
	end

	if (halp@ ~~) // a HAL wasn't specified, use the default one for the platform
		"/platform" a3xDeviceSelect
			"model" a3xDGetProperty halp!
		a3xDeviceExit

		if (halp@ ~~)
			"/platform: node has no 'model' property!\n" LoaderPanic
		end

		HALNameBuffer "HAL" strcpy
		HALNameBuffer 3 + halp@ strcpy
		HALNameBuffer 3 + halp@ strlen + ".dll" strcpy

		HALNameBuffer LoaderHALName!
	end else
		halp@ LoaderHALName!
	end

	LoaderHALName@ "andromeda,HAL = %s\n" Printf

	"/memory" a3xDeviceSelect
		"totalRAM" a3xDGetProperty LoaderTotalRAM!
	a3xDeviceExit

	MemInit

	AFSInit

	if (a3xMyDevice@ AFSMount)
		"couldn't mount boot device\n" LoaderPanic
	end

	auto dll
	"AndromedaKernel.exe" DLLLoad ret! dll!

	if (ret@ 0 ~=)
		"couldn't load AndromedaKernel.exe\n" LoaderPanic
	end

	if (LoaderEntrypoint@ ~~)
		"no entrypoint found!\n" LoaderPanic
	end

	auto kemain
	dll@ "KeMain" DLLGetSymbolAddress kemain!

	if (kemain@ ~~)
		"KeMain not found!\n" LoaderPanic
	end

	if (dbg@)
		dbg@ DLLLoad ret! dll!

		if (ret@ 0 ~=)
			dbg@ "couldn't load %s\n" LoaderPanic
		end

		dll@ "DebugInit" DLLGetSymbolAddress dbg!

		if (dbg@ ~~)
			"DebugInit not found in debugger image!\n" LoaderPanic
		end
	end

	// "binding...\n" Printf

	DLLResolveAll ret!

	if (ret@ 0 ~=)
		"couldn't bind\n" LoaderPanic
	end

	DLLRelocateAll ret!

	if (ret@ 0 ~=)
		"couldn't relocate\n" LoaderPanic
	end

	ResourceLoadAll ret!

	auto screen
	"/screen" a3xDevTreeWalk screen!

	if (screen@)
		screen@ a3xDeviceSelectNode
			auto format
			"model" a3xDGetProperty LoaderBootFBMatch format!

			if (format@)
				"framebuffer" a3xDGetProperty LoaderInfoBlock LoaderInfo_HALConsoleFBAddr + !
				"width" a3xDGetProperty LoaderInfoBlock LoaderInfo_HALConsoleFBWidth + !
				"height" a3xDGetProperty LoaderInfoBlock LoaderInfo_HALConsoleFBHeight + !
				format@ LoaderInfoBlock LoaderInfo_HALConsoleFBFormat + !
			end
		a3xDeviceExit
	end

	auto istack
	INTERRUPTSTACKPAGES 0 MemAlloc ret! istack!

	if (ret@ 0 ~=)
		"couldn't allocate interrupt stack\n" LoaderPanic
	end

	12 istack <<=
	istack@ INTERRUPTSTACKPAGES 12 << + LoaderInterruptStackTop!

	LOADERMAJOR LoaderInfoBlock LoaderInfo_Major + !
	LOADERMINOR LoaderInfoBlock LoaderInfo_Minor + !

	MemBitmap LoaderInfoBlock LoaderInfo_InitMemBmp + !
	INITBITMAPSZ LoaderInfoBlock LoaderInfo_InitMemBmpSz + !
	DLLListHead@ LoaderInfoBlock LoaderInfo_DLLListHead + !
	ResourceListHead@ LoaderInfoBlock LoaderInfo_ResourceListHead + !
	ArgsBuffer LoaderInfoBlock LoaderInfo_ArgsBuffer + !
	kemain@ LoaderInfoBlock LoaderInfo_KeMain + !
	LoaderTotalRAM@ LoaderInfoBlock LoaderInfo_TotalRAM + !
	istack@ LoaderInfoBlock LoaderInfo_InterruptStack + !
	INTERRUPTSTACKPAGES LoaderInfoBlock LoaderInfo_InterruptStackPages + !
	dbg@ LoaderInfoBlock LoaderInfo_DebugInit + !
	MemPageFrameDB@ LoaderInfoBlock LoaderInfo_PageFrameDB + !

	"Into the fire.\n\n" Printf

	StandaloneEntry ret!

	ret@ LoaderExit
end

fn LoaderBootFBMatch { name -- format }
	0 format!

	if (name@ "AISA,limngfx" strcmp)
		BOOTFBFORMAT_AB5G5R5 format!
	end
end

fn LoaderExit { ret -- }
	AFSExit

	ret@ a3xReturn
end

fn LoaderPanic { ... fmt -- }
	"M31Loader: panic: " Printf

	argv argc@ fmt@ VPrintf

	-1 LoaderExit
end