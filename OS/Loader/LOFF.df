#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "Loader.h"

const LOFFMagic 0x4C4F4634
const LOFFArch 2

const LOFFTEXT 1

buffer LOFFHeaderBuf LOFFHeader_SIZEOF

table LOFFSectionNames
	0
	"text"
	"data"
	"bss"
endtable

fn LOFFLoad { path loff -- ok }
	-1 ok!

	auto ino
	path@ AFSPath ino!

	if (ino@ -1 ==)
		"not found\n" Printf
		return
	end

	if (ino@ AFSINode_Type + @ 1 ~=)
		ino@ AFSFreeINode
		"is a directory\n" Printf
		return
	end

	auto bytes
	LOFFHeaderBuf LOFFHeader_SIZEOF 0 ino@ AFSRead bytes!

	if (bytes@ LOFFHeader_SIZEOF ~=)
		ino@ AFSFreeINode
		"short LOFF image or error\n" Printf
		return
	end

	if (LOFFHeaderBuf LOFFHeader_Magic + @ LOFFMagic ~=)
		ino@ AFSFreeINode
		"corrupt LOFF image\n" Printf
		return
	end

	if (LOFFHeaderBuf LOFFHeader_TargetArchitecture + @ LOFFArch ~=)
		ino@ AFSFreeINode
		"LOFF image is not for this architecture\n" Printf
		return
	end

	// having passed basic checks to make sure its not a text file or something, just trust it now

	loff@ ino@ LOFFLoadTables ok!
	if (ok@ 0 ~=)
		ino@ AFSFreeINode
		return
	end

	// load text section

	1
	loff@
	loff@ LOFFLoaded_TextLinkedAddr +
	0
	LOFFHeaderBuf LOFFHeader_TextHeader + @
	ino@ LOFFLoadSection ok!

	if (ok@ 0 ~=)
		ino@ AFSFreeINode
		return
	end

	// load data section

	2
	loff@
	loff@ LOFFLoaded_DataLinkedAddr +
	0
	LOFFHeaderBuf LOFFHeader_DataHeader + @
	ino@ LOFFLoadSection ok!

	if (ok@ 0 ~=)
		ino@ AFSFreeINode
		return
	end

	// load bss section

	3
	loff@
	loff@ LOFFLoaded_BSSLinkedAddr +
	1
	LOFFHeaderBuf LOFFHeader_BSSHeader + @
	ino@ LOFFLoadSection ok!

	if (ok@ 0 ~=)
		ino@ AFSFreeINode
		return
	end

	auto entry
	LOFFHeaderBuf LOFFHeader_EntrySymbol + @ entry!

	if (entry@ 0xFFFFFFFF ~=)
		loff@ LOFFLoaded_SymbolTable + @ entry@ LOFFSymbol_SIZEOF * + entry!

		if (entry@ LOFFSymbol_Section + @ LOFFTEXT ==)
			loff@ LOFFLoaded_TextRealAddr + @ entry@ LOFFSymbol_Value + @ + entry!
		end else
			0xFFFFFFFF entry!
		end
	end

	entry@ loff@ LOFFLoaded_Entrypoint + !

	if (LOFFHeaderBuf LOFFHeader_Fragment + @)
		1 loff@ LOFFLoaded_Rebased + !
	end

	ino@ AFSFreeINode
end

fn LOFFGetString { loff offset -- str }
	auto strtab
	loff@ LOFFLoaded_StringTable + @ strtab!

	if (strtab@ ~~)
		"no string table\n" LoaderPanic
		return
	end

	strtab@ offset@ + str!
end

fn LOFFLoadTables { loff ino -- ok }
	auto headsz
	LOFFHeaderBuf LOFFHeader_BSSHeader + @ LOFFSectionHeader_SIZEOF + headsz!

	auto head
	headsz@ 4095 + 12 >> 0 MemAlloc ok! head!

	if (ok@)
		"couldn't allocate memory for LOFF head\n" Printf
		return
	end

	12 head <<=

	head@ headsz@ 0 ino@ AFSRead ok!

	if (ok@ headsz@ ~=)
		"short executable or error\n" Printf
		-1 ok!
		return
	end

	head@ loff@ LOFFLoaded_Base + !

	LOFFHeaderBuf LOFFHeader_SymbolCount + @ loff@ LOFFLoaded_SymbolCount + !
	LOFFHeaderBuf LOFFHeader_SymbolTableOffset + @ head@ + loff@ LOFFLoaded_SymbolTable + !
	LOFFHeaderBuf LOFFHeader_StringTableSize + @ loff@ LOFFLoaded_StringSize + !
	LOFFHeaderBuf LOFFHeader_StringTableOffset + @ head@ + loff@ LOFFLoaded_StringTable + !
	LOFFHeaderBuf LOFFHeader_ImportCount + @ loff@ LOFFLoaded_ImportCount + !
	LOFFHeaderBuf LOFFHeader_ImportTableOffset + @ head@ + loff@ LOFFLoaded_ImportTable + !

	0 ok!
end

fn LOFFLoadSection { id loff section bss header ino -- ok }
	auto base
	loff@ LOFFLoaded_Base + @ base!

	base@ header +=

	auto la
	header@ LOFFSectionHeader_LinkedAddress + @ la!

	if (la@ 4095 &)
		-1 ok!
		"unaligned section\n" Printf
		return
	end

	auto sz
	header@ LOFFSectionHeader_SectionSize + @ sz!

	auto astart
	la@ astart!

	if (sz@)
		sz@ 4095 + 12 >> la@ 12 >> MemAlloc ok! astart!

		if (ok@)
			"couldn't allocate memory for section\n" Printf
			return
		end

		12 astart <<=
	end

	if (la@ astart@ ~= sz@ &&)
		// astart@ la@ [id@]LOFFSectionNames@ " REBASE %s 0x%x -> 0x%x\n" Printf

		1 loff@ LOFFLoaded_Rebased + !
	end

	la@ section@ LOFFLoadedSection_LinkedAddr + !
	astart@ section@ LOFFLoadedSection_RealAddr + !
	sz@ section@ LOFFLoadedSection_Size + !

	0 ok!

	if (sz@)
		if (bss@)
			astart@ sz@ 0 memset // bss section, just zero it out
		end else
			header@ LOFFSectionHeader_FixupCount + @ section@ LOFFLoadedSection_FixupCount + !
			header@ LOFFSectionHeader_FixupTableOffset + @ base@ + section@ LOFFLoadedSection_FixupTable + !

			auto offset
			header@ LOFFSectionHeader_SectionOffset + @ offset!

			astart@ sz@ offset@ ino@ AFSRead ok! // read the section into memory

			if (ok@ sz@ ~=)
				-1 ok!
				"short section or error\n" Printf
				return
			end

			0 ok!
		end
	end
end