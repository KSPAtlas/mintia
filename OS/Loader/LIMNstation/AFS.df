#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "Loader.h"

var AFSDevice 0
public AFSDevice

fn AFSReadBlock { buf block -- }
	auto ok

	if (AFSDevice@ ~~)
		"AFSReadBlock with no device selected\n" LoaderPanic
	end

	AFSDevice@ a3xDeviceSelectNode
		buf@ block@ "readBlock" a3xDCallMethod drop drop drop ok!
	a3xDeviceExit

	if (ok@ 1 ~=)
		buf@ block@ ok@ "error %i reading block %d into buffer 0x%x\n" LoaderPanic
	end
end

var AFSFATBlock 0
var AFSFATBlockNum -1

var AFSINodeBlock 0
var AFSINodeBlockNum -1

var AFSDataBlock 0
var AFSDataBlockNum -1

var AFSSuperblockBuf 0

var AFSRootINode 0

var AFSBootResourcesINode 0
var AFSBootDriversINode 0

var AFSInited 0

const AFSSuperblockMagic 0xAFBBAFBB
const AFSSuperblockVersion 0x6

const AFSBLOCKSIZE 4096
const AFSBLOCKOFFMASK (AFSBLOCKSIZE 1 -)
const AFSBLOCKNUMBERMASK (AFSBLOCKOFFMASK ~)
const AFSBLOCKSHIFT 12

fn AFSInit { -- }
	AFSBLOCKSIZE Malloc AFSFATBlock!
	if (AFSFATBlock@ ERR ==)
		"couldn't allocate fat block buffer\n" LoaderPanic
	end

	AFSBLOCKSIZE Malloc AFSINodeBlock!
	if (AFSINodeBlock@ ERR ==)
		AFSFATBlock@ Free
		"couldn't allocate inode block buffer\n" LoaderPanic
	end

	AFSBLOCKSIZE Malloc AFSDataBlock!
	if (AFSDataBlock@ ERR ==)
		AFSFATBlock@ Free
		AFSINodeBlock@ Free
		"couldn't allocate data block buffer\n" LoaderPanic
	end

	AFSSuperblock_SIZEOF Malloc AFSSuperblockBuf!
	if (AFSSuperblockBuf@ ERR ==)
		AFSFATBlock@ Free
		AFSINodeBlock@ Free
		AFSDataBlock@ Free
		"couldn't allocate superblock buffer\n" LoaderPanic
	end

	AFSINode_SIZEOF Malloc AFSRootINode!
	if (AFSRootINode@ ERR ==)
		AFSFATBlock@ Free
		AFSINodeBlock@ Free
		AFSDataBlock@ Free
		AFSSuperblockBuf@ Free
		"couldn't allocate root inode\n" LoaderPanic
	end

	1 AFSInited!
end

fn AFSExit { -- }
	if (AFSInited@ ~~)
		return
	end

	AFSFATBlock@ Free
	AFSINodeBlock@ Free
	AFSDataBlock@ Free
	AFSSuperblockBuf@ Free
	AFSRootINode@ Free

	if (AFSBootResourcesINode@ -1 ~=)
		AFSBootResourcesINode@ Free
	end

	if (AFSBootDriversINode@ -1 ~=)
		AFSBootDriversINode@ Free
	end
end

fn AFSReadDataBlock { block -- }
	if (block@ -1 ==)
		"tried to read data block -1\n" LoaderPanic
	end

	if (block@ AFSDataBlockNum@ ==)
		return
	end

	AFSDataBlock@ block@ AFSReadBlock
	block@ AFSDataBlockNum!
end

fn AFSReadFATBlock { block -- }
	if (block@ -1 ==)
		"tried to read fat block -1\n" LoaderPanic
	end

	if (block@ AFSFATBlockNum@ ==)
		return
	end

	AFSFATBlock@ block@ AFSSuperblockBuf@ AFSSuperblock_FATStart + @ + AFSReadBlock
	block@ AFSFATBlockNum!
end

fn AFSReadINodeBlock { block -- }
	if (block@ -1 ==)
		"tried to read fat block -1\n" LoaderPanic
	end

	if (block@ AFSINodeBlockNum@ ==)
		return
	end

	AFSINodeBlock@ block@ AFSSuperblockBuf@ AFSSuperblock_IStart + @ + AFSReadBlock
	block@ AFSINodeBlockNum!
end

fn AFSMount { dev -- ok }
	0 ok!

	if (dev@ AFSDevice@ ==)
		return
	end

	-1 AFSINodeBlockNum!
	-1 AFSFATBlockNum!
	-1 AFSDataBlockNum!

	dev@ AFSDevice!

	0 AFSReadDataBlock

	AFSSuperblockBuf@ AFSDataBlock@ AFSSuperblock_SIZEOF memcpy

	if (AFSSuperblockBuf@ AFSSuperblock_Magic + @ AFSSuperblockMagic ~=)
		ERR ok!
		0 AFSDevice!
		"invalid superblock\n" Printf
		return
	end

	if (AFSSuperblockBuf@ AFSSuperblock_Version + @ AFSSuperblockVersion ~=)
		ERR ok!
		0 AFSDevice!
		"bad version on superblock\n" Printf
		return
	end

	1 AFSRootINode@ AFSIGetStruct

	// cache some frequently used inodes
	"/mintia/BootResources" AFSPath AFSBootResourcesINode!
	"/mintia/BootDrivers" AFSPath AFSBootDriversINode!
end

fn AFSIGet { inum -- ino }
	AFSINode_SIZEOF Malloc ino!

	if (ino@ ERR ==)
		"couldn't allocate inode struct\n" LoaderPanic
	end

	inum@ ino@ AFSIGetStruct
end

fn AFSIGetStruct { inum ino -- }
	auto iblk
	inum@ AFSINode_SIZEOF * AFSBLOCKSIZE / iblk!

	iblk@ AFSReadINodeBlock

	auto inop
	AFSINodeBlock@ inum@ AFSINode_SIZEOF * AFSBLOCKSIZE % + inop!

	ino@ inop@ AFSINode_SIZEOF memcpy
end

fn AFSRead { buf len seek ino -- bytes }
	if (seek@ ino@ AFSINode_Size + @ >=)
		0 bytes!
		return
	end

	if (seek@ len@ + ino@ AFSINode_Size + @ >)
		ino@ AFSINode_Size + @ seek@ - len!
	end

	auto tot
	0 tot!

	auto bnum
	seek@ ino@ AFSFATSeek bnum!

	if (seek@ AFSBLOCKOFFMASK &)
		bnum@ AFSReadDataBlock
		bnum@ AFSBlockStatus bnum!
	end

	while (tot@ len@ <)
		if (seek@ AFSBLOCKOFFMASK & 0 ==)
			bnum@ AFSReadDataBlock
			bnum@ AFSBlockStatus bnum!
		end

		auto m
		len@ tot@ -
		AFSBLOCKSIZE seek@ AFSBLOCKSIZE % -
		min m!

		buf@
		AFSDataBlock@ seek@ AFSBLOCKSIZE % +
		m@ memcpy

		m@ buf +=
		m@ seek +=
		m@ tot +=
	end

	len@ bytes!
end

fn AFSFreeINode { ino -- }
	if (ino@ AFSRootINode@ ==)
		return
	end elseif (ino@ AFSBootResourcesINode@ ==)
		return
	end elseif (ino@ AFSBootDriversINode@ ==)
		return
	end

	ino@ Free
end

fn AFSPath { path -- ino }
	AFSRootINode@ ino!

	if (path@ "/mintia/BootDrivers/" 20 strncmp)
		AFSBootDriversINode@ ino!
		20 path +=
	end elseif (path@ "/mintia/BootResources/" 22 strncmp)
		AFSBootResourcesINode@ ino!
		22 path +=
	end

	if (ino@ -1 ==)
		return
	end

	auto pcomp
	256 alloc pcomp!

	auto dirent
	AFSDirEnt_SIZEOF alloc dirent!

	auto bytes

	while (1)
		while (path@ gb '/' ==)
			1 path +=
		end

		if (path@ gb 0 ==)
			break
		end

		0 bytes!

		while (1)
			if (path@ gb '/' == path@ gb 0 == ||)
				break
			end

			if (bytes@ 255 <)
				path@ gb pcomp@ bytes@ + sb
				1 bytes +=
			end

			1 path +=
		end

		0 pcomp@ bytes@ + sb

		if (pcomp@ "." strcmp)
			continue
		end

		auto seek
		0 seek!

		while (1)
			dirent@ AFSDirEnt_SIZEOF seek@ ino@ AFSRead bytes!

			if (bytes@ AFSDirEnt_SIZEOF ~=)
				ino@ AFSFreeINode
				-1 ino!
				break
			end

			if (dirent@ AFSDirEnt_INum + @)
				if (dirent@ AFSDirEnt_Name + pcomp@ strcmp)
					ino@ AFSFreeINode
					dirent@ AFSDirEnt_INum + @ AFSIGet ino!
					break
				end
			end

			AFSDirEnt_SIZEOF seek +=
		end

		if (ino@ -1 ==)
			break
		end
	end
end

fn AFSINodeSize { ino -- sz }
	ino@ AFSINode_Size + @ sz!
end

fn AFSFATSeek { seek ino -- bnum }
	auto seeks
	seek@ AFSBLOCKSIZE / seeks!

	ino@ AFSINode_StartBlock + @ bnum!

	while (seeks@)
		bnum@ AFSBlockStatus bnum!

		1 seeks -=
	end
end

fn AFSBlockStatus { bnum -- status }
	auto fatblock
	auto fatoff

	bnum@ AFSBLOCKSIZE / fatblock!
	bnum@ AFSBLOCKSIZE % fatoff!

	fatblock@ AFSReadFATBlock
	fatoff@ 4 * AFSFATBlock@ + @ status!
end