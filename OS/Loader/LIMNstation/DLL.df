#include "<df>/dragonfruit.h"
#include "Loader.h"

var DLLForceRelink 0
public DLLForceRelink

var DLLListHead 0
public DLLListHead

var DLLListTail 0

buffer DLLPathBuffer 128

fn DLLLoadPrefix { prefix name -- dll ok }
	name@ DLLByName dll!

	if (dll@)
		0 ok!
		return
	end

	DLL_SIZEOF Calloc dll!

	IDENTITYSPACE dll |=

	dll@ DLL_Name + name@ strcpy

	auto path

	auto wp

	if (prefix@ ~~)
		if (name@ "HAL.dll" strcmp) // if we're loading the HAL,
			// use the actual chosen HAL name, not the special import name for it
			LoaderHALName@ name!
		end

		if (name@ gb '/' ==)
			name@ path!
		end else
			DLLPathBuffer path!

			"/mintia/" prefix!

			path@ prefix@ strcpy
			path@ prefix@ strlen + name@ strcpy
		end
	end else
		while (name@ gb '/' ==)
			1 name +=
		end

		if (name@ gb ~~)
			IDENTITYSPACEMASK dll &=
			dll@ Free
			-1 ok!
			return
		end

		DLLPathBuffer path!
		path@ "/mintia/" strcpy

		path@ strlen wp!

		path@ wp@ + prefix@ strcpy

		prefix@ strlen wp +=

		path@ wp@ + name@ strcpy
	end

	auto loff
	dll@ DLL_LOFF + loff!

	path@ loff@ LOFFLoad ok!

	if (ok@ 0 ~=)
		IDENTITYSPACEMASK dll &=
		dll@ Free
		-1 ok!
		return
	end

	if (DLLForceRelink@)
		1 loff@ LOFFLoaded_Rebased + !
	end

	if (loff@ LOFFLoaded_Entrypoint + @ 0xFFFFFFFF ~=)
		if (LoaderEntrypoint@)
			"conflicting entry points\n" LoaderPanic
		end

		loff@ LOFFLoaded_Entrypoint + @ LoaderEntrypoint!

		LoaderEntrypoint@ name@ "entrypoint = %s!0x%x\n" Printf
	end

	if (DLLListTail@)
		dll@ DLLListTail@ DLL_Next + !
	end

	if (DLLListHead@ ~~)
		dll@ DLLListHead!
	end

	dll@ DLLListTail!

	dll@ DLLDoImports ok!

	if (ok@ 0 ~=)
		IDENTITYSPACEMASK dll &=
		dll@ Free
		-1 ok!
		return
	end
end

fn DLLLoad { name -- dll ok }
	0 name@ DLLLoadPrefix ok! dll!
end

fn DLLDoImports { dll -- ok }
	auto loff
	dll@ DLL_LOFF + loff!

	auto count
	loff@ LOFFLoaded_ImportCount + @ count!

	auto i
	0 i!

	auto ptr
	loff@ LOFFLoaded_ImportTable + @ ptr!

	while (i@ count@ <)
		auto dllp

		loff@ ptr@ LOFFImport_Name + @ LOFFGetString DLLLoad ok! dllp!

		if (ok@ 0 ~=)
			dll@ DLL_Name + IDENTITYSPACEMASK &
			loff@ ptr@ LOFFImport_Name + @ LOFFGetString IDENTITYSPACEMASK &
			"couldn't load %s, needed by %s\n" Printf
			-1 ok!
			return
		end

		auto loffp
		dllp@ DLL_LOFF + loffp!

		if (loffp@ LOFFLoaded_Timestamp + @ ptr@ LOFFImport_Timestamp + @ ~=)
			1 loff@ LOFFLoaded_Rebased + !
		end elseif (loffp@ LOFFLoaded_TextRealAddr + @ ptr@ LOFFImport_ExpectedText + @ ~=)
			1 loff@ LOFFLoaded_Rebased + !
		end elseif (loffp@ LOFFLoaded_DataRealAddr + @ ptr@ LOFFImport_ExpectedData + @ ~=)
			1 loff@ LOFFLoaded_Rebased + !
		end elseif (loffp@ LOFFLoaded_BSSRealAddr + @ ptr@ LOFFImport_ExpectedBSS + @ ~=)
			1 loff@ LOFFLoaded_Rebased + !
		end

		dllp@ ptr@ LOFFImport_Name + !

		1 i +=
		LOFFImport_SIZEOF ptr +=
	end

	0 ok!
end

fn DLLByName { name -- dll }
	DLLListHead@ dll!

	while (dll@)
		if (dll@ DLL_Name + name@ strcmp)
			return
		end

		dll@ DLL_Next + @ dll!
	end
end

fn DLLGetSymbol { dll name -- symbol }
	auto ptr
	dll@ DLL_LOFF + LOFFLoaded_SymbolTable + @ ptr!

	auto i
	0 i!

	auto count
	dll@ DLL_LOFF + LOFFLoaded_SymbolCount + @ count!

	0 symbol!

	while (i@ count@ <)
		if (ptr@ LOFFSymbol_Type + @ LOFFGLOBAL ==)
			auto sname
			dll@ DLL_LOFF + ptr@ LOFFSymbol_NameOffset + @ LOFFGetString sname!

			if (sname@ name@ strcmp)
				ptr@ symbol!
				return
			end
		end

		LOFFSymbol_SIZEOF ptr +=
		1 i +=
	end
end

fn DLLGetSymbolAddress { dll name -- address }
	auto sym
	dll@ name@ DLLGetSymbol sym!

	0 address!

	if (sym@)
		auto section
		dll@ DLL_LOFF +
		LOFFLoaded_TextLinkedAddr +
		sym@ LOFFSymbol_Section + @ 1 -
		LOFFLoadedSection_SIZEOF * + section!

		sym@ LOFFSymbol_Value + @ section@ LOFFLoadedSection_RealAddr + @ + address!
	end
end

fn DLLResolve { dll -- ok }
	auto ptr
	dll@ DLL_LOFF + LOFFLoaded_SymbolTable + @ ptr!

	auto i
	0 i!

	auto count
	dll@ DLL_LOFF + LOFFLoaded_SymbolCount + @ count!

	auto importtab
	dll@ DLL_LOFF + LOFFLoaded_ImportTable + @ importtab!

	auto name

	while (i@ count@ <)
		if (ptr@ LOFFSymbol_Type + @ LOFFEXTERN ==)
			dll@ DLL_LOFF + ptr@ LOFFSymbol_NameOffset + @ LOFFGetString name!

			auto import
			ptr@ LOFFSymbol_ImportIndex + @ import!

			auto wsym
			0 wsym!

			auto sdll

			if (import@) // we can be more targeted, this is faster
				importtab@ import@ 1 - LOFFImport_SIZEOF * + import!

				import@ LOFFImport_Name + @ sdll!

				sdll@ name@ DLLGetSymbolAddress wsym!
			end else // we have to search everybody, this is slower!
				DLLListHead@ sdll!

				while (sdll@)
					if (sdll@ dll@ ~=) // don't search myself, I'm the only place it can't be
						sdll@ name@ DLLGetSymbolAddress wsym!

						if (wsym@)
							break
						end
					end

					sdll@ DLL_Next + @ sdll!
				end
			end

			if (wsym@ ~~)
				if (import@)
					dll@ DLL_Name + IDENTITYSPACEMASK &
					sdll@ DLL_Name + IDENTITYSPACEMASK &
					name@ IDENTITYSPACEMASK &
					"symbol '%s' not found in %s, referenced by %s\n" Printf
				end else
					dll@ DLL_Name + IDENTITYSPACEMASK &
					name@ IDENTITYSPACEMASK &
					"symbol '%s' not found, referenced by %s\n" Printf
				end

				-1 ok!
				return
			end

			LOFFRESOLVED ptr@ LOFFSymbol_Type + !
			wsym@ ptr@ LOFFSymbol_Value + !
		end

		LOFFSymbol_SIZEOF ptr +=
		1 i +=
	end

	0 ok!
end

fn DLLResolveAll { -- ok }
	auto dll
	DLLListHead@ dll!

	while (dll@)
		if (dll@ DLL_LOFF + LOFFLoaded_Rebased + @)
			dll@ DLL_Name + IDENTITYSPACEMASK & "rebased %s\n" Printf

			dll@ DLLResolve ok!

			if (ok@ 0 ~=)
				return
			end
		end

		dll@ DLL_Next + @ dll!
	end

	0 ok!
end

const RELOC_LIMN2500_LONG 1
const RELOC_LIMN2500_ABSJ 2
const RELOC_LIMN2500_LA   3

fn DLLDoFixup { ptr value type -- }
	// w@@ ptr@ value@ type@ shift@ "s=%d t=%d v=%x p=%x: %x ->" Printf

	if (type@ RELOC_LIMN2500_LONG ==)
		value@ ptr@!
	end elseif (type@ RELOC_LIMN2500_ABSJ ==)
		ptr@@ 0x7 & value@ 2 >> 3 << | ptr@!
	end elseif (type@ RELOC_LIMN2500_LA ==)
		value@ 0xFFFF0000 & ptr@@ 0xFFFF & | ptr@!
		value@ 0xFFFF & 16 << ptr@ 4 + @ 0xFFFF & | ptr@ 4 + !
	end else
		type@ "unknown reloctype %d\n" LoaderPanic
	end

	// w@@ " %x\n" Printf
end

fn DLLSectionRelocate { dll section id -- ok }
	auto ptr
	section@ LOFFLoadedSection_FixupTable + @ ptr!

	auto symtab
	dll@ DLL_LOFF + LOFFLoaded_SymbolTable + @ symtab!

	auto i
	0 i!

	auto count
	section@ LOFFLoadedSection_FixupCount + @ count!

	auto loff
	dll@ DLL_LOFF + loff!

	auto base
	section@ LOFFLoadedSection_RealAddr + @ base!

	while (i@ count@ <)
		auto sym
		ptr@ LOFFFixup_SymbolIndex + @ LOFFSymbol_SIZEOF * symtab@ + sym!

		if (sym@ LOFFSymbol_Type + @ LOFFRESOLVED ==)
			ptr@ LOFFFixup_Offset + @ base@ +
			sym@ LOFFSymbol_Value + @
			ptr@ LOFFFixup_Type + @
			DLLDoFixup
		end else // this fixup refers to this code module
			if (sym@ LOFFSymbol_Section + @ id@ ~=)
				auto q
				loff@
				LOFFLoaded_TextLinkedAddr +
				sym@ LOFFSymbol_Section + @ 1 -
				LOFFLoadedSection_SIZEOF * + q!

				ptr@ LOFFFixup_Offset + @ base@ +
				sym@ LOFFSymbol_Value + @ q@ LOFFLoadedSection_RealAddr + @ +
				ptr@ LOFFFixup_Type + @
				DLLDoFixup
			end else
				ptr@ LOFFFixup_Offset + @ base@ +
				sym@ LOFFSymbol_Value + @ base@ +
				ptr@ LOFFFixup_Type + @
				DLLDoFixup
			end
		end

		LOFFFixup_SIZEOF ptr +=
		1 i +=
	end

	0 ok!
end

fn DLLRelocate { dll -- ok }
	auto loff
	dll@ DLL_LOFF + loff!

	dll@ loff@ LOFFLoaded_TextLinkedAddr + 1 DLLSectionRelocate ok!

	if (ok@ 0 ~=)
		return
	end

	dll@ loff@ LOFFLoaded_DataLinkedAddr + 2 DLLSectionRelocate ok!
end

fn DLLRelocateAll { -- ok }
	auto dll
	DLLListHead@ dll!

	while (dll@)
		if (dll@ DLL_LOFF + LOFFLoaded_Rebased + @)
			dll@ DLLRelocate ok!

			if (ok@ 0 ~=)
				return
			end
		end

		dll@ DLL_Next + @ dll!
	end

	0 ok!
end