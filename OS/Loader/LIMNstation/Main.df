#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "Loader.h"

var LoaderTotalRAM 0
public LoaderTotalRAM

var LoaderEntrypoint 0
public LoaderEntrypoint

var LoaderHALName 0
public LoaderHALName

var LoaderInterruptStackTop 0

extern StandaloneEntry { -- ret }

fn LoaderNVRAMGetVar { name -- value }
	"/nvram" a3xDeviceSelect
		name@ "getVar" a3xDCallMethod drop drop drop value!
	a3xDeviceExit
end

buffer LoaderInfoBlock LoaderInfo_SIZEOF
buffer LoaderInfoPlatformBlock LoaderInfoPlatform_SIZEOF

buffer LoaderBootDeviceName 64
public LoaderBootDeviceName

buffer HALNameBuffer 128

const DKSBuffer 0xF8020000

const INTERRUPTSTACKPAGES 2

fn Main { args -- ret }
	0 ret!

	LOADERMINOR LOADERMAJOR "\nM31Loader %d.%d - loader for andromeda on LIMNstation\n" Printf

	// clear BSS section

	pointerof _bss
	pointerof _bss_end pointerof _bss -
	0 memset

	args@ ArgsInit

	"-relink" ArgsCheck DLLForceRelink!

	auto dbg
	"DBG" ArgsValue dbg!

	// if a HAL has been specified, use that one 
	auto halp
	"HAL" ArgsValue halp!

	if (halp@ ~~)
		// nope, maybe in an NVRAM variable
		"andromeda,HAL" LoaderNVRAMGetVar halp!
	end

	if (halp@ ~~) // a HAL wasn't specified, use the default one for the platform
		"/platform" a3xDeviceSelect
			"model" a3xDGetProperty halp!
		a3xDeviceExit

		if (halp@ ~~)
			"/platform: node has no 'model' property!\n" LoaderPanic
		end

		HALNameBuffer "HAL" strcpy
		HALNameBuffer 3 + halp@ strcpy
		HALNameBuffer 3 + halp@ strlen + ".dll" strcpy

		HALNameBuffer LoaderHALName!
	end else
		halp@ LoaderHALName!
	end

	LoaderHALName@ "andromeda,HAL = %s\n" Printf

	"/memory" a3xDeviceSelect
		"totalRAM" a3xDGetProperty LoaderTotalRAM!

		auto desc
		-1 "nextDescriptor" a3xDCallMethod drop drop drop desc!

		auto freedesc
		0 freedesc!

		auto warned
		0 warned!

		while (desc@)
			auto dtype
			auto dsize

			desc@ "getDescriptorInfo" a3xDCallMethod drop dtype! dsize! drop

			if (dtype@ MEMORYFREE ==)
				if (freedesc@)
					if (warned@ ~~)
						"warning: noncontiguous RAM! this won't be usable by andromeda.\n" Printf

						1 warned!
					end

					// subtract this unusable RAM from the total

					dsize@ LoaderTotalRAM -=
				end else
					desc@ freedesc!
				end
			end

			desc@ "nextDescriptor" a3xDCallMethod drop drop drop desc!
		end
	a3xDeviceExit

	MemInit

	AFSInit

	if (a3xMyDevice@ AFSMount)
		"couldn't mount boot device\n" LoaderPanic
	end

	auto bootdevname
	"BOOT" ArgsValue bootdevname!

	if (bootdevname@)
		LoaderBootDeviceName bootdevname@ strcpy
	end else
		// try to auto-identify the name of the boot device

		a3xMyDevice@ a3xDeviceSelectNode
			if ("model" a3xDGetProperty "AISA,satsuma-disk" strcmp ~~)
				"warning: don't know how to auto-identify this boot device\n" Printf
			end

			LoaderBootDeviceName "dks" strcpy
			"satsuma,id" a3xDGetProperty LoaderBootDeviceName 3 + itoa

			if ("deviceType" a3xDGetProperty "disk-logical" strcmp)
				// we're booting from a partition, add partition identifier

				's' LoaderBootDeviceName 4 + sb
				"partition#" a3xDGetProperty LoaderBootDeviceName 5 + itoa
			end
		a3xDeviceExit
	end

	// if (LoaderBootDiskName gb)
	// 	LoaderBootDiskName "booting from /Devices/%s\n" Printf
	// end

	auto dll
	"OSKernel.exe" DLLLoad ret! dll!

	if (ret@ 0 ~=)
		"couldn't load OSKernel.exe\n" LoaderPanic
	end

	if (LoaderEntrypoint@ ~~)
		"no entrypoint found!\n" LoaderPanic
	end

	auto kemain
	dll@ "KeMain" DLLGetSymbolAddress kemain!

	if (kemain@ ~~)
		"KeMain not found!\n" LoaderPanic
	end

	if (dbg@)
		dbg@ DLLLoad ret! dll!

		if (ret@ 0 ~=)
			dbg@ "couldn't load %s\n" LoaderPanic
		end

		dll@ "DebugInit" DLLGetSymbolAddress dbg!

		if (dbg@ ~~)
			"DebugInit not found in debugger image!\n" LoaderPanic
		end
	end

	// load drivers

	"/platform/ebus" a3xDeviceSelect
		a3xDevIteratorInit LoaderIterateNode
	a3xDeviceExit

	DriverLoadAll drop

	// "binding...\n" Printf

	DLLResolveAll ret!

	if (ret@ 0 ~=)
		"couldn't bind\n" LoaderPanic
	end

	DLLRelocateAll ret!

	if (ret@ 0 ~=)
		"couldn't relocate\n" LoaderPanic
	end

	ResourceLoadAll ret!

	auto devaddr

	auto devnode
	"/screen" a3xDevTreeWalk devnode!

	if (devnode@)
		devnode@ a3xDeviceSelectNode
			auto format
			"model" a3xDGetProperty LoaderBootFBMatch format!

			if (format@)
				"vram" a3xDGetProperty devaddr!

				"vramSize" a3xDGetProperty 4095 + 12 >> devaddr@ MemMapIORange ret! devaddr!

				if (ret@ 0 ==)
					devaddr@ "boot framebuffer at 0x%08x\n" Printf

					"width"  a3xDGetProperty LoaderInfoBlock LoaderInfo_HALConsoleFBWidth + !
					"height" a3xDGetProperty LoaderInfoBlock LoaderInfo_HALConsoleFBHeight + !
					format@                  LoaderInfoBlock LoaderInfo_HALConsoleFBFormat + !
					devaddr@                 LoaderInfoBlock LoaderInfo_HALConsoleFBAddr + !
				end
			end
		a3xDeviceExit
	end

	"/bus/pboard/citron" a3xDevTreeWalk devnode!

	if (devnode@)
		devnode@ a3xDeviceSelectNode
			"address" a3xDGetProperty devaddr!

			1 devaddr@ MemMapIORange ret! devaddr!

			if (ret@ 0 ==)
				devaddr@ "citron at 0x%08x\n" Printf

				devaddr@ LoaderInfoPlatformBlock LoaderInfoPlatform_CitronBase + !
			end
		a3xDeviceExit
	end

	"/platform/lsic" a3xDevTreeWalk devnode!

	if (devnode@)
		devnode@ a3xDeviceSelectNode
			"address" a3xDGetProperty devaddr!

			1 devaddr@ MemMapIORange ret! devaddr!

			if (ret@ 0 ==)
				devaddr@ "LSIC at 0x%08x\n" Printf

				devaddr@ LoaderInfoPlatformBlock LoaderInfoPlatform_LSICBase + !
			end
		a3xDeviceExit
	end

	1 DKSBuffer MemMapIORange ret! devaddr!

	if (ret@ 0 ==)
		devaddr@ "DKS buffer at 0x%08x\n" Printf

		devaddr@ LoaderInfoPlatformBlock LoaderInfoPlatform_DKSBuffer + !
	end

	"/platform" a3xDeviceSelect
		"model" a3xDGetProperty IDENTITYSPACE | LoaderInfoPlatformBlock LoaderInfoPlatform_PlatformModel + !
	a3xDeviceExit

	"/bus" a3xDeviceSelect
		"model" a3xDGetProperty IDENTITYSPACE | LoaderInfoPlatformBlock LoaderInfoPlatform_BusModel + !

		"reset" a3xDCallMethod drop drop drop drop
	a3xDeviceExit

	"/cpu" a3xDeviceSelect
		"model" a3xDGetProperty IDENTITYSPACE | LoaderInfoPlatformBlock LoaderInfoPlatform_CPUModel + !
	a3xDeviceExit

	auto istack
	INTERRUPTSTACKPAGES KERNELSTRUCTURES 12 >> 0 MemAllocUpper ret! istack!

	if (ret@ 0 ~=)
		"couldn't allocate interrupt stack\n" LoaderPanic
	end

	12 istack <<=
	istack@ INTERRUPTSTACKPAGES 12 << + LoaderInterruptStackTop!

	LoaderInterruptStackTop@ INTERRUPTSTACKPAGES 12 << "interrupt stack is %d bytes at 0x%08x\n" Printf

	// construct LoaderInfoBlock which informs the kernel of decisions
	// that we have made

	LOADERMAJOR         LoaderInfoBlock LoaderInfo_Major + !
	LOADERMINOR         LoaderInfoBlock LoaderInfo_Minor + !

	MemBitmap           IDENTITYSPACE | LoaderInfoBlock LoaderInfo_InitMemBmp + !
	INITBITMAPSZ        LoaderInfoBlock LoaderInfo_InitMemBmpSz + !
	DLLListHead@        LoaderInfoBlock LoaderInfo_DLLListHead + !
	ResourceListHead@   LoaderInfoBlock LoaderInfo_ResourceListHead + !
	ArgsBuffer          IDENTITYSPACE | LoaderInfoBlock LoaderInfo_ArgsBuffer + !
	kemain@             LoaderInfoBlock LoaderInfo_KeMain + !
	LoaderTotalRAM@     LoaderInfoBlock LoaderInfo_TotalRAM + !
	istack@             LoaderInfoBlock LoaderInfo_InterruptStack + !
	INTERRUPTSTACKPAGES LoaderInfoBlock LoaderInfo_InterruptStackPages + !
	dbg@                LoaderInfoBlock LoaderInfo_DebugInit + !
	MemPageFrameDB@     LoaderInfoBlock LoaderInfo_PageFrameDB + !
	MemHeap@            LoaderInfoBlock LoaderInfo_Heap + !
	MemHeapSize@        LoaderInfoBlock LoaderInfo_HeapSize + !
	MemPageDirectory@   LoaderInfoBlock LoaderInfo_PageDirectory + !
	LoaderBootDeviceName IDENTITYSPACE | LoaderInfoBlock LoaderInfo_BootDeviceName + !

	HALNameBuffer       LoaderInfoPlatformBlock LoaderInfoPlatform_LowBuffer + !

	LoaderInfoPlatformBlock IDENTITYSPACE | LoaderInfoBlock LoaderInfo_PlatformInfo + !

	StandaloneEntry ret!

	ret@ LoaderExit
end

fn LoaderIterateNode { iter -- }
	while (iter@)
		iter@ a3xDevIterate iter!
			DriverLoadNode

			a3xDevIteratorInit LoaderIterateNode
		a3xDeviceExit
	end
end

fn LoaderBootFBMatch { name -- format }
	0 format!

	if (name@ "AISA,limngfx" strcmp)
		BOOTFBFORMAT_AB5G5R5 format!
	end elseif (name@ "AISA,kinnowfb" strcmp)
		BOOTFBFORMAT_AB5G5R5 format!
	end
end

asm "

SavedSP:
	.dl 0

StandaloneEntry:
	subi sp, sp, 4
	mov  long [sp], lr

	mov  t2, sp

	la   t0, SavedSP
	mov  long [t0], t2

	la   t0, LoaderInterruptStackTop
	mov  sp, long [t0]

	subi sp, sp, 8
	mov  long [sp], 0
	mov  long [sp + 4], 0

	la   t0, LoaderEntrypoint
	mov  t0, long [t0]

	la   t1, a3xMyDevice
	mov  a1, long [t1]

	la   t1, a3xCIPtr
	mov  a2, long [t1]

	la   a3, LoaderInfoBlock
	mov  long [a3 + LoaderInfo_ReturnSP], t2

	la   t1, IDENTITYSPACE
	or   a3, a3, t1

	jalr lr, t0, 0

	la   t0, SavedSP
	mov  sp, long [t0]

	mov  lr, long [sp]
	ret

"

fn LoaderExit { ret -- }
	MemExit

	AFSExit

	ret@ a3xReturn
end

fn LoaderPanic { ... fmt -- }
	"M31Loader: panic: " Printf

	argv argc@ fmt@ VPrintf

	-1 LoaderExit
end