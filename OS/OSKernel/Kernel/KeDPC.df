#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

var KeDPCListHead 0
public KeDPCListHead

var KeDPCListTail 0
public KeDPCListTail

fn KeDPCInitialize { function dpc -- ok }
	function@ dpc@ KeDPC_Function + !
	0 dpc@ KeDPC_Next + !
	0 dpc@ KeDPC_Context1 + !
	0 dpc@ KeDPC_Context2 + !

	0 ok!
end

fn KeDPCEnqueue { context1 context2 importance dpc -- }
	auto ipl
	IPLHIGH KeIPLRaise ipl!

	if (DEBUGCHECKS)
		if (dpc@ KeDPC_Enqueued + @)
			"KeDPCEnqueue: attempt to queue an enqueued DPC\n" KeCrash
		end

		if (dpc@ KeDPC_Function + @ ~~)
			"KeDPCEnqueue: attempt to queue a functionless DPC\n" KeCrash
		end
	end

	context1@ dpc@ KeDPC_Context1 + !
	context2@ dpc@ KeDPC_Context2 + !

	auto dpch
	KeDPCListHead@ dpch!

	if (dpch@)
		if (importance@ DPCHIGHIMPORTANCE ==) // put it in front
			dpc@ KeDPCListHead!
			dpch@ dpc@ KeDPC_Next + !
		end else // put it in the back
			KeDPCListTail@ dpch!

			0 dpc@ KeDPC_Next + !
			dpc@ dpch@ KeDPC_Next + !
			dpc@ KeDPCListTail!
		end
	end else
		0 dpc@ KeDPC_Next + !
		dpc@ KeDPCListHead!
		dpc@ KeDPCListTail!
	end

	1 dpc@ KeDPC_Enqueued + !

	ipl@ KeIPLLower
end

var KeDPCActive 0
public KeDPCActive

// must be called with interrupts disabled, at IPLDPC
fn KeDPCDispatchQueue { rs -- }
	if (KeDPCActive@)
		return
	end

	1 KeDPCActive!

	while (KeDPCListHead@)
		auto dpc
		KeDPCListHead@ dpc!

		0 KeDPCListHead!
		0 KeDPCListTail!

		while (dpc@)
			rs@ HALCPUInterruptRestore

			dpc@ KeDPC_Context1 + @ dpc@ KeDPC_Context2 + @ dpc@ KeDPC_Function + @ DPCFunction

			HALCPUInterruptDisable rs!

			0 dpc@ KeDPC_Enqueued + !

			auto ndpc
			dpc@ KeDPC_Next + @ ndpc!
			0 dpc@ KeDPC_Next + !
			ndpc@ dpc!
		end
	end

	0 KeDPCActive!
end