#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<inc>/HALInterrupt.h"

// XXX this global will NOT work out well if we ever go multiprocessor.
// though, neither will most things that we're doing.
var KeIPLCurrent IPLHIGH
public KeIPLCurrent

fn KeIPLCurrentGet { -- ipl }
	KeIPLCurrent@ ipl!
end

fn KeIPLRaise { newipl -- oldipl }
	KeIPLCurrent@ oldipl!

	if (newipl@ oldipl@ ==)
		return
	end

	if (newipl@ oldipl@ <)
		[newipl@]HALIPLNames@ [oldipl@]HALIPLNames@ "IPL not greater or equal (old=%s new=%s)\n" KeCrash
	end

	// only call into the HAL if hardware interrupt level changed.
	// no need to call in for software interrupt levels IPLLOW-IPLDPC.

	// XXX I don't know if I really need to disable interrupts for these two
	// cases.

	auto rs

	if (newipl@ IPLDPC >)
		HALCPUInterruptDisable rs!
		newipl@ KeIPLCurrent!
		newipl@ HALPlatformIPLSet
		rs@ HALCPUInterruptRestore
	end elseif (oldipl@ IPLDPC >)
		HALCPUInterruptDisable rs!
		newipl@ KeIPLCurrent!
		newipl@ HALPlatformIPLSet
		rs@ HALCPUInterruptRestore
	end else
		newipl@ KeIPLCurrent!
	end
end

fn KeIPLLower { newipl -- }
	auto oldipl
	KeIPLCurrent@ oldipl!

	if (newipl@ oldipl@ ==)
		return
	end

	if (newipl@ oldipl@ >)
		[newipl@]HALIPLNames@ [oldipl@]HALIPLNames@ "IPL not less or equal (old=%s new=%s)\n" KeCrash
	end

	auto rs

	if (newipl@ IPLDPC >=)
		HALCPUInterruptDisable rs!
		newipl@ KeIPLCurrent!
		newipl@ HALPlatformIPLSet
		rs@ HALCPUInterruptRestore

		return
	end

	if (oldipl@ IPLAPC >)
		// the new IPL isn't >=IPLDPC, and the old IPL was >IPLAPC.
		// this means that we've dropped below IPLDPC and may have some DPCs
		// to process.

		// only call into the HAL if hardware interrupt level changed.
		// no need to call in for software interrupt levels IPLLOW-IPLDPC.

		if (oldipl@ IPLDPC >)
			HALCPUInterruptDisable rs!
			IPLDPC KeIPLCurrent!
			IPLDPC HALPlatformIPLSet
			rs@ HALCPUInterruptRestore
		end else
			IPLDPC KeIPLCurrent!
		end

		IPLDPC oldipl!

		HALCPUInterruptDisable rs!

		if (KeDPCListHead@)
			rs@ KeDPCDispatchQueue

			rs@ HALCPUInterruptRestore

			if (KeThreadNext@)
				KeThreadNextSwitch
			end
		end else
			rs@ HALCPUInterruptRestore
		end
	end

	if (newipl@ IPLAPC ==)
		IPLAPC KeIPLCurrent!

		return
	end

	// we're dropping below IPLAPC. deal with processing APCs.

	if (KeThreadCurrent@)
		if (KeThreadCurrent@ KeThread_APCEnqueued + @)
			0 KERNELMODE KeAPCDispatchQueue
		end 
	end

	newipl@ KeIPLCurrent!
end

externptr HALInterruptStackTop

var KeInterruptNested 0

fn KeInterrupt { ipl int handler -- }
	auto oldipl

	// inline these things instead of calling KeIPLRaise because we have
	// special knowledge here that lets us be faster.

	KeIPLCurrent@ oldipl!
	ipl@ KeIPLCurrent!
	ipl@ HALPlatformIPLSet

	if (KeInterruptNested@ ~~)
		1 KeInterruptNested!

		int@ handler@ HALInterruptStackTop@ HALCPURunInContext

		// XXX this assignment used to be below the HALCPUInterruptDisable
		// call. I'm not 100% sure why, but it was broken. This MAY also be
		// broken, in a different way. So watch out for that.
		0 KeInterruptNested!

		HALCPUInterruptEnable

		oldipl@ KeIPLLower

		HALCPUInterruptDisable drop
	end else
		HALCPUInterruptEnable

		int@ handler@ HALInterruptHandler

		HALCPUInterruptDisable drop

		// inline what KeIPLLower would do here...

		oldipl@ KeIPLCurrent!
		oldipl@ HALPlatformIPLSet
	end
end

externptr HALInterruptFunction

fn KeInterruptInit { -- }
	pointerof KeInterrupt HALInterruptFunction!
end