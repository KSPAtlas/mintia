#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALRTC.h"

#include "<inc>/Kernel.h"

#include "<ll>/OSDLL/OSStatus.h"

fn KeEventInitialize { signaled type name event -- ok }
	0 ok!

	if (type@ KEEVENT_SYNCH ==)
		DISPATCHOBJECT_EVENTSYNCH type!		
	end elseif (type@ KEEVENT_NOTIF ==)
		DISPATCHOBJECT_EVENTNOTIF type!
	end else
		"KeEventInitialize: what\n" KeCrash
	end

	name@ type@ event@ KeDispatchInitialize ok!

	if (ok@)
		return
	end

	signaled@ event@ KeDispatchHeader_Signaled + !
end

fn KeEventReset { event -- signaled }
	// XXX do interrupts actually have to be disabled here or am I being paranoid

	auto rs
	HALCPUInterruptDisable rs!

	event@ KeDispatchHeader_Signaled + @ signaled!

	0 event@ KeDispatchHeader_Signaled + !

	rs@ HALCPUInterruptRestore
end

fn KeEventSignal { priboost event -- ok }
	0 ok!

	if (event@ KeDispatchHeader_Type + @ DISPATCHOBJECT_EVENTNOTIF ==)
		0 // waitstatus
		priboost@ // priboost
		event@ // object
		KeDispatchSatisfyAll ok! drop
	end elseif (event@ KeDispatchHeader_Type + @ DISPATCHOBJECT_EVENTSYNCH ==)
		auto wth

		0 // waitstatus
		priboost@ // priboost
		event@ // object
		1 // signal
		KeDispatchSatisfyFirst ok! wth!
	end else
		"KeEventSignal: what\n" KeCrash
	end
end