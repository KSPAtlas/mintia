#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/HALDebug.h"

extern KeInterruptInit { -- }

extern MemInit { -- }

extern KeTimerInit { -- }

extern KeProcessInit { -- }

extern KeThreadInit { -- }

buffer KeProcessKernelThreadMain KeThread_SIZEOF

buffer KeProcessKernelThreadMainStack KETHREADSTACKSIZE

fn KeMain { -- ret }
	// early init that takes place before there's a process context
	// this function is called at IPLHIGH. lower IPL to start interrupts going.
	IPLDPC KeIPLLower

	KeInterruptInit

	KeTimerInit

	KeProcessInit

	KeThreadInit

	0 // context1
	0 // context2
	pointerof KeMainInThreadContext // startfunc
	KeProcessKernelProcess // process
	KeProcessKernelThreadMainStack // kstack
	"main" // name
	KeProcessKernelThreadMain // thread
	KeThreadInitialize ret!

	if (ret@)
		ret@ "KeMain: couldn't initialize kernel main thread (%i)\n" KeCrash
	end

	KeThreadNextPick KeThreadSwitch

	0 ret!
end

fn KeIdleThread { -- }
	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	// the idle thread is never ever not ready to run.
	// if it ever stops being ready to run, the system will crash.

	// set main thread ready
	QUEUEBACK KeProcessKernelThreadMain KeThreadReady

	while (1)
		HALCPUHalt
	end
end

fn KeMainInThreadContext { -- }
	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	"Hello Andromeda World!\n" "KeMain" HALLog

	// initialize the executive layer

	ExInit

	while (1)
		1000 KERNELMODE 0 KeThreadSleep drop

		"hi " Printf
	end
end