#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Object.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

fn ObObjectClose { handle -- ok }
	handle@
	KeProcessCurrent
	ObObjectCloseProcess ok!
end

fn ObObjectCloseProcess { handle process -- ok }
	auto handletable
	process@ PsProcess_HandleTable + @ handletable!

	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLLOW ~=)
			"ObObjectCloseProcess: ipl != IPLLOW\n" KeCrash
		end

		if (handletable@ ~~)
			"ObObjectCloseProcess: process has no handle table\n" KeCrash
		end
	end

	auto object
	auto entryptr

	handletable@ ExHandleTableLock ok!

	if (ok@)
		return
	end

	handle@ // handle
	handletable@ // handletable
	1 // locked
	ExHandleDelete ok! object! entryptr!

	if (ok@)
		return
	end

	if (DEBUGCHECKS)
		if (object@ ~~)
			"ObObjectCloseProcess: object was null\n" KeCrash
		end
	end

	auto access
	entryptr@ ObObjectTableEntry_Access + @ access!

	handletable@ ExHandleTableUnlock

	auto obh
	object@ ObHeader_SIZEOF - obh!

	obh@ ObHeader_QuotaCharge + @
	process@ MmQuotaUnchargeProcess

	object@ ObObjectHandleCountDecrement drop

	auto type
	obh@ ObHeader_TypeObject + @ type!

	if (type@)
		auto closefunc
		type@ ObType_CloseFunction + @ closefunc!

		if (closefunc@)
			access@ // access
			object@ // object
			process@ // process
			closefunc@ ObTypeCloseFunction
		end
	end

	object@ ObObjectDereferenceByPointer drop
end

fn ObObjectOpen { nocheck access object -- handle ok }
	nocheck@ // nocheck
	access@ // access
	object@ // object
	KeProcessCurrent // process
	ObObjectOpenProcess ok! handle!
end

fn ObObjectOpenProcess { nocheck access object process -- handle ok }
	auto handletable
	process@ PsProcess_HandleTable + @ handletable!

	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLLOW ~=)
			"ObObjectOpenProcess: ipl != IPLLOW\n" KeCrash
		end

		if (handletable@ ~~)
			"ObObjectOpenProcess: process has no handle table\n" KeCrash
		end
	end

	auto obh
	object@ ObHeader_SIZEOF - obh!

	handletable@ ExHandleTableLock ok!

	if (ok@)
		return
	end

	if (nocheck@ ~~)
		access@ // access
		object@ // object
		SeUserCurrentGet // user
		SeCheckAccessObjectUser ok!

		if (ok@)
			handletable@ ExHandleTableUnlock

			return
		end
	end

	obh@ ObHeader_QuotaCharge + @
	process@ MmQuotaChargeProcess ok!

	if (ok@)
		handletable@ ExHandleTableUnlock

		return
	end

	auto entryptr

	object@ // entryvalue
	handletable@ // handletable
	1 // locked
	ExHandleCreate ok! entryptr! handle!

	if (ok@)
		obh@ ObHeader_QuotaCharge + @
		process@ MmQuotaUnchargeProcess

		handletable@ ExHandleTableUnlock

		return
	end

	access@ entryptr@ ObObjectTableEntry_Access + !

	auto type
	obh@ ObHeader_TypeObject + @ type!

	if (type@)
		auto openfunc
		type@ ObType_OpenFunction + @ openfunc!

		if (openfunc@)
			access@ // access
			object@ // object
			process@ // process
			openfunc@ ObTypeOpenFunction ok!

			if (ok@)
				handle@ // handle
				handletable@ // handletable
				1 // locked
				ExHandleDelete access! drop drop

				if (DEBUGCHECKS)
					if (access@)
						"ObObjectOpenProcess: failed to delete handle\n" KeCrash
					end
				end

				obh@ ObHeader_QuotaCharge + @
				process@ MmQuotaUnchargeProcess

				handletable@ ExHandleTableUnlock

				return
			end
		end
	end

	object@ ObObjectHandleCountIncrement drop

	handletable@ ExHandleTableUnlock
end

fn ObObjectReferenceByHandle { type handle -- access object ok }
	type@
	handle@
	KeProcessCurrent
	ObObjectReferenceByHandleProcess ok! object! access!
end

fn ObObjectReferenceByHandleProcess { type handle process -- access object ok }
	auto handletable
	process@ PsProcess_HandleTable + @ handletable!

	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLLOW ~=)
			"ObObjectReferenceByHandleProcess: ipl != IPLLOW\n" KeCrash
		end

		if (handletable@ ~~)
			"ObObjectReferenceByHandleProcess: process has no handle table\n" KeCrash
		end
	end

	handletable@ ExHandleTableLock ok!

	if (ok@)
		return
	end

	auto entryptr

	handle@ // handle
	handletable@ // handletable
	1 // locked
	ExHandleLookup ok! entryptr!

	if (ok@)
		handletable@ ExHandleTableUnlock

		return
	end

	entryptr@ ObObjectTableEntry_Object + @ object!
	entryptr@ ObObjectTableEntry_Access + @ access!

	auto obh
	object@ ObHeader_SIZEOF - obh!

	if (type@)
		if (obh@ ObHeader_TypeObject + @ type@ ~=)
			handletable@ ExHandleTableUnlock

			STATUS_INVALID_OBJECT_TYPE ok!

			return
		end
	end

	object@ ObObjectReferenceByPointer drop

	handletable@ ExHandleTableUnlock
end

fn ObObjectHandleCountIncrement { object -- oldcount }
	ObHeader_SIZEOF object -=

	auto rs
	HALCPUInterruptDisable rs!

	object@ ObHeader_HandleCount + @ oldcount!

	oldcount@ 1 + object@ ObHeader_HandleCount + !

	rs@ HALCPUInterruptRestore
end

fn ObObjectHandleCountDecrement { object -- oldcount }
	ObHeader_SIZEOF object -=

	auto rs
	HALCPUInterruptDisable rs!

	object@ ObHeader_HandleCount + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ 0 ==)
			"ObObjectHandleCountDecrement: attempt to decrement below 0\n" KeCrash
		end

		// if (oldcount@ object@ ObHeader_PointerCount + @ ==)
		// 	"ObObjectHandleCountDecrement: attempt to decrement below pointer count\n" KeCrash
		// end
	end

	oldcount@ 1 - object@ ObHeader_HandleCount + !

	rs@ HALCPUInterruptRestore

	if (oldcount@ 1 ==)
		ObRootDirectoryLockUnalertable

		// locking the root directory successfully serializes this case because
		// it is also acquired during any attempt to open an object via namespace path,
		// which is the ONLY time (other than object creation, handle inheritance, and handle duplication)
		// that the handle count is incremented.

		// XXX does it successfully serialize this case? seems a bit race-y but I can't tell for sure.
		// if there is a race condition then the result is corruption of the directory structure;
		// directories can contain objects which have a handle count of 0 (and therefore may have been deallocated...)

		// test the handle count again to make sure it's still 0.

		if (object@ ObHeader_HandleCount + @ 0 ==)
			if (object@ ObHeader_DirectoryObject + @)
				if (object@ ObHeader_Flags + @ OBFLAGS_PERMANENT & ~~)
					1 // locked
					object@ // object
					ObDirectoryRemoveByPointer drop
				end
			end
		end

		ObRootDirectoryUnlock
	end
end

fn ObObjectReferenceByPointer { object -- oldcount }
	ObHeader_SIZEOF object -=

	auto rs
	HALCPUInterruptDisable rs!

	object@ ObHeader_PointerCount + @ oldcount!

	oldcount@ 1 + object@ ObHeader_PointerCount + !

	rs@ HALCPUInterruptRestore
end

fn ObObjectDereferenceByPointer { object -- oldcount }
	ObHeader_SIZEOF object -=

	auto rs
	HALCPUInterruptDisable rs!

	object@ ObHeader_PointerCount + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ 0 ==)
			"ObObjectDereferenceByPointer: underflow\n" KeCrash
		end

		// if (oldcount@ 1 - object@ ObHeader_HandleCount + @ <)
		// 	"ObObjectDereferenceByPointer: pointer count < handle count\n" KeCrash
		// end
	end

	oldcount@ 1 - object@ ObHeader_PointerCount + !

	rs@ HALCPUInterruptRestore

	auto ok

	if (oldcount@ 1 ==)
		// just decremented the pointer count to zero. delete the object

		if (DEBUGCHECKS)
			if (object@ ObHeader_DirectoryObject + @)
				"ObObjectDereferenceByPointer: object was still linked into a directory\n" KeCrash
			end
		end

		if (KeIPLCurrentGet IPLLOW ==)
			// delete immediately

			// make sure to ignore weird wait effects etc due to having been nuked.
			// these are undesirable while doing something like cleaning up a dead object
			KeThreadCurrent@ KeThreadIgnoreKill drop

			object@ ObHeader_SIZEOF + ObObjectFree ok!

			if (DEBUGCHECKS)
				if (ok@)
					"ObObjectDereferenceByPointer: failed to free object\n" KeCrash
				end
			end

			KeThreadCurrent@ KeThreadAcceptKill drop
		end else
			// can't delete objects at >=IPLAPC, queue a work item

			"ObObjectDereferenceByPointer: work items NYI\n" KeCrash
		end
	end
end

fn ObObjectQueryObject { object query -- ok }
	0 ok!

	ObHeader_SIZEOF object -=

	auto typeobj
	object@ ObHeader_TypeObject + @ typeobj!

	auto name
	0 name!

	if (typeobj@)
		typeobj@ ObHeader_SIZEOF - ObHeader_Name + @ name!
	end

	if (name@)
		query@ OSObjectQuery_TypeName + // dest
		name@ // src
		strcpy
 	end else
		0 query@ OSObjectQuery_TypeName + sb
	end

	object@ ObHeader_Name + @ name!

	if (name@)
		query@ OSObjectQuery_Name + // dest
		name@ // src
		strcpy
	end else
		0 query@ OSObjectQuery_Name + sb
	end

	object@ ObHeader_HandleCount + @ query@ OSObjectQuery_HandleCount + !
	object@ ObHeader_PointerCount + @ query@ OSObjectQuery_PointerCount + !

	object@ ObHeader_Permissions + @ query@ OSObjectQuery_Permissions + !

	auto owninguser
	object@ ObHeader_OwningUser + @ owninguser!

	if (DEBUGCHECKS)
		if (owninguser@ ~~)
			"OSObjectQueryObject: object had no owninguser\n" KeCrash
		end
	end

	owninguser@ SeUser_UID + @ query@ OSObjectQuery_UID + !
	owninguser@ SeUser_GID + @ query@ OSObjectQuery_GID + !
end

fn ObObjectQuery { objecthandle query -- ok }
	auto object

	0 // type
	objecthandle@ // handle
	ObObjectReferenceByHandle ok! object! drop

	if (ok@)
		return
	end

	object@ // object
	query@ // query
	ObObjectQueryObject ok!

	object@ ObObjectDereferenceByPointer drop
end