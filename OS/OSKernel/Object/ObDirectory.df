#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

fn ObRootDirectoryLockUnalertable { -- }
	auto ok

	KERNELMODE // waitmode
	0 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	ObRootMutex // object
	KeThreadWaitForObject ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "ObRootDirectoryLockUnalertable: lock was unalertable but failed (%i)\n" KeCrash
		end
	end
end

fn ObRootDirectoryLock { -- ok }
	KERNELMODE // waitmode
	1 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	ObRootMutex // object
	KeThreadWaitForObject ok!
end

fn ObRootDirectoryUnlock { -- }
	ObRootMutex KeMutexRelease drop
end

fn ObDirectoryCreate { permissions name -- dirhandle ok }
	permissions@ name@ 0 ObDirectoryCreateFlags ok! dirhandle!
end

fn ObDirectoryCreatePermanent { permissions name -- dirhandle ok }
	permissions@ name@ OBFLAGS_PERMANENT ObDirectoryCreateFlags ok! dirhandle!
end

fn ObDirectoryCreateFlags { permissions name flags -- dirhandle ok }
	auto dir

	name@ // name
	flags@ // flags
	permissions@ // permissions
	SeUserCurrentGet // owninguser
	ObDirectory_SIZEOF // bodysize
	ObTypeDirectoryType@ // type
	ObObjectCreate ok! dir!

	if (ok@)
		return
	end

	0 dir@ ObDirectory_ObjectListHead + !

	ACCESS_ALL // permissions
	dir@ // object
	ObObjectOpen ok! dirhandle!

	if (ok@)
		dir@ ObObjectDeallocate

		return
	end
end

fn ObDirectoryInsert { objecthandle directoryhandle -- ok }
	auto dir
	auto obj
	auto access

	ObTypeDirectoryType@ // type
	directoryhandle@ // handle
	ObObjectReferenceByHandle ok! dir! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		dir@ ObObjectDereferenceByPointer drop

		return
	end

	0 // type (any)
	objecthandle@ // handle
	ObObjectReferenceByHandle ok! obj! access!

	if (ok@)
		dir@ ObObjectDereferenceByPointer drop

		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		dir@ ObObjectDereferenceByPointer drop
		obj@ ObObjectDereferenceByPointer drop

		return
	end

	obj@ ObHeader_SIZEOF - // object
	dir@ // directory
	ObDirectoryInsertByPointers ok!

	dir@ ObObjectDereferenceByPointer drop
	obj@ ObObjectDereferenceByPointer drop
end

fn ObDirectoryRemove { objecthandle -- ok }
	auto obj
	auto access

	0 // type (any)
	objecthandle@ // handle
	ObObjectReferenceByHandle ok! obj! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		obj@ ObObjectDereferenceByPointer drop

		return
	end

	0 // locked
	obj@ ObHeader_SIZEOF - // object
	ObDirectoryRemoveByPointer ok!

	obj@ ObObjectDereferenceByPointer drop
end

fn ObDirectoryInsertByPointers { object directory -- ok }
	// must be passed the object's header

	0 ok!

	ObRootDirectoryLock ok!

	if (ok@)
		return
	end

	if (object@ ObHeader_DirectoryObject + @)
		// object was already inserted in a directory

		ObRootDirectoryUnlock

		STATUS_INVALID_ARGUMENT ok!

		return
	end

	if (object@ ObHeader_Name + @ ~~)
		// no name! no bueno

		ObRootDirectoryUnlock

		STATUS_INVALID_ARGUMENT ok!

		return
	end

	if (object@ ObHeader_HandleCount + @ ~~)
		if (object@ ObHeader_Flags + @ OBFLAGS_PERMANENT & ~~)
			// another thread in the process closed this object
			// before we could insert it. plus its not permanent.
			// should not be allowed to insert.

			ObRootDirectoryUnlock

			STATUS_INVALID_ARGUMENT ok!

			return
		end
	end

	auto h
	directory@ ObDirectory_ObjectListHead + @ h!

	h@ object@ ObHeader_DirectoryListNext + !

	if (h@)
		object@ h@ ObHeader_DirectoryListPrev + !
	end

	object@ directory@ ObDirectory_ObjectListHead + !

	directory@ object@ ObHeader_DirectoryObject + !

	directory@ ObObjectReferenceByPointer drop

	ObRootDirectoryUnlock
end

fn ObDirectoryRemoveByPointer { locked object -- ok }
	// must be passed the object's header

	if (object@ ObHeader_Flags + @ OBFLAGS_PERMANENT &)
		// don't remove from directory if permanent

		STATUS_FORBIDDEN_OPERATION ok!

		return
	end

	if (locked@ ~~)
		ObRootDirectoryLock ok!

		if (ok@)
			return
		end
	end

	auto dir
	object@ ObHeader_DirectoryObject + @ dir!

	if (dir@ ~~)
		// object was not in a directory

		if (locked@ ~~)
			ObRootDirectoryUnlock
		end

		STATUS_INVALID_ARGUMENT ok!

		return
	end

	auto n
	object@ ObHeader_DirectoryListNext + @ n!

	auto l
	object@ ObHeader_DirectoryListPrev + @ l!

	if (n@)
		l@ n@ ObHeader_DirectoryListPrev + !
	end

	if (l@)
		n@ l@ ObHeader_DirectoryListNext + !
	end else
		// no prev means we were the listhead

		n@ dir@ ObDirectory_ObjectListHead + !
	end

	0 object@ ObHeader_DirectoryObject + !

	dir@ ObObjectDereferenceByPointer drop

	if (locked@ ~~)
		ObRootDirectoryUnlock
	end
end

fn ObDirectoryDumpTree { directory spaces -- }
	auto i
	spaces@ i!

	while (i@)
		' ' Putc
		1 i -=
	end

	directory@ ObHeader_Name + @ "%s/\n" Printf

	auto obj
	directory@ ObHeader_SIZEOF + ObDirectory_ObjectListHead + @ obj!

	while (obj@)
		if (obj@ ObHeader_TypeObject + @ ObTypeDirectoryType@ ==)
			obj@ spaces@ 4 + ObDirectoryDumpTree
		end else
			spaces@ 4 + i!

			while (i@)
				' ' Putc
				1 i -=
			end

			if (obj@ ObHeader_Name + @)
				obj@ ObHeader_Name + @ "%s\n" Printf
			end else
				obj@ "UNNAMED [0x%08x]\n" Printf
			end
		end

		obj@ ObHeader_DirectoryListNext + @ obj!
	end
end

fn ObObjectReferenceByPath { flags path initialobject process -- object ok }
	if (initialobject@ ~~)
		ObRootDirectoryObject@ object!
	end else
		initialobject@ object!
	end

	auto heapcookie
	0 heapcookie!

	auto pcomp
	OBNAMEMAX alloc pcomp!

	ObRootDirectoryLock ok!

	if (ok@)
		return
	end

	while (1)
		auto obh
		object@ ObHeader_SIZEOF - obh!

		auto typeobj
		obh@ ObHeader_TypeObject + @ typeobj!

		if (typeobj@ ObTypeDirectoryType@ ~=)
			object@ ObObjectReferenceByPointer drop

			ObRootDirectoryUnlock

			// not a directory. call the parse method for this object and return whatever it gives.
			// if this is a device object, this is interesting for the filesystem, since this is
			// the source of all file objects when performing an open operation.

			auto parsefunc
			0 parsefunc!

			if (typeobj@)
				typeobj@ ObType_ParseFunction + @ parsefunc!
			end

			if (parsefunc@ ~~)
				if (path@ gb 0 ~=)
					// there's more path left but no parse method

					object@ ObObjectDereferenceByPointer drop

					STATUS_NOT_A_DIRECTORY ok!
				end else
					// no more path left, return object as-is

					0 ok!
				end

				if (heapcookie@)
					heapcookie@ MmFree
					0 heapcookie!
				end

				return
			end

			auto reparsepath

			flags@ // flags
			path@ // path
			object@ // initialobject
			process@ // process
			parsefunc@ ObTypeParseFunction ok! initialobject! reparsepath!

			object@ ObObjectDereferenceByPointer drop

			initialobject@ object!

			if (reparsepath@)
				// start over

				if (heapcookie@)
					heapcookie@ MmFree
					0 heapcookie!
				end

				// the reparsepath will always be on the heap
				reparsepath@ heapcookie!
				reparsepath@ path!

				ObRootDirectoryLockUnalertable

				ObRootDirectoryObject@ object!

				continue
			end

			if (heapcookie@)
				heapcookie@ MmFree
				0 heapcookie!
			end

			return
		end else
			while (path@ gb '/' ==)
				1 path +=
			end

			if (path@ gb 0 ==)
				// no more path, return directory object itself

				object@ ObObjectReferenceByPointer drop

				ObRootDirectoryUnlock

				if (heapcookie@)
					heapcookie@ MmFree
					0 heapcookie!
				end

				return
			end

			// more path, traverse

			if (process@)
				// check traverse rights

				ACCESS_EXEC // access
				object@ // object
				process@ PsProcess_OwningUser + @ // user
				SeCheckAccessObjectUser ok!

				if (ok@)
					// no rights

					ObRootDirectoryUnlock

					if (heapcookie@)
						heapcookie@ MmFree
						0 heapcookie!
					end

					return
				end
			end

			auto len
			0 len!

			while (1)
				if (path@ gb '/' ==)
					break
				end

				if (path@ gb 0 ==)
					break
				end

				if (len@ OBNAMEMAX 1 - >=)
					ObRootDirectoryUnlock

					if (heapcookie@)
						heapcookie@ MmFree
						0 heapcookie!
					end

					STATUS_NAME_TOO_LONG ok!

					return
				end

				path@ gb pcomp@ len@ + sb

				1 len +=
				1 path +=
			end

			0 pcomp@ len@ + sb

			if (pcomp@ "." strcmp)
				continue
			end

			if (pcomp@ ".." strcmp)
				if (obh@ ObHeader_DirectoryObject + @)
					obh@ ObHeader_DirectoryObject + @ object!

					continue
				end else
					continue
				end
			end

			auto searchobj
			object@ ObDirectory_ObjectListHead + @ searchobj!

			0 object!

			while (searchobj@)
				if (DEBUGCHECKS)
					if (searchobj@ ObHeader_Name + @ ~~)
						"ObObjectReferenceByPath: object was in a directory but had no name\n" KeCrash
					end
				end

				if (searchobj@ ObHeader_Name + @ pcomp@ strcmp)
					// found it !!!

					searchobj@ ObHeader_SIZEOF + object!

					break
				end

				searchobj@ ObHeader_DirectoryListNext + @ searchobj!
			end

			if (object@ ~~)
				ObRootDirectoryUnlock

				if (heapcookie@)
					heapcookie@ MmFree
					0 heapcookie!
				end

				STATUS_NOT_FOUND ok!

				return
			end
		end
	end

	ObRootDirectoryUnlock

	if (heapcookie@)
		heapcookie@ MmFree
		0 heapcookie!
	end
end

fn ObObjectOpenByPath { flags access initialobjecthandle path -- handle ok }
	auto initialobject

	if (initialobjecthandle@ -1 ==)
		0 initialobject!
	end else
		0 // type
		initialobjecthandle@ // handle
		ObObjectReferenceByHandle ok! initialobject! drop // just drop the access bits, ObObjectReferenceByPath will take care of that

		if (ok@)
			return
		end
	end

	flags@ // flags
	access@ // access
	initialobject@ // initialobject
	path@ // path
	KeProcessCurrent // process
	ObObjectOpenByPathProcess ok! handle!

	if (initialobject@)
		initialobject@ ObObjectDereferenceByPointer drop
	end
end

fn ObObjectOpenByPathProcess { flags access initialobject path process -- handle ok }
	auto object

	flags@ // flags
	path@ // path
	initialobject@ // initialobject
	process@  // process
	ObObjectReferenceByPath ok! object!

	if (ok@)
		return
	end

	access@ // access
	object@ // object
	process@ // process
	ObObjectOpenProcess ok! handle!

	if (ok@)
		object@ ObObjectDereferenceByPointer drop
	end
end