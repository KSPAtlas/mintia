#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OS.h"

fn ObDirectoryCreate { permissions name -- dirhandle ok }
	auto dir

	name@ // name
	0 // flags
	permissions@ // permissions
	SeUserCurrentGet // owninguser
	ObDirectory_SIZEOF // bodysize
	ObTypeDirectoryType@ // type
	ObObjectCreate ok! dir!

	if (ok@)
		return
	end

	0 dir@ ObDirectory_ObjectListHead + !

	permissions@ 6 >> // permissions. open with maximum permissions that the owner gave themselves.
	dir@ // object
	ObObjectOpen ok! dirhandle!

	if (ok@)
		dir@ ObObjectDeallocate

		return
	end
end

fn ObDirectoryInsertPointer { object directory -- ok }
	0 ok!

	auto rs
	HALCPUInterruptDisable rs!

	if (object@ ObHeader_DirectoryObject + @)
		rs@ HALCPUInterruptRestore

		STATUS_INVALID_ARGUMENT ok!

		return
	end

	auto h
	directory@ ObDirectory_ObjectListHead + @ h!

	h@ object@ ObHeader_DirectoryListNext + !

	if (h@)
		object@ h@ ObHeader_DirectoryListPrev + !
	end

	object@ directory@ ObDirectory_ObjectListHead + !

	directory@ object@ ObHeader_DirectoryObject + !

	rs@ HALCPUInterruptRestore
end

fn ObDirectoryRemovePointer { object -- ok }
	auto rs
	HALCPUInterruptDisable rs!

	auto dir
	object@ ObHeader_DirectoryObject + @ dir!

	if (dir@ ~~)
		rs@ HALCPUInterruptRestore

		STATUS_INVALID_ARGUMENT ok!

		return
	end

	auto n
	object@ ObHeader_DirectoryListNext + @ n!

	auto l
	object@ ObHeader_DirectoryListPrev + @ l!

	if (n@)
		l@ n@ ObHeader_DirectoryListPrev + !
	end

	if (l@)
		n@ l@ ObHeader_DirectoryListNext + !
	end else
		// no prev means we were the listhead

		n@ dir@ ObDirectory_ObjectListHead + !
	end

	rs@ HALCPUInterruptRestore
end