#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/FSRTL.h"

#include "<ll>/OSDLL/OS.h"

fn FSVolumeNameGet { mount -- name }
	auto devobj

	mount@ IOMount_VolumeFile + @ IOFile_FileControlBlock + @ IOFileControlBlock_DeviceObject + @ devobj!

	devobj@ ObHeader_SIZEOF - ObHeader_Name + @ name!
end

fn FSVolumeInitialize { blocksize mount -- cacheblock ok }
	// start caching on volume file

	OSFILEFLAG_NOREADAHEAD mount@ IOMount_VolumeFile + @ IOFile_Flags + |=

	auto volfcb
	mount@ IOMount_VolumeFile + @ IOFile_FileControlBlock + @ volfcb!

	if (DEBUGCHECKS)
		if (volfcb@ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ==)
			// this is a character device!

			"FSVolumeInitialize: attempted to initialize a character device\n" KeCrash
		end
	end

	1 // wantcaching
	volfcb@ // fcb
	IOFileControlBlockCacheCheck ok! cacheblock!

	blocksize@ mount@ IOMount_BlockSize + !

	if (blocksize@ PAGESIZE >)
		PAGESIZE blocksize@ "FSVolumeInitialize: blocksize (%d) > pagesize (%d)\n" KeCrash
	end
end

fn FSVolumeFlush { trunc mount -- ok }
	auto volfcb
	mount@ IOMount_VolumeFile + @ IOFile_FileControlBlock + @ volfcb!

	auto cacheblock
	volfcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

	cacheblock@ IOCacheInfoBlockFlush ok!

	if (ok@)
		return
	end

	if (trunc@)
		// attempt to truncate for good measure

		0 // newsize
		1 // writeout
		cacheblock@ // cacheblock
		IOCacheInfoBlockTruncate ok!
	end
end

fn FSVolumeRead { length offset buf lastmode mount -- bytesread ok }
	auto volfcb
	mount@ IOMount_VolumeFile + @ IOFile_FileControlBlock + @ volfcb!

	auto readfunc
	volfcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_Read + @ readfunc!

	if (readfunc@ ~~)
		STATUS_IO_NOT_SUPPORTED ok!

		return
	end

	OSWAIT_TIMEOUTINFINITE // timeout
	0 // flags
	0 // kflags
	length@ // length
	offset@ // offset
	buf@ // buffer
	volfcb@ // fcb
	lastmode@ // lastmode
	readfunc@ IODispatchReadFunction ok! bytesread!
end

fn FSVolumeWrite { length offset buf lastmode mount -- byteswritten ok }
	auto volfcb
	mount@ IOMount_VolumeFile + @ IOFile_FileControlBlock + @ volfcb!

	if (DEBUGCHECKS)
		if (mount@ IOMount_Flags + @ OSMOUNT_READONLY &)
			"FSVolumeWrite: fs driver attempted to write a readonly volume\n" KeCrash
		end
	end

	auto writefunc
	volfcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_Write + @ writefunc!

	if (writefunc@ ~~)
		STATUS_IO_NOT_SUPPORTED ok!

		return
	end

	0 // flags
	length@ // length
	offset@ // offset
	buf@ // buffer
	volfcb@ // fcb
	lastmode@ // lastmode
	writefunc@ IODispatchWriteFunction ok! byteswritten!
end

fn FSVolumeReadCached { length offset buf mount -- bytesread ok }
	auto volfcb
	mount@ IOMount_VolumeFile + @ IOFile_FileControlBlock + @ volfcb!

	auto readfunc
	volfcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_Read + @ readfunc!

	if (readfunc@ ~~)
		STATUS_IO_NOT_SUPPORTED ok!

		return
	end

	0 // flags
	length@ // length
	offset@ // offset
	buf@ // buffer
	volfcb@ // fcb
	IOCacheFileRead ok! bytesread!
end

fn FSVolumeWriteCached { length offset buf mount -- byteswritten ok }
	auto volfcb
	mount@ IOMount_VolumeFile + @ IOFile_FileControlBlock + @ volfcb!

	if (DEBUGCHECKS)
		if (mount@ IOMount_Flags + @ OSMOUNT_READONLY &)
			"FSVolumeWriteCached: fs driver attempted to write a readonly volume\n" KeCrash
		end
	end

	auto writefunc
	volfcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_Write + @ writefunc!

	if (writefunc@ ~~)
		STATUS_IO_NOT_SUPPORTED ok!

		return
	end

	0 // flags
	length@ // length
	offset@ // offset
	buf@ // buffer
	volfcb@ // fcb
	IOCacheFileWrite ok! byteswritten!
end

fn FSVolumeBlockRead { flags kflags offset mount -- pageframe pfdbe ok }
	auto blocksize
	mount@ IOMount_BlockSize + @ blocksize!

	if (DEBUGCHECKS)
		if (blocksize@ 1 - offset@ &)
			offset@ "FSVolumeBlockRead: offset %d wasn't block-aligned within volume\n" KeCrash
		end
	end

	auto volfcb
	mount@ IOMount_VolumeFile + @ IOFile_FileControlBlock + @ volfcb!

	flags@ // flags
	kflags@ // kflags
	offset@ PAGENUMBERMASK & // offset
	volfcb@ // fcb
	IOCachePageRead ok! pfdbe! pageframe!

	offset@ PAGEOFFSETMASK & pageframe +=
end

fn FSVolumeBlockWrite { pfdbe mount -- ok }
	if (DEBUGCHECKS)
		if (mount@ IOMount_Flags + @ OSMOUNT_READONLY &)
			"FSVolumeBlockWrite: fs driver attempted to write a readonly volume\n" KeCrash
		end
	end

	pfdbe@ IOCachePageModifyFunction ok!
end