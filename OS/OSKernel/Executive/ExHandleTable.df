#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALDebug.h"

fn ExHandleTableCreate { chargedprocess entrysizelog -- handletable ok }
	auto entrysize
	4 entrysizelog@ << entrysize!

	// chargedprocess instead of keeping track of the quotablock itself is
	// fine, because the handle table will never outlive its charged process.

	if (chargedprocess@)
		ExHandleTableHeader_SIZEOF MmChargeBytesGet // charge
		chargedprocess@ PsProcess_QuotaBlock + @ // quotablock
		MmQuotaBlockCharge ok!

		if (ok@)
			return
		end
	end

	ExHandleTableHeader_SIZEOF 'HnTb' MmAllocWithTag ok! handletable!

	if (ok@)
		// allocation failed

		if (chargedprocess@)
			ExHandleTableHeader_SIZEOF MmChargeBytesGet // charge
			chargedprocess@ PsProcess_QuotaBlock + @ // quotablock
			MmQuotaBlockUncharge
		end

		return
	end

	"ExHandleTableRwLock" // name
	handletable@ ExHandleTableHeader_RwLock + // mutex
	ExRwLockInitialize ok!

	if (ok@)
		"ExHandleTableCreate: RwLock initialization failed\n" KeCrash
	end

	entrysizelog@ handletable@ ExHandleTableHeader_EntrySizeLog + !

	chargedprocess@ handletable@ ExHandleTableHeader_ChargedProcess + !

	0 handletable@ ExHandleTableHeader_Entries + !
	0 handletable@ ExHandleTableHeader_FreeEntries + !

	0 handletable@ ExHandleTableHeader_FreeListHead + !

	0 handletable@ ExHandleTableHeader_Table + !
end

fn ExHandleTableDelete { func handletable -- }
	auto ok

	// handle table MUST be locked exclusively

	auto i

	auto entries

	auto entryptr

	if (func@)
		// call a function for each handle

		0 i!

		handletable@ ExHandleTableHeader_Entries + @ entries!

		while (i@ entries@ <)
			i@
			handletable@
			1 // locked
			ExHandleLookup ok! entryptr!

			if (ok@ 0 ==)
				entryptr@ i@ handletable@ func@ ExHandleEnumFunction ok!

				if (DEBUGCHECKS)
					if (ok@)
						ok@ func@ "ExHandleTableDelete: delete function at 0x%08x failed (%i)\n" KeCrash
					end
				end
			end

			1 i +=
		end
	end

	// deallocate handle table structures

	auto chargedprocess
	handletable@ ExHandleTableHeader_ChargedProcess + @ chargedprocess!

	if (chargedprocess@)
		handletable@ MmBlockChargeGet // charge
		chargedprocess@ PsProcess_QuotaBlock + @ // quotablock
		MmQuotaBlockUncharge
	end

	auto tab
	handletable@ ExHandleTableHeader_Table + @ tab!

	if (tab@)
		if (chargedprocess@)
			tab@ MmBlockChargeGet // charge
			chargedprocess@ PsProcess_QuotaBlock + @ // quotablock
			MmQuotaBlockUncharge
		end

		tab@ MmFree
	end

	handletable@ MmFree
end

fn ExHandleTableDuplicate { func handletablesrc chargedprocess -- handletable ok }
	"ExHandleTableDuplicate: untested! please review me now that theres a code path here\n" KeCrash

	handletablesrc@ ExHandleTableLock ok!

	if (ok@)
		return
	end

	auto entrysizelog
	handletablesrc@ ExHandleTableHeader_EntrySizeLog + @ entrysizelog!

	chargedprocess@ // chargedprocess
	entrysizelog@ // entrysizelog
	ExHandleTableCreate ok! handletable!

	if (ok@)
		handletablesrc@ ExHandleTableUnlock

		return
	end

	auto entrysize
	4 entrysizelog@ << entrysize!

	auto entries
	handletablesrc@ ExHandleTableHeader_Entries + @ entries!

	entries@ handletable@ ExHandleTableHeader_Entries + !
	handletablesrc@ ExHandleTableHeader_FreeEntries + @ handletable@ ExHandleTableHeader_FreeEntries + !

	chargedprocess@ handletable@ ExHandleTableHeader_ChargedProcess + !

	auto tab
	handletablesrc@ ExHandleTableHeader_Table + @ tab!

	if (tab@)
		// we need to allocate and copy the table

		if (chargedprocess@)
			tab@ MmBlockChargeGet // charge
			chargedprocess@ PsProcess_QuotaBlock + @ // quotablock
			MmQuotaBlockCharge ok!

			if (ok@)
				// process does not have enough quota

				handletablesrc@ ExHandleTableUnlock

				// XXX careful with this call. the handle table is actually inconsistent here,
				// but this happens to work anyway without breaking ExHandleTableDelete. for now.
				0 handletable@ ExHandleTableDelete

				return
			end
		end

		if (DEBUGCHECKS)
			if (entries@ 0 s<=)
				"ExHandleTableDuplicate: bad number of extended entries (0x%08x)\n" KeCrash
			end
		end

		auto tabsize
		entries@ entrysize@ * tabsize!

		auto newtab
		tabsize@ // bytes
		'HnTd' // tag
		MmAllocWithTag ok! newtab!

		if (ok@)
			if (chargedprocess@)
				tab@ MmBlockChargeGet // charge
				chargedprocess@ PsProcess_QuotaBlock + @ // quotablock
				MmQuotaBlockUncharge
			end

			handletablesrc@ ExHandleTableUnlock

			// XXX careful with this call. the handle table is actually inconsistent here,
			// but this happens to work anyway without breaking ExHandleTableDelete. for now.
			0 handletable@ ExHandleTableDelete

			return
		end

		newtab@ // dest
		tab@ // src
		tabsize@ // size
		memcpy

		newtab@ handletable@ ExHandleTableHeader_Table + !		
	end else
		0 handletable@ ExHandleTableHeader_Table + !
	end

	auto i
	auto entryptr

	if (func@)
		// call a function for each handle

		0 i!

		handletable@ ExHandleTableHeader_Entries + @ entries!

		while (i@ entries@ <)
			i@
			handletable@
			1 // locked
			ExHandleLookup ok! entryptr!

			if (ok@ 0 ==)
				entryptr@ i@ handletable@ func@ ExHandleEnumFunction ok!

				if (ok@)
					// failed, delete handle

					0 entryptr@!
				end
			end

			1 i +=
		end
	end

	handletablesrc@ ExHandleTableUnlock
end

fn ExHandleTableLock { handletable -- ok }
	1 // alertable
	0 // nowait
	handletable@ ExHandleTableHeader_RwLock + // rwlock
	ExRwLockAcquireExclusive ok!
end

fn ExHandleTableLockShared { handletable -- ok }
	1 // alertable
	0 // nowait
	0 // canstarve
	handletable@ ExHandleTableHeader_RwLock + // rwlock
	ExRwLockAcquireShared ok!
end

fn ExHandleTableUnlock { handletable -- }
	handletable@ ExHandleTableHeader_RwLock + ExRwLockRelease
end

fn ExHandleDelete { handle handletable locked -- entryptr entryvalue ok }
	0 ok!

	if (locked@ ~~)
		handletable@ ExHandleTableLock ok!

		if (ok@)
			return
		end
	end

	handle@ // handle
	handletable@ // handletable
	1 // locked
	ExHandleLookup ok! entryptr!

	if (ok@)
		if (locked@ ~~)
			handletable@ ExHandleTableUnlock
		end

		return
	end

	entryptr@@ entryvalue!

	0 entryptr@!

	1 handletable@ ExHandleTableHeader_FreeEntries + +=

	if (locked@ ~~)
		handletable@ ExHandleTableUnlock
	end
end

fn ExHandleCreate { entryvalue handletable locked -- handle entryptr ok }
	0 ok!

	if (DEBUGCHECKS)
		if (entryvalue@ ~~)
			"ExHandleCreate: entryvalue=0\n" KeCrash
		end
	end

	// lock handle table rwlock

	if (locked@ ~~)
		handletable@ ExHandleTableLock ok!

		if (ok@)
			return
		end
	end

	auto chargedprocess
	handletable@ ExHandleTableHeader_ChargedProcess + @ chargedprocess!

	auto logsize
	handletable@ ExHandleTableHeader_EntrySizeLog + @ 2 + logsize!

	auto entries
	handletable@ ExHandleTableHeader_Entries + @ entries!

	auto tab
	handletable@ ExHandleTableHeader_Table + @ tab!

	0 handle!

	auto tabsize
	EXTENDBYENTRIES logsize@ << tabsize!

	if (handletable@ ExHandleTableHeader_FreeEntries + @ ~~)
		// create or grow the extended table

		if (tab@ ~~)
			// create

			if (chargedprocess@)
				tabsize@ MmChargeBytesGet // charge
				chargedprocess@ PsProcess_QuotaBlock + @ // quotablock
				MmQuotaBlockCharge ok!

				if (ok@)
					// insufficient quota

					if (locked@ ~~)
						handletable@ ExHandleTableUnlock
					end

					return
				end
			end

			tabsize@ 'HnTd' MmAllocWithTag ok! tab!

			if (ok@)
				// allocation failed

				if (chargedprocess@)
					tabsize@ MmChargeBytesGet // charge
					chargedprocess@ PsProcess_QuotaBlock + @ // quotablock
					MmQuotaBlockUncharge
				end

				if (locked@ ~~)
					handletable@ ExHandleTableUnlock
				end

				return
			end

			tab@ handletable@ ExHandleTableHeader_Table + !

			tab@ // ptr
			tabsize@ // size
			0 // word
			memset

			EXTENDBYENTRIES entries +=

			0 handle!
		end else
			// grow

			entries@ handle! // start search at new entries

			EXTENDBYENTRIES entries +=

			entries@ logsize@ << tabsize!

			auto nquota
			tabsize@ MmChargeBytesGet tab@ MmBlockChargeGet - nquota!

			if (DEBUGCHECKS)
				if (nquota@ 0 s<)
					"ExHandleCreate: nquota < 0\n" KeCrash
				end
			end

			if (chargedprocess@)
				if (nquota@)
					nquota@ // charge
					chargedprocess@ PsProcess_QuotaBlock + @ // quotablock
					MmQuotaBlockCharge ok!

					if (ok@)
						// insufficient quota

						if (locked@ ~~)
							handletable@ ExHandleTableUnlock
						end

						return
					end
				end
			end

			auto newtab
			tabsize@ 'HnTd' MmAllocWithTag ok! newtab!

			if (ok@)
				// allocation failed

				if (chargedprocess@)
					// undo the shenanigans we just did with the quota charge

					if (nquota@)
						nquota@ // charge
						chargedprocess@ PsProcess_QuotaBlock + @ // quotablock
						MmQuotaBlockUncharge
					end
				end

				if (locked@ ~~)
					handletable@ ExHandleTableUnlock
				end

				return
			end

			newtab@
			tab@
			entries@ EXTENDBYENTRIES - logsize@ <<
			memcpy

			newtab@ entries@ EXTENDBYENTRIES - logsize@ << +
			EXTENDBYENTRIES logsize@ <<
			0
			memset

			tab@ MmFree

			newtab@ tab!

			tab@ handletable@ ExHandleTableHeader_Table + !
		end

		EXTENDBYENTRIES handletable@ ExHandleTableHeader_FreeEntries + !

		entries@ handletable@ ExHandleTableHeader_Entries + !
	end

	auto entrysize
	1 logsize@ << entrysize!

	if (DEBUGCHECKS)
		if (tab@ ~~)
			"ExHandleCreate: table is null 2\n" KeCrash
		end
	end

	handle@ logsize@ << tab@ + entryptr!

	while (handle@ entries@ <)
		if (entryptr@@ ~~)
			entryvalue@ entryptr@!

			1 handletable@ ExHandleTableHeader_FreeEntries + -=

			if (locked@ ~~)
				handletable@ ExHandleTableUnlock
			end

			return
		end

		entrysize@ entryptr +=
		1 handle +=
	end

	"ExHandleCreate: there should have been free entries\n" KeCrash
end

fn ExHandleLookup { handle handletable locked -- entryptr ok }
	0 ok!

	if (locked@ ~~)
		handletable@ ExHandleTableLockShared ok!

		if (ok@)
			return
		end
	end

	auto logsize
	handletable@ ExHandleTableHeader_EntrySizeLog + @ 2 + logsize!

	auto entries
	handletable@ ExHandleTableHeader_Entries + @ entries!

	if (handle@ entries@ >=)
		if (locked@ ~~)
			handletable@ ExHandleTableUnlock
		end

		STATUS_INVALID_HANDLE ok!

		return
	end

	auto tab
	handletable@ ExHandleTableHeader_Table + @ tab!

	if (DEBUGCHECKS)
		if (tab@ ~~)
			"ExHandleLookup: table is null\n" KeCrash
		end
	end

	tab@ handle@ logsize@ << + entryptr!

	if (entryptr@@ ~~)
		STATUS_INVALID_HANDLE ok!
	end

	if (locked@ ~~)
		handletable@ ExHandleTableUnlock
	end
end