#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALDebug.h"

// allegedly-efficient bitmap management routines

// XXX these tables each take up 1024 bytes because dragonfruit is ridiculous 
// so that is a memory consumption issue to keep in mind...

// table of largest # of contiguous zero bits in a byte
table ExBitmapContiguousZeroes
	8 7 6 6 5 5 5 5 4 4 4 4 4 4 4 4
	4 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
	5 4 3 3 2 2 2 2 3 2 2 2 2 2 2 2
	4 3 2 2 2 2 2 2 3 2 2 2 2 2 2 2
	6 5 4 4 3 3 3 3 3 2 2 2 2 2 2 2
	4 3 2 2 2 1 1 1 3 2 1 1 2 1 1 1
	5 4 3 3 2 2 2 2 3 2 1 1 2 1 1 1
	4 3 2 2 2 1 1 1 3 2 1 1 2 1 1 1
	7 6 5 5 4 4 4 4 3 3 3 3 3 3 3 3
	4 3 2 2 2 2 2 2 3 2 2 2 2 2 2 2
	5 4 3 3 2 2 2 2 3 2 1 1 2 1 1 1
	4 3 2 2 2 1 1 1 3 2 1 1 2 1 1 1
	6 5 4 4 3 3 3 3 3 2 2 2 2 2 2 2
	4 3 2 2 2 1 1 1 3 2 1 1 2 1 1 1
	5 4 3 3 2 2 2 2 3 2 1 1 2 1 1 1
	4 3 2 2 2 1 1 1 3 2 1 1 2 1 1 0
endtable

// table of contiguous low zero bits in a byte
table ExBitmapLowZeroes
	8 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	4 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	5 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	4 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	6 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	4 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	5 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	4 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	7 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	4 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	5 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	4 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	6 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	4 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	5 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
	4 0 1 0 2 0 1 0 3 0 1 0 2 0 1 0
endtable

// table of contiguous high zero bits in a byte
table ExBitmapHighZeroes
	8 7 6 6 5 5 5 5 4 4 4 4 4 4 4 4
	3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
	2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
	2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
	1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
	1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
	1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
	1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
endtable

// table of total number of clear bits in a byte
table ExBitmapTotalZeroes
	8 7 7 6 7 6 6 5 7 6 6 5 6 5 5 4
	7 6 6 5 6 5 5 4 6 5 5 4 5 4 4 3
	7 6 6 5 6 5 5 4 6 5 5 4 5 4 4 3
	6 5 5 4 5 4 4 3 5 4 4 3 4 3 3 2
	7 6 6 5 6 5 5 4 6 5 5 4 5 4 4 3
	6 5 5 4 5 4 4 3 5 4 4 3 4 3 3 2
	6 5 5 4 5 4 4 3 5 4 4 3 4 3 3 2
	5 4 4 3 4 3 3 2 4 3 3 2 3 2 2 1
	7 6 6 5 6 5 5 4 6 5 5 4 5 4 4 3
	6 5 5 4 5 4 4 3 5 4 4 3 4 3 3 2
	6 5 5 4 5 4 4 3 5 4 4 3 4 3 3 2
	5 4 4 3 4 3 3 2 4 3 3 2 3 2 2 1
	6 5 5 4 5 4 4 3 5 4 4 3 4 3 3 2
	5 4 4 3 4 3 3 2 4 3 3 2 3 2 2 1
	5 4 4 3 4 3 3 2 4 3 3 2 3 2 2 1
	4 3 3 2 3 2 2 1 3 2 2 1 2 1 1 0
endtable

table ExBitmapFillMasks
	0   1   3   7   15  31  63  127 255
endtable

table ExBitmapZeroMasks
	255 254 252 248 240 224 192 128 0
endtable

fn ExBitmapInitialize { sizeinbits data header -- }
	data@ header@ ExBitmapHeader_Data + !
	sizeinbits@ header@ ExBitmapHeader_SizeInBits + !

	auto sizeinbytes
	sizeinbits@ 7 + 3 >> sizeinbytes!

	if (sizeinbits@ 7 &)
		[sizeinbits@ 7 &]ExBitmapZeroMasks@ data@ sizeinbytes@ 1 - + sb
	end
end

fn ExBitmapClear { header -- }
	auto sizeinbits
	header@ ExBitmapHeader_SizeInBits + @ sizeinbits!

	auto sizeinbytes
	sizeinbits@ 7 + 3 >> sizeinbytes!

	auto data
	header@ ExBitmapHeader_Data + @ data!

	data@ // ptr
	sizeinbytes@ // size
	0 // word
	memset

	if (sizeinbits@ 7 &)
		[sizeinbits@ 7 &]ExBitmapZeroMasks@ data@ sizeinbytes@ 1 - + sb
	end
end

fn ExBitmapFindRun { hint runlength header -- offset ok }
	0 ok!

	auto sizeinbits
	header@ ExBitmapHeader_SizeInBits + @ sizeinbits!

	auto sizeinbytes
	sizeinbits@ 7 + 3 >> sizeinbytes!

	auto currentposition

	if (hint@ sizeinbits@ >=)
		0 hint!
	end

	3 hint >>=

	auto i
	0 i!

	while (i@ 2 <)
		auto startindex
		auto endindex

		if (i@ 0 ==)
			hint@ startindex!
			sizeinbytes@ endindex!
		end elseif (hint@)
			0 startindex!

			if (runlength@ 2 <)
				hint@ endindex!
			end else
				runlength@ 2 - 3 >> 1 + hint@ + endindex!

				if (endindex@ sizeinbytes@ >)
					sizeinbytes@ endindex!
				end
			end
		end else
			-1 ok!

			return
		end

		auto endbitindex
		auto prevbyte
		auto curbyte
		auto theotherbyte
		auto bitmaskorstartindex

		header@ ExBitmapHeader_Data + @ startindex@ + currentposition!

		if (runlength@ 10 <)
			0xFF prevbyte!

			startindex@ 3 << offset!
			endindex@ 3 << endbitindex!

			while (offset@ endbitindex@ <)
				currentposition@ gb curbyte!
				1 currentposition +=

				if ([curbyte@]ExBitmapContiguousZeroes@ runlength@ >=)
					// we can satisfy this with this single byte

					[runlength@]ExBitmapFillMasks@ bitmaskorstartindex!

					while (curbyte@ bitmaskorstartindex@ &)
						1 bitmaskorstartindex <<=
						1 offset +=
					end

					return
				end elseif ([prevbyte@]ExBitmapHighZeroes@
					[curbyte@]ExBitmapLowZeroes@ + runlength@ >=)
					// this and the last byte work

					offset@ [prevbyte@]ExBitmapHighZeroes@ - bitmaskorstartindex!

					if (bitmaskorstartindex@ runlength@ + sizeinbits@ <=)
						bitmaskorstartindex@ offset!

						return
					end
				end

				curbyte@ prevbyte!
				8 offset +=
			end
		end elseif (runlength@ 15 <)
			0xFF prevbyte!
			0xFF theotherbyte!

			startindex@ 3 << offset!
			endindex@ 3 << endbitindex!

			while (offset@ endbitindex@ <)
				currentposition@ gb curbyte!
				1 currentposition +=

				if ([prevbyte@]ExBitmapHighZeroes@
					[curbyte@]ExBitmapLowZeroes@ + runlength@ >=)
					// fits in this byte and the last byte
				end

				if (prevbyte@ 0 ==)
					if ([theotherbyte@]ExBitmapHighZeroes@
						[curbyte@]ExBitmapLowZeroes@ 8 + + runlength@ >=)
						// fits in this byte, the last byte, and the other byte

						offset@ 8 - [theotherbyte@]ExBitmapHighZeroes@ - bitmaskorstartindex!

						if (bitmaskorstartindex@ runlength@ + sizeinbits@ <=)
							bitmaskorstartindex@ offset!

							return
						end
					end
				end

				prevbyte@ theotherbyte!
				curbyte@ prevbyte!
				8 offset +=
			end
		end else
			// big runlength, can't try our fancy tricks above...
			// need new fancy tricks.

			auto zeroneeded
			runlength@ 7 - 3 >> zeroneeded!

			auto zerobytesrun
			0 zerobytesrun!

			// store start of run byte in hint
			0xFF hint!

			startindex@ 1 - bitmaskorstartindex!

			// store current index in theotherbyte
			startindex@ theotherbyte!

			while (theotherbyte@ endindex@ <)
				currentposition@ gb curbyte!
				1 currentposition +=

				if (zerobytesrun@ zeroneeded@ >=)
					if ([prevbyte@]ExBitmapHighZeroes@
						zeroneeded@ 3 << +
						[curbyte@]ExBitmapLowZeroes@ + runlength@ >=)

						bitmaskorstartindex@ 3 <<
						8 [hint@]ExBitmapHighZeroes@ - + bitmaskorstartindex!

						if (bitmaskorstartindex@ runlength@ + sizeinbits@ <=)
							bitmaskorstartindex@ offset!

							return
						end
					end
				end

				if (curbyte@ ~~)
					1 zerobytesrun +=
				end else
					curbyte@ hint!
					0 zerobytesrun!
					theotherbyte@ bitmaskorstartindex!
				end

				1 theotherbyte +=
			end
		end

		1 i +=
	end

	-1 ok!
end

fn ExBitmapSetBits { runlength index header -- }
	if (DEBUGCHECKS)
		if (runlength@ index@ + header@ ExBitmapHeader_SizeInBits + @ >)
			"ExBitmapSetBits: attempt to set beyond the end of the bitmap\n" KeCrash
		end
	end

	if (runlength@ 0 ==)
		return
	end

	auto bitoffset
	index@ 31 & bitoffset!

	auto curlongptr
	header@ ExBitmapHeader_Data + @ index@ 5 >> 2 << + curlongptr!

	if (bitoffset@ runlength@ + 32 <=)
		// you are expected to understand this

		curlongptr@@ 0xFFFFFFFF 32 runlength@ - >> bitoffset@ << | curlongptr@! 

		return
	end

	curlongptr@@ 0xFFFFFFFF bitoffset@ << | curlongptr@!

	4 curlongptr +=
	32 bitoffset@ - runlength -=

	while (runlength@ 32 >=)
		0xFFFFFFFF curlongptr@!

		4 curlongptr +=
		32 runlength -=
	end

	if (runlength@)
		curlongptr@@ 0xFFFFFFFF runlength@ << ~ | curlongptr@!
	end
end

fn ExBitmapClearBits { runlength index header -- }
	if (DEBUGCHECKS)
		if (runlength@ index@ + header@ ExBitmapHeader_SizeInBits + @ >)
			"ExBitmapClearBits: attempt to clear beyond the end of the bitmap\n" KeCrash
		end
	end

	if (runlength@ 0 ==)
		return
	end

	auto bitoffset
	index@ 31 & bitoffset!

	auto curlongptr
	header@ ExBitmapHeader_Data + @ index@ 5 >> 2 << + curlongptr!

	if (bitoffset@ runlength@ + 32 <=)
		// you are expected to understand this

		curlongptr@@ 0xFFFFFFFF 32 runlength@ - >> bitoffset@ << & curlongptr@! 

		return
	end

	curlongptr@@ 0xFFFFFFFF bitoffset@ << & curlongptr@!

	4 curlongptr +=
	32 bitoffset@ - runlength -=

	while (runlength@ 32 >=)
		0 curlongptr@!

		4 curlongptr +=
		32 runlength -=
	end

	if (runlength@)
		curlongptr@@ 0xFFFFFFFF runlength@ << & curlongptr@!
	end
end

fn ExBitmapBitGet { index header -- value }
	if (DEBUGCHECKS)
		if (index@ header@ ExBitmapHeader_SizeInBits + @ >)
			"ExBitmapBitGet: attempt to get bit beyond end of bitmap\n" KeCrash
		end
	end

	auto bitnum
	index@ 3 >> bitnum!

	auto bitoffset
	index@ 7 & bitoffset!

	header@ ExBitmapHeader_Data + @ bitnum@ + gb bitoffset@ >> 1 & value!
end