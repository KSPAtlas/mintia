#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Object.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OSStatus.h"

buffer TestThread1Stack KETHREADSTACKSIZE
buffer TestThread2Stack KETHREADSTACKSIZE

buffer TestThread1 KeThread_SIZEOF

buffer TestThread2 KeThread_SIZEOF

buffer TestAPC KeAPC_SIZEOF

buffer TestMutex KeMutex_SIZEOF

buffer TestMutex2 KeMutex_SIZEOF

buffer TestEvent KeEvent_SIZEOF

fn (APCFunctionKernel) TestKernelFunc { normalfunc context1 context2 apc -- }
	// context2@@ context1@@ KeThreadCurrent@ KeThread_Name + "hi im in %s context. c1=%d c2=%d\n" Printf
end

fn (APCFunctionNormal) TestNormalFunc { context1 context2 -- }
	// context2@ context1@ KeThreadCurrent@ KeThread_Name + "hi im in %s context! c1=%d c2=%d\n" Printf

	// HALDebug drop
	SierpinskiFast

	// 600 KERNELMODE 0 KeThreadSleep drop
end

fn ExInitPhase0 { -- }
	// initialize physical memory allocation

	MmInitPhase0

	// initialize security

	SeInitPhase0

	// initialize object manager

	ObInitPhase0

	// initialize process manager

	PsInitPhase0

	// become page zeroing thread

	MmZeroPageWorker
end

externptr HALLoaderInfo

fn ExInitPhase1 { context1 context2 -- }
	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	// initialize components ...

	// initialize drivers

	STAGE_THREAD HALLoaderInfo@ HALDriverInit

	// do some random tests

	0xBBBBBBBB
	'o'
	pointerof TestKernelThread
	KeProcessIdleProcess // process
	TestThread1Stack // kstack
	"bthread"
	TestThread1
	KeThreadInitialize drop

	0xCCCCCCCC
	'c'
	pointerof TestKernelThread
	KeProcessIdleProcess // process
	TestThread2Stack // kstack
	"cthread"
	TestThread2
	KeThreadInitialize drop

	// PRIORITY_LOWREALTIME TestThread2 KeThread_BasePriority + !
	// PRIORITY_LOWREALTIME TestThread2 KeThread_Priority + !

	0 KEEVENT_NOTIF "testevent" TestEvent KeEventInitialize drop

	TestThread2    // target thread
	0              // exit func
	pointerof TestKernelFunc // kernel func
	pointerof TestNormalFunc // normal func
	KERNELMODE     // mode
	TestAPC
	KeAPCInitialize drop

	"testmutex" KERNELMODE TestMutex KeMutexInitialize drop

	"testmutex2" KERNELMODE TestMutex2 KeMutexInitialize drop

	// QUEUEBACK TestThread1 KeThreadReady
	// QUEUEBACK TestThread2 KeThreadReady

	while (1)
		HALCPUHalt
	end
end

#include "../../Loader/LoaderGlobal.h"

asm "

SierpinskiCount:
	.dl 0

SierpinskiIter:
	.dl 0

SierpinskiFast:
.global SierpinskiFast
	subi sp, sp, 36

	mov  long [sp], lr
	mov  long [sp + 4], s0
	mov  long [sp + 8], s1
	mov  long [sp + 12], s2
	mov  long [sp + 16], s3
	mov  long [sp + 20], s4
	mov  long [sp + 24], s5
	mov  long [sp + 28], s6
	mov  long [sp + 32], s7

	li   s0, 0

	li   s1, 126

	li   s5, 15877

	li   s7, 640

	la   s2, SierpinskiIter
	mov  s3, long [s2]

	la   t0, SierpinskiCount
	mov  s4, long [t0]

	la   s6, HALLoaderInfo
	mov  s6, long [s6]
	mov  s6, long [s6 + LoaderInfo_HALConsoleFBAddr]

.loop:
	div  t1, s0, s1
	mod  t2, s0, s1

	and  t3, t1, t2
	bne  t3, zero, .cont

	rshi a2, t2, 1
	nor  a2, a2, a2
	sub  a2, t1, a2

	sub  a1, s1, t2

	xor  a0, t1, s4
	xor  a0, a0, s3
	xor  a0, a0, t2

	mul  t0, a1, s7
	lshi t0, t0, 1
	lshi a2, a2, 1
	add  t0, t0, a2
	mov  int [s6 + t0], a0

	addi s3, s3, 1

.cont:
	addi s0, s0, 1

	blt  s0, s5, .loop

	mov  long [s2], s3

	addi s4, s4, 1

	la   t0, SierpinskiCount
	mov  long [t0], s4
	
	mov  lr, long [sp]
	mov  s0, long [sp + 4]
	mov  s1, long [sp + 8]
	mov  s2, long [sp + 12]
	mov  s3, long [sp + 16]
	mov  s4, long [sp + 20]
	mov  s5, long [sp + 24]
	mov  s6, long [sp + 28]
	mov  s7, long [sp + 32]
	ret

"

extern SierpinskiFast { -- }

fn TestKernelThread { context1 context2 -- }
	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	if (context1@ 0xCCCCCCCC ==)
		3000 KERNELMODE 0 KeThreadSleep drop

		0 TestEvent KeEventSignal drop
	end

	while (1)
		auto ok

		if (context1@ 0xCCCCCCCC ==)
			// 3000 KERNELMODE 0 KeThreadSleep drop

			KERNELMODE WAITUNALERTABLE TIMEOUTINFINITE TestMutex KeThreadWaitForObject drop

			"cccc" Printf

			HALCPUHalt

			TestMutex KeMutexRelease drop

			// 1000 KERNELMODE 0 KeThreadSleep drop
		end else
			// 3000 KERNELMODE 0 KeThreadSleep drop

			KERNELMODE WAITUNALERTABLE TIMEOUTINFINITE TestMutex KeThreadWaitForObject drop

			"bbbb" Printf

			// 600 KERNELMODE 0 KeThreadSleep drop

			// if (TestAPC KeAPC_Enqueued + @ ~~)
			//	0 0 0 TestAPC KeAPCEnqueue drop
			// end

			HALCPUHalt

			TestMutex KeMutexRelease drop
		end
	end
end