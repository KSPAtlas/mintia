#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/Security.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

fn IOFileCreateObject { openedpath flags owninguser permissions fcb -- fileobject ok }
	// just shorthand for creating a file object, doesn't open it.
	// also does NOT ref the FCB -- caller must do that.

	0 // name
	0 // flags
	permissions@ // permissions
	owninguser@ // owninguser
	0 // quotabias
	IOFile_SIZEOF // bodysize
	IOFileTypeObject@ // type
	ObObjectCreate ok! fileobject!

	if (ok@)
		return
	end

	fcb@   fileobject@ IOFile_FileControlBlock + !
	0      fileobject@ IOFile_Offset + !
	flags@ fileobject@ IOFile_Flags + !

	auto path
	0 path!

	if (openedpath@)
		auto namelen
		openedpath@ strlen namelen!

		namelen@ 1 + // bytes
		'fNam'
		MmAllocWithTag ok! path!

		if (ok@)
			// failed to allocate, don't bother
			0 path!
		end else
			path@ openedpath@ strcpy
		end
	end
	
	path@ fileobject@ IOFile_OpenedPath + !
end

// these next 3 are object manager routines -- these are not called directly.
// man I hope I remember to update this comment if there are ever more than 3

fn (ObTypeOpenFunction) IOFileOpenObject { access object process -- ok }
	0 ok!

	auto fcb
	object@ IOFile_FileControlBlock + @ fcb!

	auto dispatchtable
	fcb@ IOFileControlBlock_DispatchTable + @ dispatchtable!

	auto openfunc
	dispatchtable@ IODispatchTable_Open + @ openfunc!

	if (openfunc@)
		access@ // access
		object@ // fileobject
		openfunc@ IODispatchOpenFunction ok!
	end
end

fn (ObTypeCloseFunction) IOFileCloseObject { access object process -- }
	auto ok
	0 ok!

	auto fcb
	object@ IOFile_FileControlBlock + @ fcb!

	auto dispatchtable
	fcb@ IOFileControlBlock_DispatchTable + @ dispatchtable!

	auto closefunc
	dispatchtable@ IODispatchTable_Close + @ closefunc!

	if (closefunc@)
		access@ // access
		object@ // object
		closefunc@ IODispatchCloseFunction ok!

		if (DEBUGCHECKS)
			if (ok@)
				ok@ "IOFileClose: failed to close (%i)\n" KeCrash
			end
		end
	end
end

fn (ObTypeDeleteFunction) IOFileDeleteObject { object -- }
	auto ok
	0 ok!

	auto fcb
	object@ IOFile_FileControlBlock + @ fcb!

	auto dispatchtable
	fcb@ IOFileControlBlock_DispatchTable + @ dispatchtable!

	auto deletefunc
	dispatchtable@ IODispatchTable_DeleteObject + @ deletefunc!

	if (deletefunc@)
		object@ // object
		deletefunc@ IODispatchDeleteObjectFunction ok!

		if (DEBUGCHECKS)
			if (ok@)
				ok@ "IOFileDelete: failed to delete (%i)\n" KeCrash
			end
		end
	end

	if (object@ IOFile_OpenedPath + @)
		object@ IOFile_OpenedPath + @ MmFree
	end
end

fn IOFileGetFileControlBlock { fileobject -- fcb }
	fileobject@ IOFile_FileControlBlock + @ fcb!
end

fn IOFileInformationQueryObject { fileobject query -- ok }
	0 ok!

	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	fcb@ IOFileControlBlock_SizeInBytes + @ query@ OSFileInformation_Size + !
	fcb@ IOFileControlBlock_FileType + @ query@ OSFileInformation_Type + !

	fcb@ IOFileControlBlock_AccessTime + KeTime_SecPart + @
	query@ OSFileInformation_ATimeSecPart + !

	fcb@ IOFileControlBlock_AccessTime + KeTime_MsPart + @
	query@ OSFileInformation_ATimeMsPart + !

	fcb@ IOFileControlBlock_ModifyTime + KeTime_SecPart + @
	query@ OSFileInformation_MTimeSecPart + !

	fcb@ IOFileControlBlock_ModifyTime + KeTime_MsPart + @
	query@ OSFileInformation_MTimeMsPart + !

	fcb@ IOFileControlBlock_ChangeTime + KeTime_SecPart + @
	query@ OSFileInformation_CTimeSecPart + !

	fcb@ IOFileControlBlock_ChangeTime + KeTime_MsPart + @
	query@ OSFileInformation_CTimeMsPart + !
end

fn IOFileInformationQuery { filehandle query -- ok }
	auto fileobject

	IOFileTypeObject@ // type
	filehandle@ // handle
	ObObjectReferenceByHandle ok! fileobject! drop

	if (ok@)
		return
	end

	fileobject@ // fileobject
	query@ // query
	IOFileInformationQueryObject ok!

	fileobject@ ObObjectDereferenceByPointer drop
end