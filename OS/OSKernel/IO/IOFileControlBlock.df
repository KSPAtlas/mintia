#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/Security.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

fn IOFileControlBlockInitialize { dispatchtable devobj filetype flags fcb -- ok }
	devobj@ fcb@ IOFileControlBlock_DeviceObject + !
	filetype@ fcb@ IOFileControlBlock_FileType + !

	flags@ fcb@ IOFileControlBlock_Flags + !
	0 fcb@ IOFileControlBlock_CacheInfoBlock + !
	0 fcb@ IOFileControlBlock_References + !
	0 fcb@ IOFileControlBlock_SizeInBytes + !
	dispatchtable@ fcb@ IOFileControlBlock_DispatchTable + !
	0 fcb@ IOFileControlBlock_FSContext + !
	0 fcb@ IOFileControlBlock_Mount + !
	0 fcb@ IOFileControlBlock_Busy + !
	0 fcb@ IOFileControlBlock_ParseCount + !

	"FCBRwLock" // name
	fcb@ IOFileControlBlock_RwLock + // rwlock
	ExRwLockInitialize ok!

	if (ok@)
		"IOFileControlBlockCreate: rwlock initialization failed\n" KeCrash
	end

	fcb@ IOFileControlBlock_AccessTime + // ptr
	KeTime_SIZEOF // size
	0 // word
	memset

	fcb@ IOFileControlBlock_ModifyTime + // ptr
	KeTime_SIZEOF // size
	0 // word
	memset

	fcb@ IOFileControlBlock_ChangeTime + // ptr
	KeTime_SIZEOF // size
	0 // word
	memset
end

fn IOFileControlBlockCreate { dispatchtable devobj filetype flags -- fcb ok }
	IOFileControlBlock_SIZEOF // bytes
	'IOFC' // tag
	MmAllocWithTag ok! fcb!

	if (ok@)
		return
	end

	dispatchtable@ // dispatchtable
	devobj@ // devobj
	filetype@ // filetype
	flags@ // flags
	fcb@ // fcb
	IOFileControlBlockInitialize ok!
end

fn IOFileControlBlockDelete { writeout fcb -- }
	auto cacheblock
	fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

	if (cacheblock@)
		if (writeout@ -1 ==)
			"IOFileControlBlockDelete: didn't expect a cacheblock\n" KeCrash
		end

		auto ok

		writeout@ // writeout
		cacheblock@ // cacheblock
		IOCacheInfoBlockDestroy ok!

		if (ok@)
			"IOFileControlBlockDelete: failed to destroy cacheblock\n" KeCrash
		end
	end

	fcb@ MmFree
end

fn IOFileControlBlockLock { fcb -- ok }
	1 // alertable
	0 // nowait
	fcb@ IOFileControlBlock_RwLock + // rwlock
	ExRwLockAcquireExclusive ok!
end

fn IOFileControlBlockLockShared { fcb -- ok }
	1 // alertable
	0 // nowait
	0 // canstarve
	fcb@ IOFileControlBlock_RwLock + // rwlock
	ExRwLockAcquireShared ok!
end

fn IOFileControlBlockTryLock { fcb -- ok }
	0 // alertable
	1 // nowait
	fcb@ IOFileControlBlock_RwLock + // rwlock
	ExRwLockAcquireExclusive ok!

	if (ok@ 0 s<)
		0 ok!
	end
end

fn IOFileControlBlockTryLockShared { fcb -- ok }
	0 // alertable
	1 // nowait
	0 // canstarve
	fcb@ IOFileControlBlock_RwLock + // rwlock
	ExRwLockAcquireShared ok!

	if (ok@ 0 s<)
		0 ok!
	end
end

fn IOFileControlBlockUnlock { fcb -- }
	fcb@ IOFileControlBlock_RwLock + ExRwLockRelease
end

fn IOFileControlBlockReference { fcb -- oldcount }
	// should be called by filesystem driver in its parse method, if needed.

	auto rs
	HALCPUInterruptDisable rs!

	fcb@ IOFileControlBlock_References + @ oldcount!

	oldcount@ 1 + fcb@ IOFileControlBlock_References + !

	rs@ HALCPUInterruptRestore
end

fn IOFileControlBlockDereference { fcb -- oldcount }
	// should be called by filesystem driver in its delete method, if needed.

	auto rs
	HALCPUInterruptDisable rs!

	fcb@ IOFileControlBlock_References + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ 0 ==)
			"IOFileControlBlockDereference: refcount underflow\n" KeCrash
		end
	end

	oldcount@ 1 - fcb@ IOFileControlBlock_References + !

	rs@ HALCPUInterruptRestore
end

// millions of getters and setters so we don't break every driver whenever we
// change the struct

fn IOFileControlBlockGetReferences { fcb -- references }
	fcb@ IOFileControlBlock_References + @ references!
end

fn IOFileControlBlockGetContext { fcb -- context }
	fcb@ IOFileControlBlock_FSContext + @ context!
end

fn IOFileControlBlockSetContext { context fcb -- }
	context@ fcb@ IOFileControlBlock_FSContext + !
end

fn IOFileControlBlockGetMount { fcb -- mount }
	fcb@ IOFileControlBlock_DeviceObject + @ mount!
end

fn IOFileControlBlockGetDeviceObject { fcb -- devobj }
	fcb@ IOFileControlBlock_DeviceObject + @ devobj!
end

fn IOFileControlBlockGetType { fcb -- filetype }
	fcb@ IOFileControlBlock_FileType + @ filetype!
end

fn IOFileControlBlockGetSize { fcb -- size }
	fcb@ IOFileControlBlock_SizeInBytes + @ size!
end

fn IOFileControlBlockSetSize { size fcb -- }
	size@ fcb@ IOFileControlBlock_SizeInBytes + !
end

fn IOFileControlBlockGetCacheInfoBlock { fcb -- cacheblock }
	fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!
end

fn IOFileControlBlockSetAccessTime { time fcb -- }
	time@ KeTime_SecPart + @ fcb@ IOFileControlBlock_AccessTime + KeTime_SecPart + !
	time@ KeTime_MsPart + @ fcb@ IOFileControlBlock_AccessTime + KeTime_MsPart + !
end

fn IOFileControlBlockSetModifyTime { time fcb -- }
	time@ KeTime_SecPart + @ fcb@ IOFileControlBlock_ModifyTime + KeTime_SecPart + !
	time@ KeTime_MsPart + @ fcb@ IOFileControlBlock_ModifyTime + KeTime_MsPart + !
end

fn IOFileControlBlockSetChangeTime { time fcb -- }
	time@ KeTime_SecPart + @ fcb@ IOFileControlBlock_ChangeTime + KeTime_SecPart + !
	time@ KeTime_MsPart + @ fcb@ IOFileControlBlock_ChangeTime + KeTime_MsPart + !
end

fn IOFileControlBlockGetSizeof { -- sizeof }
	IOFileControlBlock_SIZEOF sizeof!
end

fn IOFileControlBlockCacheCheck { wantcaching fcb -- cacheblock ok }
	fcb@ IOFileControlBlockLock ok!

	if (ok@)
		return
	end

	fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

	if (wantcaching@)
		if (fcb@ IOFileControlBlock_UncachedIOCount + @)
			STATUS_IO_TRY_AGAIN_LATER ok!

			fcb@ IOFileControlBlockUnlock

			return
		end

		if (cacheblock@ ~~)
			// still no cache block, plus we want there to be one.
			// therefore, initiate caching

			fcb@ // fcb
			IOCacheInitialize ok! cacheblock!

			if (ok@)
				// failed to initialize caching, do this I/O operation
				// uncached and try again later...

				fcb@ IOFileControlBlockUnlock

				return
			end
		end
	end elseif (cacheblock@)
		if (fcb@ IOFileControlBlock_References + @ 1 ==)
			1 // writeout
			cacheblock@ // cacheblock
			IOCacheInfoBlockDestroy ok!

			if (DEBUGCHECKS)
				if (ok@)
					ok@ "IOFileControlBlockCacheCheck: failed to destroy cacheblock (%i)\n" KeCrash
				end
			end

			0 fcb@ IOFileControlBlock_CacheInfoBlock + !

			0 cacheblock!
		end
	end

	if (cacheblock@ ~~)
		1 fcb@ IOFileControlBlock_UncachedIOCount + +=
	end

	fcb@ IOFileControlBlockUnlock
end