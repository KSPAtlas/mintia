#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/Security.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

fn IOParseCountIncrement { fcb -- mount ok }
	0 ok!

	auto rs
	HALCPUInterruptDisable rs!

	fcb@ IOFileControlBlock_Mount + @ mount!

	if (fcb@ IOFileControlBlock_Busy + @)
		rs@ HALCPUInterruptRestore

		STATUS_IO_TRY_AGAIN_LATER ok!

		return
	end elseif (mount@ ~~)
		rs@ HALCPUInterruptRestore

		STATUS_NOT_A_DIRECTORY ok!

		return
	end

	1 fcb@ IOFileControlBlock_ParseCount + +=

	rs@ HALCPUInterruptRestore
end

fn IOParseCountDecrement { fcb -- }
	auto rs
	HALCPUInterruptDisable rs!

	if (DEBUGCHECKS)
		if (fcb@ IOFileControlBlock_ParseCount + @ 0 ==)
			"IOParseCountDecrement: underflow 1\n" KeCrash
		end
	end

	1 fcb@ IOFileControlBlock_ParseCount + -=

	rs@ HALCPUInterruptRestore
end

fn (ObTypeParseFunction) IOParse { flags path initialobject process -- reparsepath object ok }
	0 reparsepath!

	auto type
	initialobject@ ObHeader_SIZEOF - ObHeader_TypeObject + @ type!

	auto fcb
	auto mount
	auto parsefunc

	if (type@ IODeviceTypeObject@ ==)
		initialobject@ IODevice_FileControlBlock + @ fcb!

		if (path@ gb ~~)
			// no remaining path means we are opening the device itself.
			// create a file object for the device.

			// TODO return an error if this is a disk image proxy,
			// since this would be a bit of a nonsensical operation;
			// caller should open the disk image by its actual
			// path.

			fcb@ IOFileControlBlockReference drop

			flags@ // flags
			process@ PsProcess_OwningUser + @ // owninguser
			ACCESS_OWNER_ALL // permissions
			fcb@ // fcb
			IOFileCreateObject ok! object!

			return
		end else
			// remaining path, call mounted filesystem (if any) to resolve it

			// we only need to do this check here, where we're
			// going from a device object to a file object on the filesystem,
			// and not below, where we're going from a file object to a file object,
			// because the ref operation implied by having that file object precludes
			// nasty stuff from happening anyway.

			fcb@ // fcb
			IOParseCountIncrement ok! mount!

			if (ok@)
				return
			end

			auto rootfcb
			mount@ IOMount_RootFCB + @ rootfcb!

			if (rootfcb@ IOFileControlBlock_FileType + @ OSFILETYPE_DIRECTORY ~=)
				fcb@ IOParseCountDecrement

				STATUS_NOT_A_DIRECTORY ok!

				return
			end

			rootfcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_Parse + @ parsefunc!

			if (parsefunc@ ~~)
				fcb@ IOParseCountDecrement

				STATUS_NOT_A_DIRECTORY ok!

				return
			end

			flags@ // flags
			path@ // path
			rootfcb@ // initialfcb
			process@ // process
			parsefunc@ IODispatchParseFunction ok! object! reparsepath!

			fcb@ IOParseCountDecrement
		end
	end elseif (type@ IOFileTypeObject@ ==)
		// we need to call into the filesystem whether there is remaining path or not,
		// in order to open this new file object correctly

		initialobject@ IOFile_FileControlBlock + @ fcb!

		fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_Parse + @ parsefunc!

		if (DEBUGCHECKS)
			if (parsefunc@ ~~)
				STATUS_NOT_A_DIRECTORY ok!

				return
			end
		end

		flags@ // flags
		path@ // path
		fcb@ // initialfcb
		process@ // process
		parsefunc@ IODispatchParseFunction ok! object! reparsepath!
	end else
		"IOParse: unknown type\n" KeCrash
	end
end