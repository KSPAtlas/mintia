#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/Security.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

fn IOFileSeek { offset handle mode -- newoffset ok }
	if (mode@ 0 ==)
		STATUS_INVALID_ARGUMENT ok!

		return
	end elseif (mode@ OSSEEK_END >)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	auto fileobject

	IOFileTypeObject@ // type
	handle@ // handle
	ObObjectReferenceByHandle ok! fileobject! drop

	if (ok@)
		return
	end

	offset@ // offset
	fileobject@ // fileobject
	mode@ // mode
	IOFileSeekObject ok! newoffset!

	fileobject@ ObObjectDereferenceByPointer drop
end

fn IOFileSeekObject { offset fileobject mode -- newoffset ok }
	0 ok!

	fileobject@ IOFile_Offset + @ newoffset!

	if (mode@ OSSEEK_CUR ==)
		offset@ newoffset +=
	end elseif (mode@ OSSEEK_END ==)
		fileobject@ IOFile_FileControlBlock + @ IOFileControlBlock_SizeInBytes + @ offset@ + newoffset!
	end elseif (mode@ OSSEEK_SET ==)
		offset@ newoffset!
	end else
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	newoffset@ fileobject@ IOFile_Offset + !
end

fn IOFileRead { timeout flags length buffer filehandle -- bytesread ok }
	auto access
	auto fileobject

	IOFileTypeObject@ // type
	filehandle@ // handle
	ObObjectReferenceByHandle ok! fileobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_READ SeCheckAccess ok!

	if (ok@)
		fileobject@ ObObjectDereferenceByPointer drop

		return
	end

	timeout@ // timeout
	flags@ // flags
	length@ // length
	buffer@ // buffer
	fileobject@ // fileobject
	KeProcessCurrent // process
	IOFileReadProcess ok! bytesread!

	fileobject@ ObObjectDereferenceByPointer drop
end

fn IOFileReadProcess { timeout flags length buffer fileobject process -- bytesread ok }
	if (process@ PsSystemProcess@ ==)
		0 process!
	end

	auto fcb
	auto dispatchtable

	fileobject@ IOFile_FileControlBlock + @ fcb!

	if (DEBUGCHECKS)
		if (fcb@ 0 ==)
			"IOFileReadProcess: file object had no FCB\n" KeCrash
		end
	end

	fcb@ IOFileControlBlock_DispatchTable + @ dispatchtable!

	if (DEBUGCHECKS)
		if (dispatchtable@ 0 ==)
			"IOFileReadProcess: file object had no dispatch table\n" KeCrash
		end
	end

	auto readfunc
	dispatchtable@ IODispatchTable_Read + @ readfunc!

	if (readfunc@ ~~)
		STATUS_IO_NOT_SUPPORTED ok!

		return
	end

	if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_DIRECTORY ==)
		STATUS_IS_A_DIRECTORY ok!

		return
	end

	auto cacheblock
	fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

	auto fileflags
	fileobject@ IOFile_Flags + @ fileflags!

	0 bytesread!

	auto lastmode

	if (process@ ~~)
		// no process provided to read into. therefore, we must be reading directly into
		// system space.

		if (buffer@ MMLOWESTSYSTEMADDRESS <)
			"IOFileReadProcess: buffer was not in system space\n" KeCrash
		end

		KERNELMODE lastmode!
	end else
		// do these checks first to make sure no overflow
		if (buffer@ MMHIGHESTUSERADDRESS >)
			STATUS_FORBIDDEN_OPERATION ok!

			return
		end elseif (length@ MMHIGHESTUSERADDRESS >)
			STATUS_FORBIDDEN_OPERATION ok!

			return
		end

		if (buffer@ length@ + MMHIGHESTUSERADDRESS >)
			STATUS_FORBIDDEN_OPERATION ok!

			return
		end

		USERMODE lastmode!
	end

	if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ==)
		// always bypass cache for character devices -- call directly into driver.

		if (DEBUGCHECKS)
			if (cacheblock@)
				"IOFileReadProcess: file was character device, but is cached?\n" KeCrash
			end
		end

		timeout@ // timeout
		flags@ // flags
		0 // kflags
		length@ // length
		fileobject@ IOFile_Offset + @ // offset
		buffer@ // buffer
		fcb@ // fcb
		lastmode@ // lastmode
		readfunc@ IODispatchReadFunction ok! bytesread!

		return
	end

	if (cacheblock@ ~~)
		fileflags@ OSFILEFLAG_NOCACHE & ~~ // wantcaching
		fcb@ // fcb
		IOFileControlBlockCacheCheck ok! cacheblock!

		if (ok@)
			return
		end
	end

	if (cacheblock@ ~~)
		// no caching -- call directly into driver.

		timeout@ // timeout
		flags@ // flags
		0 // kflags
		length@ // length
		fileobject@ IOFile_Offset + @ // offset
		buffer@ // buffer
		fcb@ // fcb
		lastmode@ // lastmode
		readfunc@ IODispatchReadFunction ok! bytesread!

		// the FCB was not unlocked by IOFileCacheCheck because this read was uncached

		fcb@ IOFileControlBlockUnlock
	end else
		// caching -- call into cache read function.

		flags@ // flags
		length@ // length
		fileobject@ IOFile_Offset + @ // offset
		buffer@ // buffer
		fcb@ // fcb
		lastmode@ // lastmode
		IOCacheFileRead ok! bytesread!
	end

	auto rs
	HALCPUInterruptDisable rs!

	bytesread@ fileobject@ IOFile_Offset + +=

	rs@ HALCPUInterruptRestore
end

fn IOFileWrite { flags length buffer filehandle -- byteswritten ok }
	auto access
	auto fileobject

	IOFileTypeObject@ // type
	filehandle@ // handle
	ObObjectReferenceByHandle ok! fileobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		fileobject@ ObObjectDereferenceByPointer drop

		return
	end

	flags@ // flags
	length@ // length
	buffer@ // buffer
	fileobject@ // fileobject
	KeProcessCurrent // process
	IOFileWriteProcess ok! byteswritten!

	fileobject@ ObObjectDereferenceByPointer drop
end

fn IOFileWriteProcess { flags length buffer fileobject process -- byteswritten ok }
	if (process@ PsSystemProcess@ ==)
		0 process!
	end

	auto fcb
	auto dispatchtable

	fileobject@ IOFile_FileControlBlock + @ fcb!

	if (DEBUGCHECKS)
		if (fcb@ 0 ==)
			"IOFileWriteProcess: file object had no FCB\n" KeCrash
		end
	end

	fcb@ IOFileControlBlock_DispatchTable + @ dispatchtable!

	if (DEBUGCHECKS)
		if (dispatchtable@ 0 ==)
			"IOFileWriteProcess: file object had no dispatch table\n" KeCrash
		end
	end

	auto writefunc
	dispatchtable@ IODispatchTable_Write + @ writefunc!

	if (writefunc@ ~~)
		STATUS_IO_NOT_SUPPORTED ok!

		return
	end

	if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_DIRECTORY ==)
		STATUS_IS_A_DIRECTORY ok!

		return
	end

	auto cacheblock
	fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

	auto fileflags
	fileobject@ IOFile_Flags + @ fileflags!

	0 byteswritten!

	auto lastmode

	if (process@ ~~)
		// no process provided to read into. therefore, we must be reading directly into
		// system space.

		if (buffer@ MMLOWESTSYSTEMADDRESS <)
			"IOFileWriteProcess: buffer was not in system space\n" KeCrash
		end

		KERNELMODE lastmode!
	end else
		// do these checks first to make sure no overflow
		if (buffer@ MMHIGHESTUSERADDRESS >)
			STATUS_FORBIDDEN_OPERATION ok!

			return
		end elseif (length@ MMHIGHESTUSERADDRESS >)
			STATUS_FORBIDDEN_OPERATION ok!

			return
		end

		if (buffer@ length@ + MMHIGHESTUSERADDRESS >)
			STATUS_FORBIDDEN_OPERATION ok!

			return
		end

		USERMODE lastmode!
	end

	if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ==)
		// always bypass cache for character devices -- call directly into driver.

		if (DEBUGCHECKS)
			if (cacheblock@)
				"IOFileWriteProcess: file was character device, but is cached?\n" KeCrash
			end
		end

		flags@ // flags
		length@ // length
		fileobject@ IOFile_Offset + @ // offset
		buffer@ // buffer
		fcb@ // fcb
		lastmode@ // lastmode
		writefunc@ IODispatchWriteFunction ok! byteswritten!

		return
	end

	if (cacheblock@ ~~)
		fileflags@ OSFILEFLAG_NOCACHE & ~~ // wantcaching
		fcb@ // fcb
		IOFileControlBlockCacheCheck ok! cacheblock!

		if (ok@)
			return
		end
	end

	if (cacheblock@ ~~)
		// no caching -- call directly into driver.

		flags@ // flags
		length@ // length
		fileobject@ IOFile_Offset + @ // offset
		buffer@ // buffer
		fcb@ // fcb
		lastmode@ // lastmode
		writefunc@ IODispatchWriteFunction ok! byteswritten!

		// the FCB was not unlocked by IOFileCacheCheck because this write was uncached

		fcb@ IOFileControlBlockUnlock
	end else
		// caching -- call into cache write function.

		flags@ // flags
		length@ // length
		fileobject@ IOFile_Offset + @ // offset
		buffer@ // buffer
		fcb@ // fcb
		lastmode@ // lastmode
		IOCacheFileWrite ok! byteswritten!
	end

	auto rs
	HALCPUInterruptDisable rs!

	byteswritten@ fileobject@ IOFile_Offset + +=

	rs@ HALCPUInterruptRestore
end