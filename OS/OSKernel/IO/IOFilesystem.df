#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/Security.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

var IOFilesystemListHead 0
public IOFilesystemListHead

fn IOFilesystemRegister { filesystem -- ok }
	// assumes being run single-threaded (i.e. in a DriverInit routine)...

	0 ok!

	IOFilesystemListHead@ filesystem@ IOFilesystem_Next + !
	filesystem@ IOFilesystemListHead!
end

fn IOMountObject { flags fileobject -- mount ok }
	SYSTEMPERMISSION_MOUNT // permission
	SeUserCurrentGet // user
	SeUserCheckPermission ok!

	if (ok@)
		return
	end

	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	auto filetype
	fcb@ IOFileControlBlock_FileType + @ filetype!

	if (filetype@ OSFILETYPE_CHARDEVICE ==)
		STATUS_IO_NOT_SUPPORTED ok!

		return
	end elseif (filetype@ OSFILETYPE_DIRECTORY ==)
		STATUS_IS_A_DIRECTORY ok!

		return
	end

	auto rs
	HALCPUInterruptDisable rs!

	if (fcb@ IOFileControlBlock_Mount + @)
		rs@ HALCPUInterruptRestore

		STATUS_IO_DEVICE_BUSY ok!

		return
	end elseif (fcb@ IOFileControlBlock_Busy + @)
		rs@ HALCPUInterruptRestore

		STATUS_IO_TRY_AGAIN_LATER ok!

		return
	end elseif (fcb@ IOFileControlBlock_ParseCount + @)
		rs@ HALCPUInterruptRestore

		STATUS_IO_TRY_AGAIN_LATER ok!

		return
	end

	1 fcb@ IOFileControlBlock_Busy + !

	rs@ HALCPUInterruptRestore

	IOMount_SIZEOF // bytes
	'IOMt' // tag
	MmAllocWithTag ok! mount!

	if (ok@)
		0 fcb@ IOFileControlBlock_Busy + !

		return
	end

	0 mount@ IOMount_FSContext + !
	fileobject@ mount@ IOMount_VolumeFile + !
	0 mount@ IOMount_RootFCB + !
	flags@ mount@ IOMount_Flags + !

	auto filesystem
	IOFilesystemListHead@ filesystem!

	while (filesystem@)
		filesystem@ mount@ IOMount_Filesystem + !
		
		auto mountfunc
		filesystem@ IOFilesystem_MountFunction + @ mountfunc!

		if (DEBUGCHECKS)
			if (mountfunc@ ~~)
				"IOMountObject: filesystem had no mount function\n" KeCrash
			end
		end

		mount@ // mount
		mountfunc@ IOFilesystemMountFunction ok!

		if (ok@ 0 ==)
			// successfully mounted as this filesystem

			break
		end

		filesystem@ IOFilesystem_Next + @ filesystem!
	end

	if (ok@)
		// did not successfully mount

		mount@ MmFree

		0 fcb@ IOFileControlBlock_Busy + !

		return
	end

	if (filetype@ OSFILETYPE_FILE ==)
		"IOMountObject: TODO: create loopback object for disk image\n" KeCrash
	end

	mount@ fcb@ IOFileControlBlock_Mount + !

	// bias the reference count of the volume file object
	fileobject@ ObObjectReferenceByPointer drop

	0 fcb@ IOFileControlBlock_Busy + !
end

fn IOUnmountObject { fileobject -- ok }
	SYSTEMPERMISSION_MOUNT // permission
	SeUserCurrentGet // user
	SeUserCheckPermission ok!

	if (ok@)
		return
	end

	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	auto rs
	HALCPUInterruptDisable rs!

	auto mount
	fcb@ IOFileControlBlock_Mount + @ mount!

	if (mount@ ~~)
		rs@ HALCPUInterruptRestore

		STATUS_IO_NOT_SUPPORTED ok!

		return
	end elseif (fcb@ IOFileControlBlock_Busy + @)
		rs@ HALCPUInterruptRestore

		STATUS_IO_TRY_AGAIN_LATER ok!

		return
	end elseif (fcb@ IOFileControlBlock_ParseCount + @)
		rs@ HALCPUInterruptRestore

		STATUS_IO_TRY_AGAIN_LATER ok!

		return
	end

	1 fcb@ IOFileControlBlock_Busy + !

	rs@ HALCPUInterruptRestore

	auto filesystem
	mount@ IOMount_Filesystem + @ filesystem!

	auto unmountfunc
	filesystem@ IOFilesystem_UnmountFunction + @ unmountfunc!

	if (DEBUGCHECKS)
		if (unmountfunc@ ~~)
			"IOUnmountObject: filesystem had no unmount function\n" KeCrash
		end
	end

	mount@ // mount
	unmountfunc@ IOFilesystemUnmountFunction ok!

	if (ok@)
		// failed to unmount

		0 fcb@ IOFileControlBlock_Busy + !

		return
	end

	// unmounted successfully

	0 fcb@ IOFileControlBlock_Mount + !

	mount@ MmFree

	// unbias reference count of volume file object

	fileobject@ ObObjectDereferenceByPointer drop

	if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_FILE ==)
		"IOUnmountObject: TODO: destroy loopback object for disk image\n" KeCrash
	end

	0 fcb@ IOFileControlBlock_Busy + !
end