#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OSStatus.h"

fn MmEvictionWorker { context1 context2 -- }
	PRIORITY_LOWREALTIME // priority
	KeThreadCurrent@ // thread
	KeThreadPrioritySet

	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	// the eviction/swap thread

	while (1)
		auto ok

		KERNELMODE // waitmode
		0 // alertable
		TIMEOUTINFINITE // timeout
		MmEventLowMemory // object
		KeThreadWaitForObject ok!

		if (DEBUGCHECKS)
			if (ok@)
				"MmEvictionWorker: failed to wait on low memory event\n" KeCrash
			end
		end

		"swap ?\n" Printf

		MmEventLowMemory // event
		KeEventReset drop
	end
end