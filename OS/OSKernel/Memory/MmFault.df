#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALInterrupt.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

fn (HALPageFaultHandler) MmPageFault { writing badaddr trapframe -- handled }
	HALCPUInterruptEnable

	auto signal
	0 signal!

	if (badaddr@ PAGESIZE <)
		OSSIGNAL_SEGV signal!
	end else
		if (trapframe@ HALCPUIsUserTrapFrame)
			if (badaddr@ MMHIGHESTUSERADDRESS >)
				OSSIGNAL_SEGV signal!
			end
		end elseif (badaddr@ MMLOWESTSYSTEMADDRESS >=)
			// kernel mode fault on kernel mode address... bad
			-1 signal!
		end
	end

	if (signal@ ~~)
		auto ipl
		IPLAPC KeIPLRaise ipl!

		writing@ // writing
		badaddr@ // badaddr
		trapframe@ // trapframe
		MmSatisfyFault signal!

		ipl@ KeIPLLower
	end

	if (signal@ -1 ==)
		// system error happened
		0 handled!
	end elseif (signal@)
		// generate signal or return from safecopy
		1 handled!

		if (trapframe@ HALCPUIsUserTrapFrame)
			// user mode

			badaddr@ signal@ "MmPageFault: TODO: generate signal sig=%d vaddr=%x\n" KeCrash
		end else
			// kernel mode

			auto abort
			KeThreadCurrent@ KeThread_SafeAccessAbort + @ abort!

			if (abort@ ~~)
				// happened at an unexpected time!
				0 handled!
			end else
				// thought this might happen.
				abort@ trapframe@ HALCPUTrapFrameAbort
			end
		end
	end else
		// handled successfully
		1 handled!
	end

	HALCPUInterruptDisable drop
end

const FAULTACTIONNORMAL 1
const FAULTACTIONDIRTY  2
const FAULTACTIONCOW    3

fn MmSatisfyFault { writing badaddr trapframe -- signal }
	0 signal!

	auto process
	KeProcessCurrent process!

	auto ok
	process@ MmVADListLock ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "MmSatisfyFault: failed to lock VAD list (%i)\n" KeCrash
		end
	end

	auto pdir
	process@ KeProcess_PageDirectory + @ pdir!

	auto pte
	auto phyaddr
	auto flags
	auto pfdbe

	badaddr@ // vaddr
	pdir@ // pagemap
	MmGetVirtualAddress ok! pte! phyaddr! flags!

	if (flags@ PTE_V &)
		if (writing@ ~~)
			// not writing and PTE is valid, nothing to do
			process@ MmVADListUnlock
			return
		end elseif (flags@ PTE_W &)
			// am writing but PTE is writable, nothing to do
			process@ MmVADListUnlock
			return
		end
	end elseif (pte@ PTE_INSWAP &)
		// swap in COW page

		0 // sectionobject
		0 // pte
		pte@ PAGESHIFT >> // pno
		MmAnonymousSwapIn ok! phyaddr! pfdbe!

		if (ok@)
			process@ MmVADListUnlock
			return
		end

		PAGESHIFT phyaddr <<=

		phyaddr@ // phyaddr
		badaddr@ // vaddr
		PTE_V PTE_W | // flags
		process@ KeProcess_ASID + @ // asid
		process@ KeProcess_PageDirectory + @ // pagemap
		MmRemapVirtualAddress ok! drop

		if (ok@)
			phyaddr@ PAGESHIFT >> MmPageFree

			// funny enough, we actually just completely lost the COW page
			// with no good way to keep it around, so the process should just
			// be murdered at this point.

			process@ MmVADListUnlock
			OSSIGNAL_KILL signal!
			return
		end

		process@ MmVADListUnlock
		return
	end

	auto vad
	badaddr@ // vaddr
	0 // length
	0 // mustbestart
	process@ // processobject
	MmVADFind ok! vad!

	if (ok@)
		process@ MmVADListUnlock
		OSSIGNAL_SEGV signal!
		return
	end

	// reuse pte for this
	FAULTACTIONNORMAL pte!

	if (writing@)
		// we are writing...
		if (vad@ MmVAD_PageProtection + @ PAGEACCESS_WRITE & ~~)
			// but the VAD isn't writable...
			if (vad@ MmVAD_PageProtection + @ PAGEACCESS_WRITECOPY & ~~)
				// nor is it COW. this is an access violation
				process@ MmVADListUnlock
				OSSIGNAL_SEGV signal!
				return
			end
			// but is COW.
			FAULTACTIONCOW pte!
		end else
			// and the VAD is writable...
			if (flags@ PTE_W & ~~)
				// but the PTE is readonly (or not yet mapped). we're dirtying something
				FAULTACTIONDIRTY pte!
			end // else -- can't happen, would have returned above
		end
	end

	auto section
	vad@ MmVAD_SectionObject + @ section!

	auto sectoff
	badaddr@ vad@ MmVAD_StartVA + @ - vad@ MmVAD_OffsetInSection + @ + sectoff!

	0 pfdbe!

	if (flags@ PTE_V & ~~)
		// pte was truly invalid and needs faulting in

		if (section@ MmSection_FileObject + @)
			vad@ // vad
			section@ // sectionobject
			sectoff@ // sectionoffset
			badaddr@ // vaddr
			process@ // processobject
			MmSatisfyFileFault ok! phyaddr! pfdbe!
		end else
			vad@ // vad
			section@ // sectionobject
			sectoff@ // sectionoffset
			badaddr@ // vaddr
			process@ // processobject
			MmSatisfyAnonFault ok! phyaddr! pfdbe!
		end

		if (ok@)
			process@ MmVADListUnlock
			OSSIGNAL_KILL signal!
			return
		end
	end elseif (section@ MmSection_NoCommit + @ ~~)
		// pte was valid but something else caused the fault like a dirty

		phyaddr@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!
	end

	auto ipl

	if (pte@ FAULTACTIONDIRTY ==)
		// if there's no file object, this is really just an anon page getting
		// faulted in for the first time with a write, and we shouldn't count
		// that as a "dirty".

		if (section@ MmSection_FileObject + @)
			// pfdbe is zeroed out for things where this isn't applicable like
			// a mapped character device.

			if (pfdbe@)
				IPLDPC KeIPLRaise ipl!

				pfdbe@ IOCachePageModifyFunction ok!

				if (DEBUGCHECKS)
					if (ok@)
						"MmSatisfyFault: failed to modify page\n" KeCrash
					end
				end

				phyaddr@ // phyaddr
				badaddr@ // vaddr
				PTE_V PTE_W | // flags
				process@ KeProcess_ASID + @ // asid
				process@ KeProcess_PageDirectory + @ // pagemap
				MmRemapVirtualAddress ok! pte!

				if (ok@)
					ipl@ KeIPLLower
					process@ MmVADListUnlock
					OSSIGNAL_KILL signal!
					return
				end

				if (pfdbe@ IOPageFrameEntryCache_ModifiedPTE + @)
					pfdbe@ IOPageFrameEntryCache_ModifiedPTE + @ MmMapUnmodifyPTE
				end

				pte@ pfdbe@ IOPageFrameEntryCache_ModifiedPTE + !

				ipl@ KeIPLLower
			end
		end
	end elseif (pte@ FAULTACTIONCOW ==)
		auto cowpfdbe
		auto cowaddr

		0 // sectionobject
		0 // pte
		FREEFIRST // pri
		MmAnonymousPageAlloc ok! cowaddr! cowpfdbe!

		if (ok@)
			process@ MmVADListUnlock
			OSSIGNAL_KILL signal!
			return
		end

		PAGESHIFT cowaddr <<=

		cowaddr@ IDENTITYSPACE | // dest
		phyaddr@ IDENTITYSPACE | // src
		PAGESIZE // size
		memcpy

		cowaddr@ // phyaddr
		badaddr@ // vaddr
		PTE_V PTE_W | // flags
		process@ KeProcess_ASID + @ // asid
		process@ KeProcess_PageDirectory + @ // pagemap
		MmRemapVirtualAddress ok! drop

		if (ok@)
			process@ MmVADListUnlock
			cowaddr@ PAGESHIFT >> MmPageFree
			OSSIGNAL_KILL signal!
			return
		end

		// we COW'd over top of the old page frame and no longer have it
		// mapped, so dereference it
		pfdbe@ MmEvictablePageDereference drop
	end

	if (badaddr@ vad@ MmVAD_FurthestExtentMapped + @ >)
		badaddr@ vad@ MmVAD_FurthestExtentMapped + !
	end

	process@ MmVADListUnlock
end

fn MmSatisfyFileFault { vad sectionobject sectionoffset vaddr processobject -- pfdbe phyaddr ok }
	auto fileobject
	sectionobject@ MmSection_FileObject + @ fileobject!

	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	0 ok!

	auto flags

	if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ==)
		// character device, like a framebuffer or something. will have its
		// own method of mapping.

		auto getpagefunc
		fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_GetPageAddress + @ getpagefunc!

		if (DEBUGCHECKS)
			if (getpagefunc@ ~~)
				"MmSatisfyFileFault: no GetPageAddress\n" KeCrash
			end
		end

		0 pfdbe!

		sectionoffset@ // offset
		fcb@ // fcb
		getpagefunc@ IODispatchGetPageAddressFunction ok! phyaddr!

		if (DEBUGCHECKS)
			if (ok@)
				ok@ "MmSatisfyFileFault: failed to get page address (%i)\n" KeCrash
			end
		end

		PTE_V flags!

		if (vad@ MmVAD_PageProtection + @ PAGEACCESS_WRITE &)
			PTE_W flags |=
		end

		if (vad@ MmVAD_PageProtection + @ PAGEACCESS_NONCACHED &)
			PTE_NC flags |=
		end

		phyaddr@ // phyaddr
		vaddr@ // vaddr
		flags@ // flags
		processobject@ KeProcess_PageDirectory + @ // pagemap
		MmMapVirtualAddress ok!

		if (ok@)
			return
		end

		1 processobject@ PsProcess_MappedPageFrames + +=
	end else
		// real file like a block device (or normal file). call into
		// page cache.

		0 // kflags
		0 // flags
		sectionoffset@ PAGENUMBERMASK & // offset
		fcb@ // fcb
		IOCachePageRead ok! pfdbe! drop

		if (ok@)
			return
		end

		pfdbe@ MmPageFrameEntry_PFN + @ PAGESHIFT << phyaddr!

		phyaddr@ // phyaddr
		vaddr@ // vaddr
		PTE_V // flags
		processobject@ KeProcess_PageDirectory + @ // pagemap
		MmMapVirtualAddress ok!

		if (ok@)
			pfdbe@ MmEvictablePageDereference drop
			return
		end

		1 processobject@ PsProcess_CommittedPageFrames + +=
		1 processobject@ PsProcess_MappedPageFrames + +=
		1 processobject@ PsProcess_PageFaultCount + +=
	end
end

fn MmSatisfyAnonFault { vad sectionobject sectionoffset vaddr processobject -- pfdbe phyaddr ok }
	sectionoffset@ // sectionoffset
	sectionobject@ // sectionobject
	MmSectionPageGet ok! pfdbe! phyaddr!

	if (ok@)
		return
	end

	auto flags
	PTE_V flags!

	if (vad@ MmVAD_PageProtection + @ PAGEACCESS_WRITE &)
		PTE_W flags |=
	end

	phyaddr@ // phyaddr
	vaddr@ // vaddr
	flags@ // flags
	processobject@ KeProcess_PageDirectory + @ // pagemap
	MmMapVirtualAddress ok!

	if (ok@)
		pfdbe@ MmEvictablePageDereference drop
		return
	end

	1 processobject@ PsProcess_MappedPageFrames + +=
	1 processobject@ PsProcess_CommittedPageFrames + +=
	1 processobject@ PsProcess_PageFaultCount + +=
end