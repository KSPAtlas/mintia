#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OSStatus.h"

var MmEvictablePageListHead 0
public MmEvictablePageListHead

var MmEvictablePageListTail 0
public MmEvictablePageListTail

var MmEvictableFastPageListHead 0
public MmEvictableFastPageListHead

var MmEvictableFastPageListTail 0
public MmEvictableFastPageListTail

var MmEvictablePageCount 0
public MmEvictablePageCount

var MmEvictableFastPageCount 0
public MmEvictableFastPageCount

var MmEvictableSlowPageCount 0
public MmEvictableSlowPageCount

fn MmEvictablePageAlloc { flags evictablefuncs priority -- pfdbe pfn ok }
	priority@ // priority
	MmPageAlloc ok! pfn! pfdbe!

	if (ok@)
		return
	end

	1 pfdbe@ MmPageFrameEntryEvictable_References + !

	0 pfdbe@ MmPageFrameEntryEvictable_Next + !
	0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

	flags@ pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + !

	evictablefuncs@ pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + !
end

fn MmEvictablePageInsert { pfdbe -- }
	// assumes IPLDPC or equivalent

	1 MmEvictablePageCount +=

	auto t

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_FAST &)
		1 MmEvictableFastPageCount +=

		MmEvictableFastPageListTail@ t!

		if (t@ ~~)
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !
			0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

			pfdbe@ MmEvictableFastPageListHead!
			pfdbe@ MmEvictableFastPageListTail!
		end else
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !

			t@ pfdbe@ MmPageFrameEntryEvictable_Prev + !
			pfdbe@ t@ MmPageFrameEntryEvictable_Next + !
			pfdbe@ MmEvictableFastPageListTail!
		end
	end else
		1 MmEvictableSlowPageCount +=

		MmEvictablePageListTail@ t!

		if (t@ ~~)
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !
			0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

			pfdbe@ MmEvictablePageListHead!
			pfdbe@ MmEvictablePageListTail!
		end else
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !

			t@ pfdbe@ MmPageFrameEntryEvictable_Prev + !
			pfdbe@ t@ MmPageFrameEntryEvictable_Next + !
			pfdbe@ MmEvictablePageListTail!
		end
	end
end

fn MmEvictablePageDereference { pfdbe -- oldcount }
	auto evictionfuncs
	pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @ evictionfuncs!

	if (DEBUGCHECKS)
		if (evictionfuncs@ ~~)
			"MmEvictablePageDereference: no eviction funcs for page\n" KeCrash
		end
	end

	auto dereffunc
	evictionfuncs@ MmEvictableFunctions_DereferenceFunc + @ dereffunc!

	if (dereffunc@)
		pfdbe@ MmPageFrameEntryEvictable_References + @ // oldcount (not guaranteed to be accurate...)
		pfdbe@ // pfdbe
		dereffunc@ MmDereferenceFunction
	end

	auto rs
	HALCPUInterruptDisable rs!

	pfdbe@ MmPageFrameEntryEvictable_References + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ 0 ==)
			"MmEvictablePageDereference: underflow\n" KeCrash
		end
	end

	oldcount@ 1 - pfdbe@ MmPageFrameEntryEvictable_References + !

	if (oldcount@ 1 ==)
		// no refs now, add to back of evictable page LRU list

		pfdbe@ MmEvictablePageInsert
	end

	rs@ HALCPUInterruptRestore
end

fn MmEvictablePageRemove { pfdbe -- }
	// assumes IPLDPC or equivalent

	1 MmEvictablePageCount -=

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_FAST &)
		1 MmEvictableFastPageCount -=
	end else
		1 MmEvictableSlowPageCount -=
	end

	auto ls
	pfdbe@ MmPageFrameEntryEvictable_Prev + @ ls!

	auto ns
	pfdbe@ MmPageFrameEntryEvictable_Next + @ ns!

	if (ls@)
		ns@ ls@ MmPageFrameEntryEvictable_Next + !
	end else
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_FAST &)
			ns@ MmEvictableFastPageListHead!
		end else
			ns@ MmEvictablePageListHead!
		end
	end

	if (ns@)
		ls@ ns@ MmPageFrameEntryEvictable_Prev + !
	end else
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_FAST &)
			ls@ MmEvictableFastPageListTail!
		end else
			ls@ MmEvictablePageListTail!
		end
	end

	0 pfdbe@ MmPageFrameEntryEvictable_Prev + !
	0 pfdbe@ MmPageFrameEntryEvictable_Next + !
end

fn MmEvictablePageReference { pfdbe -- oldcount }
	auto rs
	HALCPUInterruptDisable rs!

	pfdbe@ MmPageFrameEntryEvictable_References + @ oldcount!

	oldcount@ 1 + pfdbe@ MmPageFrameEntryEvictable_References + !

	if (oldcount@ 0 ==)
		// ref'd, remove from evictable page LRU list

		pfdbe@ MmEvictablePageRemove
	end

	rs@ HALCPUInterruptRestore

	auto evictionfuncs
	pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @ evictionfuncs!

	if (DEBUGCHECKS)
		if (evictionfuncs@ ~~)
			"MmEvictablePageDereference: no eviction funcs for page\n" KeCrash
		end
	end

	auto reffunc
	evictionfuncs@ MmEvictableFunctions_ReferenceFunc + @ reffunc!

	if (reffunc@)
		oldcount@ // oldcount
		pfdbe@ // pfdbe
		reffunc@ MmReferenceFunction
	end
end

// some assumptions:
// fast pages will never drop below IPLDPC while evicting.
// slow pages will never have dropped below IPLDPC if eviction failed.

fn MmEvictFromList { trycount fast listhead -- succeedcount done ok }
	0 done!
	0 ok!
	0 succeedcount!

	auto i
	0 i!

	auto pfdbe
	listhead@@ pfdbe!

	auto ipl

	if (pfdbe@)
		IPLDPC KeIPLRaise ipl!

		auto oldhead
		listhead@@ pfdbe!
		pfdbe@ oldhead!

		while (i@ trycount@ <)
			// check each page if the low memory situation is resolved

			if (pfdbe@ ~~)
				break
			end

			if (MmPageFreeCount@ MmPageFreeCountSufficient@ >=)
				MmEventLowMemory // event
				KeEventReset drop

				ipl@ KeIPLLower

				1 done!

				return
			end

			// we will call an MmEvictionFunction defined by the PFDBE.
			// this function's primary job is to perform whatever actions
			// are necessary to evict the page frame, such as writing it
			// out to the swapfile.

			// another equally important job of the MmEvictionFunction is
			// to perform whatever synchronization is needed between any
			// other parts of the system that make use of this page frame,
			// and its eviction. if this synchronization is not possible
			// for any reason, the function returns 0 in the 'evicted'
			// return value.

			auto evictionfunc
			pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @
			MmEvictableFunctions_EvictionFunc + @ evictionfunc!

			if (DEBUGCHECKS)
				if (evictionfunc@ ~~)
					"MmEvictFromList: no eviction func for page\n" KeCrash
				end
			end

			auto evicted
			pfdbe@ // pfdbe
			evictionfunc@ MmEvictionFunction drop evicted!

			auto npfdbe

			if (evicted@)
				// evicted, free the page

				if (DEBUGCHECKS)
					if (pfdbe@ MmPageFrameEntryEvictable_References + @ 0 ~=)
						pfdbe@ MmPageFrameEntryEvictable_References + @
						"MmEvictFromList: attempt to evict a page with %d references\n" KeCrash
					end
				end

				1 succeedcount +=

				if (fast@)
					pfdbe@ MmPageFrameEntryEvictable_Next + @ npfdbe!

					pfdbe@ MmEvictablePageRemove

					pfdbe@ MmPageFrameEntryEvictable_PFN + @ // pfn
					MmPageFree
				end else
					// slow pages can't be trusted not to have dropped to
					// IPLLOW which would mean anything could have happened
					// to the evictable LRU and the next link is meaningless.

					pfdbe@ MmEvictablePageRemove

					pfdbe@ MmPageFrameEntryEvictable_PFN + @ // pfn
					MmPageFree

					0 oldhead!
					listhead@@ npfdbe!
				end
			end else
				pfdbe@ MmPageFrameEntryEvictable_Next + @ npfdbe!

				// failed to evict, put on MRU end so that we don't try it
				// again for a while

				if (npfdbe@)
					// if there wasn't npfdbe it'd already be on the tail.

					pfdbe@ MmEvictablePageRemove
					pfdbe@ MmEvictablePageInsert
				end
			end

			if (npfdbe@ oldhead@ ==)
				break
			end

			npfdbe@ pfdbe!
			1 i +=
		end

		ipl@ KeIPLLower
	end
end

fn MmEvictSinglePage { canbeslow -- pfdbe ok }
	auto evictionfunc
	auto evicted
	auto ipl

	STATUS_NO_MEMORY ok!

	if (MmEvictableFastPageListHead@)
		IPLDPC KeIPLRaise ipl!

		MmEvictableFastPageListHead@ pfdbe!

		while (pfdbe@)
			pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @
			MmEvictableFunctions_EvictionFunc + @ evictionfunc!

			pfdbe@ // pfdbe
			evictionfunc@ MmEvictionFunction drop evicted!

			if (evicted@ ~~)
				pfdbe@ MmPageFrameEntryFree_Next + @ pfdbe!
				continue
			end

			// evicted, yoink

			if (DEBUGCHECKS)
				if (pfdbe@ MmPageFrameEntryEvictable_References + @ 0 ~=)
					pfdbe@ MmPageFrameEntryEvictable_References + @
					"MmEvictSinglePage: attempt to evict a page with %d references\n" KeCrash
				end
			end

			pfdbe@ MmEvictablePageRemove

			ipl@ KeIPLLower

			0 ok!

			return
		end

		ipl@ KeIPLLower
	end

	if (canbeslow@)
		// can try the slow list

		if (MmEvictablePageListHead@)
			IPLDPC KeIPLRaise ipl!

			MmEvictablePageListHead@ pfdbe!

			while (pfdbe@)
				pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @
				MmEvictableFunctions_EvictionFunc + @ evictionfunc!

				pfdbe@ // pfdbe
				evictionfunc@ MmEvictionFunction drop evicted!

				if (evicted@ ~~)
					pfdbe@ MmPageFrameEntryFree_Next + @ pfdbe!
					continue
				end

				// evicted, yoink

				if (DEBUGCHECKS)
					if (pfdbe@ MmPageFrameEntryEvictable_References + @ 0 ~=)
						pfdbe@ MmPageFrameEntryEvictable_References + @
						"MmEvictSinglePage: attempt to evict a page with %d references 2\n" KeCrash
					end
				end

				pfdbe@ MmEvictablePageRemove

				ipl@ KeIPLLower

				0 ok!

				return
			end

			ipl@ KeIPLLower
		end
	end
end