#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/Kernel.h"

#include "<inc>/Mem.h"

#include "<ll>/OSDLL/OSStatus.h"

var MemBlockUsedListHead 0

fn MemPageAlloc { -- pfdbe pfn ok }
	0 ok!

	if (DEBUGCHECKS)
		if (MemInited@ ~~)
			"MemPageAlloc: used before MemInit called\n" KeCrash
		end
	end

	auto ipl
	IPLDPC KeIPLRaise ipl!

	MemPageFreeListHead@ pfdbe!

	if (pfdbe@)
		pfdbe@ PFDBE_PFN + @ pfn!
		pfdbe@ PFDBEFree_Next + @ MemPageFreeListHead!
		0 pfdbe@ PFDBEFree_Next + !

		1 MemPageFreeCount -=
	end else
		STATUS_NO_MEMORY ok!
	end

	ipl@ KeIPLLower
end

fn MemHeapCheck { -- }
	if (DEBUGCHECKS ~~)
		"MemHeapCheck: wasn't compiled with DEBUGCHECKS\n" KeCrash
	end

	auto i
	0 i!

	auto base
	MemHeap@ base!

	auto sz
	1 BUCKETSPO2START << sz!

	while (i@ BUCKETS <)
		i@ "checking [%d]MemBuckets\n" Printf

		auto block
		[i@]MemBuckets@ block!

		if (block@)
			if (block@ MemBlock_Prev + @)
				block@ MemBlock_Prev + @ "!!! head had a prev 0x%08x\n" Printf
			end
		end

		while (block@)
			if (block@ 0x3 &)
				block@ "!!!! unaligned block ptr 0x%08x\n" Printf
				break
			end

			if (block@ MemBlock_Magic + @ MEMBLOCKMAGIC ~=)
				"!!!! bad magic:\n" Printf
				block@ MemDumpBlockInfoHdr
				break
			end

			if (block@ MemBlock_Tag + @ MEMBLOCKFREE ~=)
				"!!! bad tag:\n" Printf
				block@ MemDumpBlockInfoHdr
			end

			if (block@ MemBlock_BucketIndex + @ i@ ~=)
				"!!! bad bucketindex:\n" Printf
				block@ MemDumpBlockInfoHdr
			end

			auto buddy
			block@ base@ - sz@ ^ base@ + buddy!

			if (buddy@ MemBlock_Magic + @ MEMBLOCKMAGIC ~=)
				"!!! bad buddy. main guy:\n" Printf
				block@ MemDumpBlockInfoHdr
				"buddy:\n" Printf
				buddy@ MemDumpBlockInfoHdr
			end else
				if (buddy@ MemBlock_Tag + @ MEMBLOCKFREE ==)
					// check if buddy is on the proper list

					auto blockb
					[buddy@ MemBlock_BucketIndex + @]MemBuckets@ blockb!

					auto found
					0 found!

					while (blockb@)
						if (blockb@ buddy@ ==)
							1 found!
							break
						end

						blockb@ MemBlock_Next + @ blockb!
					end

					if (found@ ~~)
						"!!! buddy was free but not on free list:\n" Printf
						buddy@ MemDumpBlockInfoHdr
					end
				end
			end

			auto nextblock
			block@ MemBlock_Next + @ nextblock!

			if (nextblock@)
				if (nextblock@ 0x3 & ~~)
					if (nextblock@ MemBlock_Prev + @ block@ ~=)
						"!!! prev didn't match:\n" Printf
						block@ MemDumpBlockInfoHdr
					end
				end
			end

			nextblock@ block!
		end

		1 sz <<=
		1 i +=
	end

	"checking used block list\n" Printf

	MemBlockUsedListHead@ block!

	if (block@)
		if (block@ MemBlock_Prev + @)
			block@ MemBlock_Prev + @ "!!! head had a prev 0x%08x\n" Printf
		end
	end

	while (block@)
		block@ "checking 0x%08x\n" Printf

		if (block@ 0x3 &)
			block@ "!!!! unaligned block ptr 0x%08x\n" Printf
			break
		end

		if (block@ MemBlock_Magic + @ MEMBLOCKMAGIC ~=)
			"!!!! bad magic:\n" Printf
			block@ MemDumpBlockInfoHdr
			break
		end

		1 block@ MemBlock_BucketIndex + @ BUCKETSPO2START + << sz!

		block@ base@ - sz@ ^ base@ + buddy!

		if (buddy@ MemBlock_Magic + @ MEMBLOCKMAGIC ~=)
			"!!! bad buddy. main guy:\n" Printf
			block@ MemDumpBlockInfoHdr
			"buddy:\n" Printf
			buddy@ MemDumpBlockInfoHdr
		end else
			if (buddy@ MemBlock_Tag + @ MEMBLOCKFREE ==)
				// check if buddy is on the proper list

				[buddy@ MemBlock_BucketIndex + @]MemBuckets@ blockb!

				0 found!

				while (blockb@)
					if (blockb@ buddy@ ==)
						1 found!
						break
					end

					blockb@ MemBlock_Next + @ blockb!
				end

				if (found@ ~~)
					"!!! buddy was free but not on free list:\n" Printf
					buddy@ MemDumpBlockInfoHdr
				end
			end
		end

		block@ MemBlock_Next + @ nextblock!

		if (nextblock@)
			if (nextblock@ 0x3 & ~~)
				if (nextblock@ MemBlock_Prev + @ block@ ~=)
					"!!! prev didn't match:\n" Printf
					block@ MemDumpBlockInfoHdr
				end
			end
		end

		nextblock@ block!
	end
end

fn MemDumpBlockInfoHdr { block -- }
	block@ "header @ %08x\n" Printf

	block@ MemBlock_Magic + @ "  magic=%08x\n" Printf
	block@ MemBlock_Next + @ "  next=%08x\n" Printf
	block@ MemBlock_Prev + @ "  prev=%08x\n" Printf
	block@ MemBlock_BucketIndex + @ dup BUCKETSPO2START + 1 swap << swap "  bucketindex=%d (%d bytes)\n" Printf
	block@ MemBlock_Tag + @ "  tag=%08x\n" Printf
end

fn MemDumpBlockInfo { block -- }
	block@ MemBlock_SIZEOF - MemDumpBlockInfoHdr
end

fn MemDumpBuckets { -- }
	auto i
	0 i!

	auto sz
	1 BUCKETSPO2START << sz!

	while (i@ BUCKETS <)
		sz@ "[%d]: " Printf

		auto ptr
		[i@]MemBuckets@ ptr!

		while (ptr@)
			auto bsz
			1 ptr@ MemBlock_BucketIndex + @ BUCKETSPO2START + << bsz!

			bsz@ bsz@ ptr@ + 0x50000 - ptr@ 0x50000 - "%x-%x (%d) | " Printf

			ptr@ MemBlock_Next + @ ptr!
		end

		'\n' Putc

		1 sz <<=
		1 i +=
	end
end

fn MemAllocWithTag { bytes tag -- ptr ok }
	if (DEBUGCHECKS)
		if (MemInited@ ~~)
			"MemAllocWithTag: used before MemInit called\n" KeCrash
		end
	end

	MemBlock_SIZEOF bytes +=

	auto sz
	1 BUCKETSPO2START << sz!

	auto i
	0 i!

	auto dist
	-1 dist!

	STATUS_NO_MEMORY ok!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	while (i@ BUCKETS <)
		if (bytes@ sz@ <=)
			if (dist@ -1 ==)
				i@ dist!
			end

			[i@]MemBuckets@ ptr!

			if (ptr@)
				auto ts
				sz@ ts!

				auto pt
				ptr@ MemBlock_Next + @ pt!

				pt@ [i@]MemBuckets!

				if (pt@)
					0 pt@ MemBlock_Prev + !
				end

				while (i@ dist@ >)
					1 i -=
					1 ts >>=

					auto tp
					ptr@ ts@ + tp!

					MEMBLOCKMAGIC tp@ MemBlock_Magic + !
					i@ tp@ MemBlock_BucketIndex + !
					MEMBLOCKFREE tp@ MemBlock_Tag + !
					0 tp@ MemBlock_Prev + !

					[i@]MemBuckets@ pt!

					if (pt@)
						tp@ pt@ MemBlock_Prev + !
					end

					pt@ tp@ MemBlock_Next + !
					tp@ [i@]MemBuckets!
				end

				MEMBLOCKMAGIC ptr@ MemBlock_Magic + !
				i@ ptr@ MemBlock_BucketIndex + !
				tag@ ptr@ MemBlock_Tag + !

				if (DEBUGCHECKS)
					// add to used block list

					0 ptr@ MemBlock_Prev + !

					MemBlockUsedListHead@ ts!

					if (ts@)
						ptr@ ts@ MemBlock_Prev + !
					end

					ptr@ MemBlockUsedListHead!

					ts@ ptr@ MemBlock_Next + !
				end

				0 ok!
				MemBlock_SIZEOF ptr +=

				sz@ MemHeapBytesFree -=

				break
			end
		end

		1 sz <<=
		1 i +=
	end

	ipl@ KeIPLLower
end

fn MemFree { ptr -- }
	if (DEBUGCHECKS)
		if (MemInited@ ~~)
			"MemFree: used before MemInit called\n" KeCrash
		end

		if (ptr@ -1 ==)
			"MemFree: tried to free -1 pointer\n" KeCrash
		end
	end

	if (ptr@ ~~)
		"MemFree: tried to free null pointer\n" KeCrash
	end

	auto ipl
	IPLDPC KeIPLRaise ipl!

	MemBlock_SIZEOF ptr -=

	if (ptr@ MemBlock_Magic + @ MEMBLOCKMAGIC ~=)
		ptr@ "MemFree: tried to free corrupted heap block (0x%08x)\n" KeCrash
	end

	if (ptr@ MemBlock_Tag + @ MEMBLOCKFREE ==)
		ptr@ "MemFree: tried to free heap block that was free (0x%08x)\n" KeCrash
	end

	if (DEBUGCHECKS)
		// remove from used block list

		ptr@ MemBlock_Prev + @ l!

		ptr@ MemBlock_Next + @ n!

		if (l@)
			n@ l@ MemBlock_Next + !
		end else
			// no last block means was list head

			n@ MemBlockUsedListHead!
		end

		if (n@)
			l@ n@ MemBlock_Prev + !
		end
	end

	auto hpsz
	MemHeapSize@ hpsz!

	auto base
	MemHeap@ base!

	auto i
	ptr@ MemBlock_BucketIndex + @ i!

	auto sz
	1 ptr@ MemBlock_BucketIndex + @ BUCKETSPO2START + << sz!

	sz@ MemHeapBytesFree +=

	while (i@ BUCKETS 1 - <)
		if (sz@ hpsz@ >=)
			break
		end

		auto buddy
		ptr@ base@ - sz@ ^ base@ + buddy!

		if (buddy@ MemBlock_Magic + @ MEMBLOCKMAGIC ~=)
			buddy@ "MemFree: corrupted buddy (0x%08x)\n" KeCrash
		end

		if (buddy@ MemBlock_Tag + @ MEMBLOCKFREE ==)
			if (DEBUGCHECKS)
				if (buddy@ MemBlock_BucketIndex + @ i@ ~=)
					buddy@ "MemFree: buddy has bad bucket index (0x%08x)\n" KeCrash
				end
			end

			// coalesce

			// remove buddy, who is free, from the bucket he's listed on

			auto l
			buddy@ MemBlock_Prev + @ l!

			auto n
			buddy@ MemBlock_Next + @ n!

			if (l@)
				n@ l@ MemBlock_Next + !
			end else
				// no last block means buddy was the bucket list head
				n@ [i@]MemBuckets!
			end

			if (n@)
				l@ n@ MemBlock_Prev + !
			end

			if (buddy@ ptr@ >)
				0 buddy@ MemBlock_Magic + !
				i@ 1 + ptr@ MemBlock_BucketIndex + !
			end else
				0 ptr@ MemBlock_Magic + !
				i@ 1 + buddy@ MemBlock_BucketIndex + !
				buddy@ ptr!
			end
		end else
			// buddy's not free, can't do any more coalescing

			break
		end

		1 sz <<=
		1 i +=
	end

	MEMBLOCKFREE ptr@ MemBlock_Tag + !

	auto pt
	[i@]MemBuckets@ pt!

	if (pt@)
		ptr@ pt@ MemBlock_Prev + !
	end

	pt@ ptr@ MemBlock_Next + !

	0 ptr@ MemBlock_Prev + !

	ptr@ [i@]MemBuckets!

	ipl@ KeIPLLower
end