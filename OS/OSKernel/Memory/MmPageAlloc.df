#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OSStatus.h"

fn MmPageGet { priority threshold -- pfdbe pfn ok }
	0 ok!

	if (DEBUGCHECKS)
		if (MmInited@ ~~)
			"MmPageGet: used before MmInit called\n" KeCrash
		end
	end

	0xFF priority &=

	auto rs

	if (priority@ FREEFIRST ==)
		// attempt to get a page from the free list first.
		// if its empty, try to get one from the zero list.

		HALCPUInterruptDisable rs!

		if (MmPageFreeCount@ threshold@ <=)
			rs@ HALCPUInterruptRestore

			STATUS_NO_MEMORY ok!

			return
		end

		MmPageFreeListHead@ pfdbe!

		if (pfdbe@)
			pfdbe@ MmPageFrameEntry_PFN + @ pfn!
			pfdbe@ MmPageFrameEntryFree_Next + @ MmPageFreeListHead!
			0 pfdbe@ MmPageFrameEntryFree_Next + !

			1 MmPageFreeCount -=
		end else
			// resort to a zero page

			MmPageZeroListHead@ pfdbe!

			if (pfdbe@)
				pfdbe@ MmPageFrameEntry_PFN + @ pfn!
				pfdbe@ MmPageFrameEntryFree_Next + @ MmPageZeroListHead!
				0 pfdbe@ MmPageFrameEntryFree_Next + !

				1 MmPageFreeCount -=
			end else
				STATUS_NO_MEMORY ok!
			end
		end

		rs@ HALCPUInterruptRestore

		return
	end elseif (priority@ ZEROMUST ==)
		// attempt to get one from the zero list first.
		// if its empty, get one from the free list, and zero it out.

		HALCPUInterruptDisable rs!

		if (MmPageFreeCount@ threshold@ <=)
			rs@ HALCPUInterruptRestore

			STATUS_NO_MEMORY ok!

			return
		end

		MmPageZeroListHead@ pfdbe!

		if (pfdbe@)
			pfdbe@ MmPageFrameEntry_PFN + @ pfn!
			pfdbe@ MmPageFrameEntryFree_Next + @ MmPageZeroListHead!
			0 pfdbe@ MmPageFrameEntryFree_Next + !

			1 MmPageFreeCount -=

			rs@ HALCPUInterruptRestore

			return
		end else
			// resort to a free page

			MmPageFreeListHead@ pfdbe!

			if (pfdbe@)
				pfdbe@ MmPageFrameEntry_PFN + @ pfn!
				pfdbe@ MmPageFrameEntryFree_Next + @ MmPageFreeListHead!
				0 pfdbe@ MmPageFrameEntryFree_Next + !

				1 MmPageFreeCount -=

				rs@ HALCPUInterruptRestore

				// zero the free page out

				pfn@ PAGESHIFT << IDENTITYSPACE |
				PAGESIZE
				0
				memset

				return
			end else
				rs@ HALCPUInterruptRestore

				STATUS_NO_MEMORY ok!

				return
			end
		end

		if (DEBUGCHECKS)
			"MmPageGet: unreachable\n" KeCrash
		end
	end else
		priority@ "MmPageGet: unknown priority %d\n" KeCrash
	end
end

fn MmPageAlloc { priority -- pfdbe pfn ok }
	0 ok!

	if (DEBUGCHECKS)
		if (MmInited@ ~~)
			"MmPageAlloc: used before MmInit called\n" KeCrash
		end
	end

	auto blockon
	auto alertable
	auto tries

	if (priority@ MUSTSUCCEED &)
		// CANBLOCK page allocations have different wait rules
		// if MUSTSUCCEED is also specified:

		0 blockon! // can dip into MUSTSUCCEED page pool
		0 alertable! // wait can't be interrupted
		-1 tries! // try forever for a page
	end elseif (priority@ MUSTSUCCEEDL2 &)
		MMMUSTSUCCEEDL2PAGES blockon! // can dip into MUSTSUCCEEDL2 page pool
		0 alertable! // wait can't be interrupted
		-1 tries! // try forever for a page
	end else
		// normal rules:

		if (priority@ CACHEALLOC &)
			MmPageFreeCountLow@ blockon! // don't go below low watermark
		end else
			MMMUSTSUCCEEDPAGES blockon! // don't dip into MUSTSUCCEED page pool
		end

		1 alertable! // wait can be interrupted
		20 tries! // try 20 times to get a page

		// reasoning:
		// this costs little, helps prevent soft deadlock, and makes mistaken
		// failure very unlikely, without resorting to hamfisted techniques
		// that would add more overhead to page allocation than they're worth.

		// each try is 250ms, so there's 20 * 250ms = 5 seconds until we admit
		// defeat.

		// XXX actually this seems gross. review later after memory allocation
		// behavior is better understood.
	end

	while (1)
		priority@ // priority
		blockon@ // threshold
		MmPageGet ok! pfn! pfdbe!

		auto ipl

		if (ok@ ~~)
			if (MmPageFreeCount@ MmPageFreeCountLow@ <)
				IPLDPC KeIPLRaise ipl!

				// recheck at IPLDPC -- this seemingly redundant check
				// minimizes overhead in the more common case

				if (MmPageFreeCount@ MmPageFreeCountLow@ <)
					0 // priboost
					MmEventLowMemory // event
					KeEventSignal ok!

					if (DEBUGCHECKS)
						if (ok@)
							ok@ "MmPageAlloc: couldn't signal event\n" KeCrash
						end
					end
				end

				ipl@ KeIPLLower
			end

			return
		end

		if (DEBUGCHECKS)
			if (ok@ STATUS_NO_MEMORY ~=)
				ok@ "MmPageAlloc: MmPageGet returned weird status (%i)\n" KeCrash
			end
		end

		if (priority@ CANBLOCK &)
			1 // canbeslow
			MmEvictSinglePage ok! pfdbe!

			if (ok@ ~~)
				pfdbe@ MmPageFrameEntry_PFN + @ pfn!

				return
			end

			KERNELMODE // waitmode
			alertable@ // alertable
			250 // timeout
			MmEventPageAvailable // object
			KeThreadWaitForObject ok!

			if (ok@ STATUS_WAIT_TIMEOUT ==)
				if (tries@ -1 ~=)
					1 tries -=

					if (tries@ ~~)
						STATUS_NO_MEMORY ok!

						return
					end
				end
			end elseif (ok@)
				return
			end
		end else
			0 // canbeslow
			MmEvictSinglePage ok! pfdbe!

			if (ok@ ~~)
				pfdbe@ MmPageFrameEntry_PFN + @ pfn!
			end

			return
		end
	end
end

fn MmPageFree { pfn -- }
	// insert a page frame into the free list

	auto pfdbe

	pfn@ MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

	auto rs
	HALCPUInterruptDisable rs!

	MmPageFreeListHead@ pfdbe@ MmPageFrameEntryFree_Next + !
	pfdbe@ MmPageFreeListHead!

	1 MmPageFreeCount +=

	rs@ HALCPUInterruptRestore

	auto ok

	0 // priboost
	MmEventPageAvailable // event
	KeEventSignal ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "MmPageFree: couldn't signal event\n" KeCrash
		end
	end
end