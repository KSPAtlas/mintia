#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

const MMSECTIONMULTILEVELTHRESHOLD 0x800000

fn (ObTypeDeleteFunction) MmSectionObjectDelete { object -- }
	// if anonymous, free all associated page frames (in main memory and in swap).
	// if memory-mapped file, dereference the file object.

	auto fileobject
	object@ MmSection_FileObject + @ fileobject!

	auto anonsize
	object@ MmSection_AnonSize + @ anonsize!

	if (fileobject@)
		// file-backed

		if (DEBUGCHECKS)
			if (anonsize@)
				"MmSectionObjectDelete: file-backed section had anonsize\n" KeCrash
			end
		end

		fileobject@ ObObjectDereferenceByPointer drop
	end else
		// anonymous

		if (DEBUGCHECKS)
			if (anonsize@ ~~)
				"MmSectionObjectDelete: anonymous section had no anonsize\n" KeCrash
			end
		end

		auto quotablock
		object@ MmSection_QuotaBlock + @ quotablock!

		anonsize@ // charge
		quotablock@ // quota
		MmQuotaBlockUnchargeVM

		quotablock@ MmQuotaBlockDereference

		// walk the prototype page tables and free all pages, in swap or in
		// RAM. then free the prototype page tables.

		auto multilevel
		anonsize@ MMSECTIONMULTILEVELTHRESHOLD >= multilevel!

		auto ppt
		object@ MmSection_AnonPrototypePageTable + @ ppt!

		if (ppt@)
			auto ppte

			auto count

			if (multilevel@)
				PAGESIZE 2 >> count!

				auto ppde

				// iterate top level table
				while (count@)
					ppt@@ ppde!

					if (ppde@)
						auto j
						PAGESIZE 2 >> j!

						// iterate bottom level table

						while (j@)
							ppde@@ ppte!

							if (ppte@ PTE_V &)
								// free in RAM
								ppte@ PAGESHIFT >> MmPageFree
							end elseif (ppte@ PTE_INSWAP &)
								// free in swap
								ppte@ PAGESHIFT >> IOSwapPageFree
							end

							4 ppde +=
							1 j -=
						end
					end

					4 ppt +=
					1 count -=
				end
			end else
				anonsize@ PAGESHIFT >> count!

				while (count@)
					ppt@@ ppte!

					if (ppte@ PTE_V &)
						// free in RAM
						ppte@ PAGESHIFT >> MmPageFree
					end elseif (ppte@ PTE_INSWAP &)
						// free in swap
						ppte@ PAGESHIFT >> IOSwapPageFree
					end

					4 ppt +=
					1 count -=
				end
			end

			object@ MmSection_AnonPrototypePageTable + @ MmFree
		end
	end
end

fn MmSectionPPTLock { sectionobject -- ok }
	KERNELMODE // waitmode
	1 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	sectionobject@ MmSection_PrototypePageTableMutex + // object
	KeThreadWaitForObject ok!
end

fn MmSectionPPTTryLock { sectionobject -- ok }
	KERNELMODE // waitmode
	0 // alertable
	0 // timeout
	sectionobject@ MmSection_PrototypePageTableMutex + // object
	KeThreadWaitForObject ok!
end

fn MmSectionPPTUnlock { sectionobject -- }
	sectionobject@ MmSection_PrototypePageTableMutex + KeMutexRelease drop
end

fn MmSectionObjectCreateObject { pageprotection anonsize fileobject owninguser permissions name -- sectionobject ok }
	auto fcb

	auto quotablock
	KeProcessCurrent PsProcess_QuotaBlock + @ quotablock!

	if (anonsize@)
		if (fileobject@)
			STATUS_INVALID_ARGUMENT ok!

			return
		end

		// round up to next page boundary
		anonsize@ PAGEOFFSETMASK + PAGENUMBERMASK & anonsize!

		if (anonsize@ ~~)
			// overflowed
			STATUS_OVERFLOW ok!

			return
		end

		if (pageprotection@ PAGEACCESS_WRITECOPY &)
			if (pageprotection@ PAGEACCESS_WRITE &)
				STATUS_INVALID_ARGUMENT ok!

				return
			end
		end
	end elseif (fileobject@)
		fileobject@ IOFile_FileControlBlock + @ fcb!

		if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_DIRECTORY ==)
			STATUS_IS_A_DIRECTORY ok!

			return
		end

		if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ==)
			// character devices need a GetPageAddress function to be mappable

			if (fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_GetPageAddress + @ ~~)
				STATUS_IO_NOT_SUPPORTED ok!

				return
			end
		end
	end else
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	name@ // name
	0 // flags
	permissions@ // permissions
	owninguser@ // owninguser
	0 // quotabias
	MmSection_SIZEOF // bodysize
	MmSectionObjectType@ // type
	ObObjectCreate ok! sectionobject!

	if (ok@)
		return
	end

	pageprotection@ sectionobject@ MmSection_PageProtection + !
	fileobject@ sectionobject@ MmSection_FileObject + !
	anonsize@ sectionobject@ MmSection_AnonSize + !
	0 sectionobject@ MmSection_AnonPrototypePageTable + !
	0 sectionobject@ MmSection_NoCommit + !

	"MmSectionPrototypePageTableMutex" // name
	KERNELMODE // mode
	sectionobject@ MmSection_PrototypePageTableMutex + // mutex
	KeMutexInitialize ok!

	if (DEBUGCHECKS)
		if (ok@)
			"MmSectionObjectCreateObject: couldn't initialize PrototypePageTableMutex\n" KeCrash
		end
	end

	if (fileobject@)
		// memory-mapped file. ref the file object and force caching.

		fileobject@ ObObjectReferenceByPointer drop

		if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ~=)
			if (fcb@ IOFileControlBlock_CacheInfoBlock + @ ~~)
				1 // wantcaching
				fcb@ // fcb
				IOFileControlBlockCacheCheck ok! drop

				if (ok@)
					// failed to initialize caching

					sectionobject@ ObObjectDereferenceByPointer drop

					return
				end
			end
		end else
			1 sectionobject@ MmSection_NoCommit + !
		end

		0 sectionobject@ MmSection_QuotaBlock + !
	end else
		quotablock@ sectionobject@ MmSection_QuotaBlock + !

		anonsize@ // charge
		quotablock@ // quotablock
		MmQuotaBlockChargeVM ok!

		if (ok@)
			sectionobject@ ObObjectDereferenceByPointer drop

			return
		end

		quotablock@ MmQuotaBlockReference
	end
end

fn MmSectionObjectCreate { pageprotection anonsize filehandle owninguser permissions name -- sectionhandle ok }
	auto access
	auto fileobject
	0 fileobject!

	if (filehandle@ OSNONE ~=)
		IOFileTypeObject@ // type
		filehandle@ // handle
		ObObjectReferenceByHandle ok! fileobject! access!

		if (ok@)
			return
		end

		access@ // access
		pageprotection@ ACCESS_ALL & // permission
		SeCheckAccess ok!

		if (ok@)
			fileobject@ ObObjectDereferenceByPointer drop

			return
		end
	end

	auto sectionobject

	pageprotection@ // pageprotection
	anonsize@ // anonsize
	fileobject@ // fileobject
	owninguser@ // owninguser
	permissions@ // permissions
	name@ // name
	MmSectionObjectCreateObject ok! sectionobject!

	if (ok@)
		if (filehandle@ -1 ~=)
			fileobject@ ObObjectDereferenceByPointer drop
		end

		return
	end

	1 // nocheck
	ACCESS_ALL // permissions
	sectionobject@ // object
	ObObjectOpen ok! sectionhandle!

	if (filehandle@ OSNONE ~=)
		fileobject@ ObObjectDereferenceByPointer drop
	end

	if (ok@)
		sectionobject@ ObObjectDereferenceByPointer drop

		return
	end
end

table MmAnonymousEvictableFunctions
	pointerof MmAnonymousEvictionFunction // EvictionFunc
	0 // ReferenceFunc
	0 // DereferenceFunc
	0 // ModifyFunc
	0 // Reserved2
	0 // Reserved3
	0 // Reserved4
	0 // Reserved5
endtable
public MmAnonymousEvictableFunctions

fn (MmEvictionFunction) MmAnonymousEvictionFunction { pfdbe -- evicted ok }
	// try our best to swap out this page

	if (DEBUGCHECKS)
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_COW &)
			"MmAnonymousEvictionFunction: tried to swap out COW, should happen in list populator\n" KeCrash
		end
	end

	auto sectionobject
	pfdbe@ MmPageFrameEntryAnonymous_SectionObject + @ sectionobject!

	sectionobject@ MmSectionPPTTryLock ok!

	if (ok@ ~~)
		// failed to lock PPT

		0 evicted!
		0 ok!

		return
	end

	IPLLOW KeIPLLower

	// XXX we CAN'T return 0 in evicted now that we've gone to IPLLOW due to
	// weird implementation details in the swap algorithm. this is bad and
	// annoying and means it should be reimplemented at some point.

	1 evicted!

	// write out to swapfile

	auto pno
	pfdbe@ MmPageFrameEntry_PFN + @ PAGESHIFT << IDENTITYSPACE | // pageframe
	IOSwapPageWrite ok! pno!

	if (ok@)
		ok@ "Failed to swap out page (%i). Try expanding the swapfile!\n" KeCrash
	end

	auto ppte
	pfdbe@ MmPageFrameEntryAnonymous_PrototypePTE + @ ppte!

	pno@ PAGESHIFT << PTE_INSWAP | ppte@!

	IPLDPC KeIPLRaise drop

	sectionobject@ MmSectionPPTUnlock
end

fn MmAnonymousPageAlloc { sectionobject pte pri -- pfdbe pfn ok }
	auto flags

	// an anonymous page is known to be a COW page by lacking a sectionobject.

	if (sectionobject@)
		0 flags!
	end else
		MMEVICTFLAG_COW flags!
	end

	flags@ // flags
	MmAnonymousEvictableFunctions // evictablefuncs
	pri@ CANBLOCK | // priority
	MmEvictablePageAlloc ok! pfn! pfdbe!

	if (ok@)
		return
	end

	sectionobject@ pfdbe@ MmPageFrameEntryAnonymous_SectionObject + !
	pte@ pfdbe@ MmPageFrameEntryAnonymous_PrototypePTE + !
end

fn MmAnonymousSwapIn { sectionobject pte pno -- pfdbe pfn ok }
	sectionobject@ // sectionobject
	pte@ // pte
	FREEFIRST // pri
	MmAnonymousPageAlloc ok! pfn! pfdbe!

	if (ok@)
		return
	end

	pfn@ PAGESHIFT << IDENTITYSPACE | // pageframe
	pno@ // pno
	IOSwapPageRead ok!

	if (ok@)
		pfn@ MmPageFree

		return
	end
end

fn MmSectionPageGet { sectionoffset sectionobject -- phyaddr pfdbe ok }
	// get specified page frame from section. will read it in if in swap, or
	// demand zero if non-existent, or just return if resident.

	if (DEBUGCHECKS)
		if (sectionobject@ MmSection_AnonSize + @ ~~)
			"MmSectionPageGet: anonsize==0\n" KeCrash
		end
	end

	sectionobject@ MmSectionPPTLock ok!

	if (ok@)
		return
	end

	auto anonsize
	sectionobject@ MmSection_AnonSize + @ anonsize!

	if (DEBUGCHECKS)
		if (sectionoffset@ anonsize@ >=)
			"MmSectionPageGet: offset>=anonsize\n" KeCrash
		end
	end
	
	auto multilevel
	anonsize@ MMSECTIONMULTILEVELTHRESHOLD >= multilevel!

	auto ppt
	sectionobject@ MmSection_AnonPrototypePageTable + @ ppt!

	if (ppt@ ~~)
		// needs to be created

		if (multilevel@)
			PAGESIZE // bytes
			'mPPT' // tag
			MmAllocWithTag ok! ppt!

			if (ok@)
				sectionobject@ MmSectionPPTUnlock
				return
			end

			ppt@ // ptr
			PAGESIZE // size
			0 // word
			memset
		end else
			// create linearly
			anonsize@ PAGESHIFT >> 2 << // bytes
			'lPPT' // tag
			MmAllocWithTag ok! ppt!

			if (ok@)
				sectionobject@ MmSectionPPTUnlock
				return
			end

			ppt@ // ptr
			anonsize@ PAGESHIFT >> 2 << // size
			0 // word
			memset
		end

		ppt@ sectionobject@ MmSection_AnonPrototypePageTable + !
	end

	if (multilevel@)
		auto pde
		sectionoffset@ PDSHIFT >> 2 << ppt@ + pde!

		if (pde@@ ~~)
			// need to allocate this level

			PAGESIZE // bytes
			'nPPT' // tag
			MmAllocWithTag ok! ppt!

			if (ok@)
				sectionobject@ MmSectionPPTUnlock
				return
			end

			ppt@ // ptr
			PAGESIZE // size
			0 // word
			memset

			ppt@ pde@!
		end

		pde@@ sectionoffset@ PAGESHIFT >> 2 << PAGEOFFSETMASK & + ppt!
	end else
		sectionoffset@ PAGESHIFT >> 2 << ppt +=
	end

	auto ppte
	ppt@@ ppte!

	if (ppte@ PTE_V &)
		// already present, return

		ppte@ PAGENUMBERMASK & phyaddr!
		phyaddr@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

		pfdbe@ MmEvictablePageReference drop
	end elseif (ppte@ ~~)
		// non-existent, demand zero

		sectionobject@ // sectionobject
		ppt@ // pte
		ZEROMUST // pri
		MmAnonymousPageAlloc ok! phyaddr! pfdbe!

		if (ok@)
			sectionobject@ MmSectionPPTUnlock
			return
		end

		PAGESHIFT phyaddr <<=

		phyaddr@ PTE_V | ppt@!
	end elseif (ppte@ PTE_INSWAP &)
		// swapped out, bring back in

		sectionobject@ // sectionobject
		ppt@ // pte
		ppte@ PAGESHIFT >> // pno
		MmAnonymousSwapIn ok! phyaddr! pfdbe!

		if (ok@)
			sectionobject@ MmSectionPPTUnlock
			return
		end

		PAGESHIFT phyaddr <<=

		phyaddr@ PTE_V | ppt@!
	end

	sectionobject@ MmSectionPPTUnlock
end