#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Memory.h"

#include "<inc>/Process.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OSAccess.h"

externptr HALLoaderPFDB
externptr HALLoaderInitialBitmap
externptr HALLoaderInitialBitmapSize
externptr HALLoaderTotalRAM
externptr HALLoaderHeap
externptr HALLoaderHeapSize

var MmPageFrameDatabase 0
public MmPageFrameDatabase

var MmPageFreeListHead 0
public MmPageFreeListHead

var MmPageZeroListHead 0
public MmPageZeroListHead

table MmHeapBuckets[BUCKETS]
public MmHeapBuckets

var MmPageTotal 0
public MmPageTotal

var MmPageTotalTotal 0
public MmPageTotalTotal

var MmPageFreeCount 0
public MmPageFreeCount

// var MmHeapSize 0
// public MmHeapSize

// var MmHeapBytesFree 0
// public MmHeapBytesFree

// var MmHeap 0
// public MmHeap

var MmInited 0
public MmInited

buffer MmQuotaSystem MmQuotaBlock_SIZEOF
public MmQuotaSystem

buffer MmEventLowMemory KeEvent_SIZEOF
public MmEventLowMemory

var MmPageFreeCountLow 0
public MmPageFreeCountLow

var MmPageFreeCountSufficient 0
public MmPageFreeCountSufficient

buffer MmEventPageAvailable KeEvent_SIZEOF
public MmEventPageAvailable

// initializes physical memory allocation

fn MmInitPhase0 { -- }
	auto ptr

	HALLoaderPFDB@ dup MmPageFrameDatabase! ptr!

	auto i
	0 i!

	auto pages
	HALLoaderTotalRAM@ PAGESHIFT >> pages!

	pages@ MmPageTotalTotal!

	auto bmp
	HALLoaderInitialBitmap@ bmp!

	auto sz
	HALLoaderInitialBitmapSize@ 32 * sz!

	auto word

	auto last
	0 last!

	// initialize the page DB by linking all of the entries into the
	// free list, except those marked allocated in the loader bitmap.

	while (i@ pages@ <)
		if (i@ sz@ <)
			if (i@ 31 & ~~)
				bmp@@ word!
				4 bmp +=
			end

			if (word@ i@ 31 & bitget ~~)
				1 MmPageFreeCount +=

				if (last@)
					ptr@ last@ MmPageFrameEntryFree_Next + !
				end else
					ptr@ MmPageFreeListHead!
				end

				ptr@ last!
			end
		end else
			1 MmPageFreeCount +=

			if (last@)
				ptr@ last@ MmPageFrameEntryFree_Next + !
			end else
				ptr@ MmPageFreeListHead!
			end

			ptr@ last!
		end

		i@ ptr@ MmPageFrameEntry_PFN + !

		MmPageFrameEntry_SIZEOF ptr +=
		1 i +=
	end

	MmPageFreeCount@ MmPageTotal!

	1 MmInited!

	"Pre-boot memory statistics:\n" "MmInitPhase0" HALLog

	MmUsageDump

	auto idleproc
	KeProcessCurrent idleproc!

	MMQUOTAINFINITE // heapmax
	MmQuotaSystem // quota
	MmQuotaBlockInitialize word!

	if (word@)
		"MmInitPhase0: couldn't initialize system quota block\n" KeCrash
	end

	// bias the reference by one to make sure the system never attempts to free this
	MmQuotaSystem MmQuotaBlockReference

	MmQuotaSystem idleproc@ PsProcess_QuotaBlock + !

	0 // signaled
	KEEVENT_NOTIF // type
	"MmEventLowMemory" // name
	MmEventLowMemory // event
	KeEventInitialize word!

	if (word@)
		"MmInitPhase0: couldn't initialize low memory event\n" KeCrash
	end	

	0 // signaled
	KEEVENT_SYNCH // type
	"MmEventPageAvailable" // name
	MmEventPageAvailable // event
	KeEventInitialize word!

	if (word@)
		"MmInitPhase0: couldn't initialize page available event\n" KeCrash
	end

	MmPoolInit
end

var MmSectionObjectType 0
public MmSectionObjectType

fn MmInitPhase1 { -- }
	auto typeinit
	ObTypeInitializer_SIZEOF alloc typeinit!

	// initialize ObTypeInitializer fields

	typeinit@ ObTypeInitializerInitialize

	// create Section type

	auto type

	"Section" typeinit@ ObTypeInitializer_Name + !
	'Sect' typeinit@ ObTypeInitializer_Tag + !
	0 typeinit@ ObTypeInitializer_BodySize + !
	pointerof MmSectionObjectDelete typeinit@ ObTypeInitializer_DeleteFunction + !
	typeinit@ ObTypeCreate ok! type!

	if (ok@)
		ok@ "MmInitPhase1: couldn't create Section type (%i)\n" KeCrash
	end

	type@ MmSectionObjectType!

	// initialize eviction/swap

	if (MmPageFreeCount@ MMMUSTSUCCEEDPAGES 4 * <)
		MMMUSTSUCCEEDPAGES 4 * PAGESHIFT << "MmInitPhase1: at least %d bytes of free memory required to boot!\n" KeCrash
	end

	if (MmPageFreeCount@ 128 <)
		MMMUSTSUCCEEDPAGES 1 + MmPageFreeCountLow!
		MmPageFreeCount@ 2 / MmPageFreeCountSufficient!
	end else
		MmPageFreeCount@ 9 / 512 min MmPageFreeCountLow!
		MmPageFreeCount@ 3 / 1536 min MmPageFreeCountSufficient!
	end

	MmPageFreeCountSufficient@
	MmPageFreeCountLow@
	"eviction targets: %d pages -> %d pages\n" "MmInitPhase1" HALLog

	auto ok
	auto thhandle

	0 // context1
	0 // context2
	pointerof MmEvictionWorker // startfunc
	ACCESS_OWNER_ALL // permissions
	"Eviction" // name
	0 // processhandle
	PsSystemProcess@ // processptr
	PsThreadCreate ok! thhandle!

	if (ok@)
		ok@ "MmInitPhase1: couldn't create 'Eviction' thread (%i)\n" KeCrash
	end

	thhandle@ ObObjectClose ok!

	if (ok@)
		ok@ "MmInitPhase1: couldn't close 'Eviction' thread (%i)\n" KeCrash
	end
end

fn MmUsageDump { -- }
	auto pageswired
	MmPageTotalTotal@ MmPageTotal@ - pageswired!

	auto pagesused
	MmPageTotalTotal@ MmPageFreeCount@ - pagesused!

	pageswired@ PAGESHIFT << 1024 /
	MmPageTotalTotal@ PAGESHIFT << 1024 /
	pagesused@ PAGESHIFT << 1024 / " PHYS: %dKB/%dKB used (%dKB permanently reserved kernel data)\n" Printf
	MmSlabBytesUsedExternally@
	MmSlabBytesUsedInternally@ " SLAB: %d bytes used, occupying %d bytes in memory\n" Printf
	MmPoolBytesUsed@ " POOL: %d bytes used\n" Printf
	IOCachePagesUsed@ PAGESHIFT << " CACH: %d bytes used\n" Printf
	MmEvictablePageCount@ PAGESHIFT << " EVIC: %d bytes evictable\n" Printf
end