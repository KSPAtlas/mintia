#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/Kernel.h"

#include "<inc>/Memory.h"

#include "<inc>/Process.h"

#include "<inc>/Object.h"

#include "<ll>/OSDLL/OSAccess.h"

externptr HALLoaderPFDB

externptr HALLoaderInitialBitmap

externptr HALLoaderInitialBitmapSize

externptr HALLoaderTotalRAM

externptr HALLoaderHeap

externptr HALLoaderHeapSize

var MmPageFrameDatabase 0
public MmPageFrameDatabase

var MmPageFreeListHead 0
public MmPageFreeListHead

var MmPageZeroListHead 0
public MmPageZeroListHead

table MmHeapBuckets[BUCKETS]
public MmHeapBuckets

var MmPageTotal 0
public MmPageTotal

var MmPageFreeCount 0
public MmPageFreeCount

var MmHeapSize 0
public MmHeapSize

var MmHeapBytesFree 0
public MmHeapBytesFree

var MmHeap 0
public MmHeap

var MmInited 0
public MmInited

buffer MmQuotaSystem MmQuotaBlock_SIZEOF
public MmQuotaSystem

buffer MmEventLowMemory KeEvent_SIZEOF
public MmEventLowMemory

var MmPageFreeCountLow 0
public MmPageFreeCountLow

var MmPageFreeCountSufficient 0
public MmPageFreeCountSufficient

buffer MmEventPageAvailable KeEvent_SIZEOF
public MmEventPageAvailable

// initializes physical memory allocation

fn MmInitPhase0 { -- }
	auto ptr

	HALLoaderPFDB@ dup MmPageFrameDatabase! ptr!

	auto i
	0 i!

	auto pages
	HALLoaderTotalRAM@ 12 >> pages!

	auto bmp
	HALLoaderInitialBitmap@ bmp!

	auto sz
	HALLoaderInitialBitmapSize@ 32 * sz!

	auto word

	auto last
	0 last!

	// initialize the page DB by linking all of the entries into the
	// free list, except those marked allocated in the loader bitmap.

	while (i@ pages@ <)
		if (i@ sz@ <)
			if (i@ 31 & ~~)
				bmp@@ word!
				4 bmp +=
			end

			if (word@ i@ 31 & bitget ~~)
				1 MmPageFreeCount +=

				if (last@)
					ptr@ last@ MmPageFrameEntryFree_Next + !
				end else
					ptr@ MmPageFreeListHead!
				end

				ptr@ last!
			end
		end else
			1 MmPageFreeCount +=

			if (last@)
				ptr@ last@ MmPageFrameEntryFree_Next + !
			end else
				ptr@ MmPageFreeListHead!
			end

			ptr@ last!
		end

		i@ ptr@ MmPageFrameEntry_PFN + !

		MmPageFrameEntry_SIZEOF ptr +=
		1 i +=
	end

	MmPageFreeCount@ MmPageTotal!

	// initialize the heap as one block on the free list

	HALLoaderHeap@ ptr!

	HEAPBLOCKMAGIC ptr@ MmHeapBlock_Magic + !
	0 ptr@ MmHeapBlock_Next + !
	0 ptr@ MmHeapBlock_Prev + !
	HEAPBLOCKFREE ptr@ MmHeapBlock_Tag + !

	0 i!
	1 BUCKETSPO2START << sz!
	0 word!

	while (i@ BUCKETS <)
		if (HALLoaderHeapSize@ sz@ ==)
			i@ ptr@ MmHeapBlock_BucketIndex + !

			// found the correct bucket
			ptr@ [i@]MmHeapBuckets!

			1 word!

			break
		end

		1 sz <<=
		1 i +=
	end

	HALLoaderHeapSize@ MmHeapSize!
	HALLoaderHeapSize@ MmHeapBytesFree!
	HALLoaderHeap@ MmHeap!

	if (word@ ~~)
		"MmInitPhase0: couldn't initialize heap bucket\n" KeCrash
	end

	1 MmInited!

	"Pre-boot memory statistics:\n" "MmInitPhase0" HALLog

	MmUsageDump

	auto idleproc
	KeProcessCurrent idleproc!

	MMQUOTAINFINITE // heapmax
	MmQuotaSystem // quota
	MmQuotaBlockInitialize word!

	if (word@)
		"MmInitPhase0: couldn't initialize system quota block\n" KeCrash
	end

	// bias the reference by one to make sure the system never attempts to free this
	MmQuotaSystem MmQuotaBlockReference

	MmQuotaSystem idleproc@ PsProcess_QuotaBlock + !

	0 // signaled
	KEEVENT_NOTIF // type
	"MmEventLowMemory" // name
	MmEventLowMemory // event
	KeEventInitialize word!

	if (word@)
		"MmInitPhase0: couldn't initialize low memory event\n" KeCrash
	end	

	0 // signaled
	KEEVENT_SYNCH // type
	"MmEventPageAvailable" // name
	MmEventPageAvailable // event
	KeEventInitialize word!

	if (word@)
		"MmInitPhase0: couldn't initialize page available event\n" KeCrash
	end	
end

fn MmInitPhase1 { -- }
	// initializes eviction/swap and other virtual memory stuff

	MmPageFreeCount@ 8 / 1024 min MmPageFreeCountLow!

	MmPageFreeCount@ 4 / 2048 min MmPageFreeCountSufficient!

	MmPageFreeCountSufficient@
	MmPageFreeCountLow@
	"swapping targets: %d pages -> %d pages\n" "MmInitPhase1" HALLog

	auto ok
	auto thhandle

	0 // context1
	0 // context2
	pointerof MmEvictionWorker // startfunc
	ACCESS_OWNER_ALL // permissions
	"Swap" // name
	0 // processhandle
	PsSystemProcess@ // processptr
	PsThreadCreate ok! thhandle!

	if (ok@)
		ok@ "MmInitPhase1: couldn't create 'Swap' thread (%i)\n" KeCrash
	end

	thhandle@ ObObjectClose ok!

	if (ok@)
		ok@ "MmInitPhase1: couldn't close 'Swap' thread (%i)\n" KeCrash
	end
end

fn MmUsageDump { -- }
	"AVAIL" "TOTAL" "MEMORY" "  %12s %12s %12s\n" Printf

	"Page Frames" "  %12s " Printf
	MmPageTotal@ "%12d " Printf
	MmPageFreeCount@ "%12d\n" Printf

	"Heap Bytes" "  %12s " Printf
	MmHeapSize@ "%12d " Printf
	MmHeapBytesFree@ "%12d\n" Printf
end