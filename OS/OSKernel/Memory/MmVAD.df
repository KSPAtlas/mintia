#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

// routines for creating, destroying, and manipulating
// Virtual Address Descriptors (VADs).

fn MmVADCreate { startva endva prot offset sectionobject -- vad ok }
	// allocates a VAD structure.
	// references the section object.

	MmVAD_SIZEOF // bytes
	'nVAD' // tag
	MmAllocWithTag ok! vad!

	if (ok@)
		return
	end

	sectionobject@ ObObjectReferenceByPointer drop

	sectionobject@ vad@ MmVAD_SectionObject + !
	offset@ vad@ MmVAD_OffsetInSection + !

	0 vad@ MmVAD_Next + !
	0 vad@ MmVAD_Prev + !
	startva@ vad@ MmVAD_StartVA + !
	endva@ vad@ MmVAD_EndVA + !
	0 vad@ MmVAD_FurthestExtentMapped + !
	prot@ vad@ MmVAD_PageProtection + !
end

fn MmVADDestroy { vad -- }
	// destroys a VAD

	vad@ MmVAD_SectionObject + @ ObObjectDereferenceByPointer drop

	vad@ MmFree
end

fn MmVADListLock { processobject -- ok }
	KERNELMODE // waitmode
	1 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	processobject@ PsProcess_VADListMutex + // object
	KeThreadWaitForObject ok!
end

fn MmVADListUnlock { processobject -- }
	processobject@ PsProcess_VADListMutex + KeMutexRelease drop
end

fn MmVADFind { vaddr length mustbestart processobject -- vad ok }
	"MmVADFind: NEEDS REVIEW\n" KeCrash

	// locate the VAD containing the given virtual address. if mustbestart is
	// true, then the virtual address must be at the start of the VAD, and the
	// length must match the length of the VAD, or else an error is returned.
	// if it is false, the length argument is completely ignored.

	// assumes the caller locked the process VAD list.

	processobject@ PsProcess_VADLookupHint + @ vad!

	if (vad@ ~~)
		// no hint, start at listhead
		processobject@ PsProcess_VADListHead + @ vad!
	end

	0 ok!

	// fast check for if the hint is immediately the correct VAD (common)
	if (vaddr@ vad@ MmVAD_StartVA + @ >=)
		if (vaddr@ vad@ MmVAD_EndVA + @ <)
			// found it

			if (mustbestart@)
				if (vad@ MmVAD_StartVA + @ vaddr@ ~=)
					STATUS_BAD_ADDRESS ok!

					return
				end

				if (vad@ MmVAD_EndVA + @ vad@ MmVAD_StartVA + @ - length@ ~=)
					STATUS_BAD_ADDRESS ok!

					return
				end
			end else
				vad@ processobject@ PsProcess_VADLookupHint + !
			end

			return
		end
	end

	// hint was not the correct VAD, check if it is before or after the hint
	// and search in the appropriate direction.

	if (vaddr@ vad@ MmVAD_StartVA + @ >)
		// after the hint, search forwards

		while (vad@)
			if (vaddr@ vad@ MmVAD_StartVA + @ <)
				// vaddr was before this VAD which means we missed it, which
				// means it's not mapped

				STATUS_BAD_ADDRESS ok!

				return
			end

			if (vaddr@ vad@ MmVAD_EndVA + @ <)
				// found it!

				if (mustbestart@ ~~)
					vad@ processobject@ PsProcess_VADLookupHint + !
				end

				return
			end

			vad@ MmVAD_Next + @ vad!
		end
	end else
		// before the hint, search backwards

		while (vad@)
			if (vaddr@ vad@ MmVAD_EndVA + @ >=)
				// vaddr was after this VAD which means we missed it, which
				// means it's not mapped

				STATUS_BAD_ADDRESS ok!

				return
			end

			if (vaddr@ vad@ MmVAD_StartVA + @ >=)
				// found it!

				if (mustbestart@ ~~)
					vad@ processobject@ PsProcess_VADLookupHint + !
				end

				return
			end

			vad@ MmVAD_Prev + @ vad!
		end
	end

	STATUS_BAD_ADDRESS ok!
end

fn MmVADFindAndMapFreeRegion { viewsize startva fixedva pageprotection sectionoffset sectionobject processobject -- realva ok }
	"MmVADFindAndMapFreeRegion: NEEDS REVIEW\n" KeCrash

	// find a fitting region with a preferred virtual address of startva.
	// if fixedva is true, then *only* this virtual address can be used; if
	// it is not available an error will be returned.
	// this region must be completely empty.

	auto endva
	// no overflow check, caller should have done that
	startva@ viewsize@ + endva!

	// stores last VAD that can hold the view after it.
	// -1 means no space available, 0 means very start
	auto lastsufficientvad
	-1 lastsufficientvad!

	auto lastvad
	0 lastvad!

	auto lastend
	PAGESIZE lastend!

	0 realva!

	processobject@ MmVADListLock ok!

	if (ok@)
		return
	end

	auto vad
	processobject@ PsProcess_VADListHead + @ vad!

	while (vad@)
		if (fixedva@)
			if (vad@ MmVAD_StartVA + @ endva@ >)
				// this VAD begins after our requested region, which means it
				// either lies directly behind this VAD or doesn't exist.

				if (startva@ lastend@ >=)
					// found a space!
					startva@ realva!
					lastvad@ lastsufficientvad!
					break
				end

				// this startva was mandatory...

				processobject@ MmVADListUnlock

				STATUS_UNAVAILABLE_ADDRESS ok!

				return
			end
		end elseif (lastsufficientvad@ -1 ==)
			if (vad@ MmVAD_StartVA + @ lastend@ - viewsize@ >=)
				// the last space is big enough

				lastend@ realva!
				lastvad@ lastsufficientvad!

				if (startva@ ~~)
					// no startva preference, use it
					break
				end

				if (vad@ MmVAD_StartVA + @ endva@ >)
					if (startva@ lastend@ >=)
						// found our preferred address!
						startva@ realva!
						lastvad@ lastsufficientvad!
						break
					end
				end
			end
		end

		vad@ MmVAD_EndVA + @ lastend!
		vad@ lastvad!
		vad@ MmVAD_Next + @ vad!
	end

	if (lastsufficientvad@ -1 ==)
		// see if it can fit in the end

		if (fixedva@)
			// skip a check against MMHIGHESTUSERADDRESS because endva should
			// have been sanity checked against it already by the caller

			if (startva@ lastend@ >=)
				// found a space!
				startva@ realva!
				lastvad@ lastsufficientvad!
			end
		end elseif (MMHIGHESTUSERADDRESS 1 + lastend@ - viewsize@ >=)
			// fits!
			lastend@ realva!
			lastvad@ lastsufficientvad!
		end

		if (lastsufficientvad@ -1 ==)
			processobject@ MmVADListUnlock

			// still -1, didn't fit anywhere!

			STATUS_UNAVAILABLE_ADDRESS ok!

			return
		end
	end

	// create the VAD for this mapping and insert it in the list just after
	// lastsufficientvad (or before the head of the list if lastsufficientvad
	// is 0)

	realva@ // startva
	realva@ viewsize@ + // endva
	pageprotection@ // prot
	sectionoffset@ // offset
	sectionobject@ // sectionobject
	MmVADCreate ok! vad!
	
	if (ok@)
		processobject@ MmVADListUnlock

		return
	end

	auto h

	if (lastsufficientvad@ ~~)
		// insert at head

		processobject@ PsProcess_VADListHead + @ h!

		if (h@)
			vad@ h@ MmVAD_Prev + !
			h@ vad@ MmVAD_Next + !
		end else
			vad@ processobject@ PsProcess_VADListTail + !
		end

		h@ processobject@ PsProcess_VADListHead + !
	end else
		// insert ahead of given VAD

		lastsufficientvad@ MmVAD_Next + @ h!

		if (h@)
			vad@ h@ MmVAD_Prev + !
			h@ vad@ MmVAD_Next + !
		end else
			vad@ processobject@ PsProcess_VADListTail + !
		end

		lastsufficientvad@ vad@ MmVAD_Prev + !
		vad@ lastsufficientvad@ MmVAD_Next + !
	end

	processobject@ MmVADListUnlock
end

fn MmVADUnmap { vad processobject -- }
	"MmVADUnmap: NEEDS REVIEW\n" KeCrash

	// assumes the caller locked the process VAD list.

	// unmap all the pages associated with the VAD, then remove it from the
	// process VAD list and destroy it.

	if (DEBUGCHECKS)
		if (KeThreadCurrent@ KeThread_IgnoreKill + @ ~~)
			"MmVADUnmap: could be killed\n" KeCrash
		end
	end

	auto pdir
	processobject@ PsProcess_PCB + KeProcess_PageDirectory + @ pdir!

	auto asid
	processobject@ PsProcess_PCB + KeProcess_ASID + @ asid!

	auto vaddr
	vad@ MmVAD_StartVA + @ vaddr!

	auto max
	// only unmap up to the highest vaddr that was ever faulted in, as an
	// optimization.
	vad@ MmVAD_FurthestExtentMapped + @ PAGESIZE + max!

	if (DEBUGCHECKS)
		if (vaddr@ PAGEOFFSETMASK &)
			vaddr@ "MmVADUnmap: vaddr wasn't page-aligned (0x%08x)\n" KeCrash
		end

		if (max@ PAGEOFFSETMASK &)
			max@ "MmVADUnmap: max wasn't page-aligned (0x%08x)\n" KeCrash
		end

		if (vaddr@ MMHIGHESTUSERADDRESS >)
			vaddr@ "MmVADUnmap: vaddr > MMHIGHESTUSERADDRESS (0x%08x)\n" KeCrash
		end

		if (max@ MMHIGHESTUSERADDRESS >)
			max@ "MmVADUnmap: max > MMHIGHESTUSERADDRESS (0x%08x)\n" KeCrash
		end
	end

	auto commitcharge
	vad@ MmVAD_SectionObject + @ MmSection_NoCommit + @ ~~ commitcharge!

	auto ok

	auto pte
	auto phyaddr

	auto pfdbe

	while (vaddr@ max@ <)
		vaddr@ // vaddr
		asid@ // asid
		pdir@ // pagemap
		1 // canfree
		1 // attempt
		MmUnmapVirtualAddress ok! phyaddr! pte!

		if (ok@ ~~)
			// unmapped a page, do accounting

			if (commitcharge@)
				1 processobject@ PsProcess_CommittedPageFrames + -=

				phyaddr@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

				// dereference page or free immediately if COW
				// or zero out trick PTE pointer if trick

				"MmVADUnmap: TODO: deref or free COW\n" KeCrash
			end

			1 processobject@ PsProcess_MappedPageFrames + -=
		end else
			if (pte@ 12 >>)
				// free COW page in swap

				"MmVADUnmap: TODO: free COW page in swap\n" KeCrash
			end
		end

		PAGESIZE vaddr +=
	end

	if (vad@ processobject@ PsProcess_VADLookupHint + @ ==)
		0 processobject@ PsProcess_VADLookupHint + !
	end

	if (vad@ processobject@ PsProcess_VADMapHint + @ ==)
		0 processobject@ PsProcess_VADMapHint + !
	end

	auto n
	vad@ MmVAD_Next + @ n!

	if (n@)
		vad@ MmVAD_Prev + @ n@ MmVAD_Prev + !
	end else // no next means we were the tail
		vad@ MmVAD_Prev + @ processobject@ PsProcess_VADListTail + !
	end

	vad@ MmVAD_Prev + @ n!

	if (n@)
		vad@ MmVAD_Next + @ n@ MmVAD_Next + !
	end else // no prev means we were the head
		vad@ MmVAD_Next + @ processobject@ PsProcess_VADListHead + !
	end

	vad@ MmVADDestroy
end