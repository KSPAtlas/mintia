#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

fn MmSectionPrepare { prot endofview sectionobject -- ok }
	// helper function

	0 ok!

	auto fileobject
	sectionobject@ MmSection_FileObject + @ fileobject!

	if (fileobject@)
		if (DEBUGCHECKS)
			if (sectionobject@ MmSection_AnonSize + @)
				"MmSectionPrepare: anonsize != 0\n" KeCrash
			end
		end

		auto fcb
		fileobject@ IOFile_FileControlBlock + @ fcb!

		if (endofview@ fcb@ IOFileControlBlock_SizeInBytes + @ >)
			STATUS_INVALID_ARGUMENT ok!

			return
		end

		if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ==)
			if (prot@ PAGEACCESS_WRITECOPY &)
				// can't COW character devices, that's a weird thing to do.
				// also it bypasses our swap algo which is secretly the main
				// reason.

				STATUS_INVALID_ARGUMENT ok!

				return
			end
		end else
			auto cacheblock
			fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

			if (cacheblock@ ~~)
				// initialize caching on mapped FCB

				1 // wantcaching
				fcb@ // fcb
				IOFileControlBlockCacheCheck ok! cacheblock!

				if (ok@)
					return
				end
			end

			cacheblock@ // cacheblock
			IOCacheInfoBlockTryReference ok! drop

			if (ok@)
				return
			end
		end
	end else
		if (DEBUGCHECKS)
			if (sectionobject@ MmSection_AnonSize + @ ~~)
				"MmSectionPrepare: anonsize == 0\n" KeCrash
			end
		end

		if (endofview@ sectionobject@ MmSection_AnonSize + @ >)
			STATUS_INVALID_ARGUMENT ok!

			return
		end
	end
end

fn MmSectionUnprepare { sectionobject -- }
	// helper function

	auto fileobject
	sectionobject@ MmSection_FileObject + @ fileobject!

	if (fileobject@)
		auto fcb
		fileobject@ IOFile_FileControlBlock + @ fcb!

		if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ~=)
			auto cacheblock
			fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

			if (DEBUGCHECKS)
				if (cacheblock@ ~~)
					"MmSectionUnprepare: no cacheblock\n" KeCrash
				end
			end

			cacheblock@ IOCacheInfoBlockDereference drop
		end
	end
end

fn MmSectionMapViewProcessObject { length startva sectionoffset sectionobject processobject pageprotection flags -- realva ok }
	if (sectionoffset@ PAGEOFFSETMASK &)
		// requested section offset isn't page-aligned
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	if (startva@ PAGEOFFSETMASK &)
		// requested startva isn't page-aligned
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	auto endofview
	length@ sectionoffset@ + endofview!

	if (endofview@ sectionoffset@ <)
		// length+sectionoffset overflows
		STATUS_OVERFLOW ok!

		return
	end

	if (length@ 0 ==)
		// length is given as 0 which makes this a no-op
		0 ok!

		return
	end

	length@ PAGEOFFSETMASK + PAGENUMBERMASK & length!

	if (length@ 0 ==)
		// length overflowed
		STATUS_OVERFLOW ok!

		return
	end

	if (startva@ length@ + startva@ <)
		// startva+length overflows
		STATUS_OVERFLOW ok!

		return
	end

	if (startva@ length@ + MMHIGHESTUSERADDRESS >)
		// requested region goes outside userspace

		if (flags@ OSMAPFLAG_FIXEDADDRESS &)
			STATUS_UNAVAILABLE_ADDRESS ok!

			return
		end

		0 startva!
	end

	auto perm
	pageprotection@ PAGEACCESS_ALL & perm!

	if (sectionobject@ MmSection_PageProtection + @ perm@ & perm@ ~=)
		// section doesn't have required permissions
		STATUS_PERMISSION_DENIED ok!

		return
	end

	// if the section has a file object, initialize caching on its FCB and
	// reference the cacheblock so that it can't be truncated.
	// this is done in MmSectionPrepare.

	pageprotection@ // prot
	endofview@ // endofview
	sectionobject@ // sectionobject
	MmSectionPrepare ok!

	if (ok@)
		return
	end

	// from here on we need to call MmSectionUnprepare when we return with an
	// error...

	length@ // viewsize
	startva@ // startva
	flags@ OSMAPFLAG_FIXEDADDRESS & // fixedva
	pageprotection@ // pageprotection
	sectionoffset@ // sectionoffset
	sectionobject@ // sectionobject
	processobject@ // processobject
	MmVADFindAndMapFreeRegion ok! realva!

	if (ok@)
		sectionobject@ // sectionobject
		MmSectionUnprepare

		return
	end

	// XXX is this really all we have to do???
end

fn MmSectionMapView { length startva sectionoffset sectionhandle processhandle pageprotection flags -- realva ok }
	auto access
	auto sectionobject

	MmSectionObjectType@ // type
	sectionhandle@ // handle
	ObObjectReferenceByHandle ok! sectionobject! access!

	if (ok@)
		return
	end

	// XXX assumes access bits and page protection bits lines up.
	// but they do now and always should.
	access@ pageprotection@ PAGEACCESS_ALL & SeCheckAccess ok!

	if (ok@)
		sectionobject@ ObObjectDereferenceByPointer drop

		return
	end

	auto processobject

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		sectionobject@ ObObjectDereferenceByPointer drop

		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		sectionobject@ ObObjectDereferenceByPointer drop

		return
	end

	length@ // length
	startva@ // startva
	sectionoffset@ // sectionoffset
	sectionobject@ // sectionobject
	processobject@ // processobject
	pageprotection@ // pageprotection
	flags@ // flags
	MmSectionMapViewProcessObject ok! realva!

	processobject@ ObObjectDereferenceByPointer drop

	sectionobject@ ObObjectDereferenceByPointer drop
end

fn MmUnmapViewProcess { length vaddr processobject -- ok }
	length@ PAGEOFFSETMASK + PAGENUMBERMASK & length!

	if (length@ 0 ==)
		// length overflowed
		STATUS_OVERFLOW ok!

		return
	end

	if (vaddr@ length@ + vaddr@ <)
		// vaddr+length overflows
		STATUS_OVERFLOW ok!

		return
	end

	if (vaddr@ length@ + MMHIGHESTUSERADDRESS >)
		// requested region goes outside userspace

		STATUS_FORBIDDEN_OPERATION ok!

		return
	end

	KeThreadCurrent@ KeThreadIgnoreKill drop

	processobject@ MmVADListLock ok!

	if (DEBUGCHECKS)
		if (ok@)
			"MmUnmapViewProcess: failed to lock\n" KeCrash
		end
	end

	auto vad

	vaddr@ // vaddr
	length@ // length
	1 // mustbestart
	processobject@
	MmVADFind ok! vad!

	if (ok@)
		processobject@ MmVADListUnlock

		KeThreadCurrent@ KeThreadAcceptKill drop

		return
	end

	auto sectionobject
	vad@ MmVAD_SectionObject + @ sectionobject!

	vad@ // vad
	processobject@ // processobject
	MmVADUnmap

	processobject@ MmVADListUnlock

	sectionobject@ MmSectionUnprepare
	sectionobject@ ObObjectDereferenceByPointer drop

	KeThreadCurrent@ KeThreadAcceptKill drop
end

fn MmUnmapView { length vaddr processhandle -- ok }
	auto processobject
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	length@ // length
	vaddr@ // vaddr
	processobject@ // processobject
	MmUnmapViewProcess ok!

	processobject@ ObObjectDereferenceByPointer drop
end

fn MmRemapViewProcess { pageprotection length vaddr processobject -- ok }
	length@ PAGEOFFSETMASK + PAGENUMBERMASK & length!

	if (length@ 0 ==)
		// length overflowed
		STATUS_OVERFLOW ok!

		return
	end

	if (vaddr@ length@ + vaddr@ <)
		// vaddr+length overflows
		STATUS_OVERFLOW ok!

		return
	end

	if (vaddr@ length@ + MMHIGHESTUSERADDRESS >)
		// requested region goes outside userspace

		STATUS_FORBIDDEN_OPERATION ok!

		return
	end

	processobject@ MmVADListLock ok!

	if (ok@)
		return
	end

	auto vad

	vaddr@ // vaddr
	length@ // length
	1 // mustbestart
	processobject@
	MmVADFind ok! vad!

	if (ok@)
		processobject@ MmVADListUnlock

		return
	end

	auto sectionobject
	vad@ MmVAD_SectionObject + @ sectionobject!

	auto oldprot
	vad@ MmVAD_PageProtection + @ oldprot!

	if (oldprot@ pageprotection@ & pageprotection@ ~=)
		processobject@ MmVADListUnlock

		// not a subset
		STATUS_PERMISSION_DENIED ok!

		return
	end

	pageprotection@ vad@ MmVAD_PageProtection + !

	processobject@ MmVADListUnlock
end

fn MmRemapView { pageprotection length vaddr processhandle -- ok }
	auto processobject
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	pageprotection@ // pageprotection
	length@ // length
	vaddr@ // vaddr
	processobject@ // processobject
	MmRemapViewProcess ok!

	processobject@ ObObjectDereferenceByPointer drop
end