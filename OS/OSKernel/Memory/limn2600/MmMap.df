#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OSStatus.h"

extern HALLimn2500TLBFlush { vpn asid -- }
extern HALLimn2500TLBFlushAll { -- }

fn MmFlushUserTLBAll { -- }
	// XXX we might be able to have this function flush only the userspace
	// part of the TLB at some point.

	HALLimn2500TLBFlushAll
end

fn MmGetVirtualAddress { vaddr pagemap -- flags phyaddr pte ok }
	// get the PTE for a virtual address (for instances like, finding out if
	// a page is in swap)

	IDENTITYSPACE pagemap |=

	auto pdi
	vaddr@ 22 >> 2 << pagemap@ + @ pdi!

	pdi@ 5 >> 12 << pagemap!

	if (pagemap@ ~~)
		-1 ok!
		0 phyaddr!
		0 flags!
		0 pte!

		return
	end

	IDENTITYSPACE pagemap |=

	vaddr@ 12 >> 1023 & 2 << pagemap@ + @ pte!

	if (pte@ PTE_V & ~~)
		-1 ok!
	end

	pte@ 31 & flags!
	pte@ 5 >> 12 << phyaddr!

	0 ok!
end

fn MmMapVirtualAddress { phyaddr vaddr flags pagemap -- ok }
	// caller should take care of any locking

	IDENTITYSPACE pagemap |=

	0 ok!

	auto pdi
	vaddr@ 22 >> 2 << pagemap@ + pdi!

	auto pt
	pdi@@ 5 >> PAGESHIFT << pt!

	if (pt@ 0 ==)
		// need to allocate this page table.
		// dip into MUSTSUCCEEDL2 pool to increase odds of successfully
		// satisfying a page fault in high memory pressure conditions.

		ZEROMUST MUSTSUCCEEDL2 | // priority
		MmPageAlloc ok! pt! drop

		if (ok@)
			return
		end

		pt@ 5 << PTE_V | pdi@!

		PAGESHIFT pt <<=
	end

	IDENTITYSPACE pt |=

	vaddr@ PAGESHIFT >> 1023 & 2 << pt@ + IDENTITYSPACE | pdi!

	if (pdi@@ PTE_V &)
		pdi@@ vaddr@ "MmMapVirtualAddress: 0x%08x is already mapped (pte=0x%08x)!\n" KeCrash
	end

	phyaddr@ PAGESHIFT >> 5 << flags@ | pdi@!
end

fn MmRemapVirtualAddress { phyaddr vaddr flags asid pagemap -- pteaddr ok }
	// caller should take care of any locking

	IDENTITYSPACE pagemap |=

	0 ok!

	auto pdi
	vaddr@ 22 >> 2 << pagemap@ + pdi!

	auto pt
	pdi@@ 5 >> PAGESHIFT << pt!

	if (pt@ 0 ==)
		// need to allocate this page table.
		// dip into MUSTSUCCEEDL2 pool to increase odds of successfully
		// satisfying a page fault in high memory pressure conditions.

		auto pfdbe

		ZEROMUST MUSTSUCCEEDL2 | // priority
		MmPageAlloc ok! pt! pfdbe!

		if (ok@)
			return
		end

		0 pfdbe@ MmPageFrameEntryPageTable_PTECount + !

		pt@ 5 << PTE_V | pdi@!

		PAGESHIFT pt <<=
	end

	IDENTITYSPACE pt |=

	vaddr@ PAGESHIFT >> 1023 & 2 << pt@ + IDENTITYSPACE | pteaddr!

	auto newpte
	phyaddr@ PAGESHIFT >> 5 << flags@ | newpte!

	if (pteaddr@@ PTE_V &)
		if (pteaddr@@ newpte@ ~=)
			// flush TLB entry

			if (DEBUGCHECKS)
				if (asid@ 0 ==)
					"MmRemapVirtualAddress: asid == 0\n" KeCrash
				end
			end

			vaddr@ PAGESHIFT >> // vpn
			asid@ 255 & 1 + // asid
			HALLimn2500TLBFlush
		end
	end

	newpte@ pteaddr@!
end

fn MmSetVirtualAddress { pte vaddr pagemap -- ok }
	// set the pte for the virtual address (for instances like, in order to
	// keep track of where the page frame is in swap)

	// caller should take care of any locking

	IDENTITYSPACE pagemap |=

	0 ok!

	auto pdi
	vaddr@ 22 >> 2 << pagemap@ + pdi!

	auto pt
	pdi@@ 5 >> PAGESHIFT << pt!

	if (pt@ 0 ==)
		vaddr@ "MmSetVirtualAddress: 0x%08x had no page table!\n" KeCrash
	end

	IDENTITYSPACE pt |=

	vaddr@ PAGESHIFT >> 1023 & 2 << pt@ + IDENTITYSPACE | pdi!

	pte@ pdi@!
end

fn MmInvalidateVirtualAddress { invcow vaddr asid pagemap -- phyaddr ok }
	IDENTITYSPACE pagemap |=

	auto pdi
	vaddr@ 22 >> 2 << pagemap@ + @ pdi!

	pdi@ 5 >> 12 << pagemap!

	if (pagemap@ ~~)
		// already invalid
		0 ok!
		0 phyaddr!

		return
	end

	IDENTITYSPACE pagemap |=

	auto pteaddr
	vaddr@ 12 >> 1023 & 2 << pagemap@ + pteaddr!

	if (pteaddr@@ PTE_V & ~~)
		// already invalid
		0 ok!
		0 phyaddr!

		return
	end elseif (invcow@ ~~)
		if (pteaddr@@ PTE_INSWAP &)
			// don't invalidate COW

			0 ok!
			0 phyaddr!

			return
		end
	end

	pteaddr@@ 5 >> PAGESHIFT << phyaddr!
	0 pteaddr@!

	if (asid@ 0 ==)
		vaddr@ PAGESHIFT >> // vpn
		0 // asid
		HALLimn2500TLBFlush
	end else
		vaddr@ PAGESHIFT >> // vpn
		asid@ 255 & 1 + // asid
		HALLimn2500TLBFlush
	end

	0 ok!
end

fn MmUnmapVirtualAddress { vaddr asid pagemap canfree attempt -- pte phyaddr ok }
	// caller should take care of any locking

	IDENTITYSPACE pagemap |=

	0 pte!
	0 ok!

	auto pdi
	vaddr@ 22 >> 2 << pagemap@ + pdi!

	auto pt
	pdi@@ 5 >> PAGESHIFT << pt!

	if (pt@ 0 ==)
		-1 ok!

		return
	end

	vaddr@ PAGESHIFT >> 1023 & 2 << pt@ + IDENTITYSPACE | pdi!

	pdi@@ pte!

	if (pte@ PTE_V & ~~)
		if (attempt@)
			// failing is fine
			-1 ok!

			if (pte@ PTE_INSWAP & ~~)
				return
			end

			// there was a swap offset, fall thru and dereference the page
			// table.
		end else
			vaddr@ "MmUnmapVirtualAddress: 0x%08x wasn't mapped!\n" KeCrash
		end
	end else
		pte@ 5 >> PAGESHIFT << phyaddr!

		0 pdi@!

		if (asid@ 0 ==)
			vaddr@ PAGESHIFT >> // vpn
			0 // asid
			HALLimn2500TLBFlush
		end else
			vaddr@ PAGESHIFT >> // vpn
			asid@ 255 & 1 + // asid
			HALLimn2500TLBFlush
		end
	end
end

fn MmMapUnmodifyPTE { pteaddr -- }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"MmMapUnmodifyPTE: ipl != IPLDPC\n" KeCrash
		end
	end

	// clear writable bit
	0xFFFFFFFD pteaddr@ &=

	MmFlushUserTLBAll
end

fn MmPageDirectoryInitialize { pagemap -- }
	// identically map kernel space into the new page directory...

	pagemap@ IDENTITYSPACE | 2048 + // dest
	HALPlatformKernelPageDirectory@ IDENTITYSPACE | 2048 + // src
	2048 // size
	memcpy
end

fn MmPageDirectoryDestroy { pagemap -- }
	auto count
	PAGESIZE 2 >> count!

	auto ptr
	pagemap@ IDENTITYSPACE | ptr!

	while (count@)
		auto pde
		ptr@@ pde!

		if (pde@ 5 >>)
			pde@ 5 >> MmPageFree
		end

		1 count -=
		4 ptr +=
	end

	pagemap@ PAGESHIFT >> MmPageFree
end