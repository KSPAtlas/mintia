#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OSStatus.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALDebug.h"

var PsProcessObjectType 0
public PsProcessObjectType

var PsProcessTable 0
public PsProcessTable

var PsProcessListHead 0
public PsProcessListHead

var PsProcessSystemProcess 0
public PsProcessSystemProcess

fn PsInitPhase0 { -- }
	auto ok

	0 // chargedprocess
	0 // entrysizelog
	ExHandleTableCreate ok! PsProcessTable!

	if (ok@)
		"PsInitPhase0: couldn't create Process table\n" KeCrash
	end

	auto type

	auto typeinit
	ObTypeInitializer_SIZEOF alloc typeinit!

	// initialize ObTypeInitializer fields

	ObTypeInitializer_SIZEOF typeinit@ ObTypeInitializer_Length + !
	0 typeinit@ ObTypeInitializer_OpenFunction + !
	0 typeinit@ ObTypeInitializer_CloseFunction + !
	pointerof PsProcessObjectDelete typeinit@ ObTypeInitializer_DeleteFunction + !

	// create Process type

	"Process" typeinit@ ObTypeInitializer_Name + !
	'ObPs' typeinit@ ObTypeInitializer_Tag + !
	0 typeinit@ ObTypeInitializer_BodySize + !
	typeinit@ ObTypeCreate ok! type!

	if (ok@)
		ok@ "PsInitPhase0: couldn't create Process type (%i)\n" KeCrash
	end

	type@ PsProcessObjectType!

	auto handle

	0 "OSKernel.exe" PsProcessCreate ok! handle!

	if (ok@)
		ok@ "PsInitPhase0: couldn't create 'OSKernel.exe' process (%i)\n" KeCrash
	end

	PsProcessObjectType@ // type
	handle@ // handle
	ObObjectReferenceByHandle ok! PsProcessSystemProcess! drop

	if (ok@)
		ok@ "PsInitPhase0: couldn't reference system process (%i)\n" KeCrash
	end

	PsProcessSystemProcess@ handle@ ok@ "ok = %d\nhandle = %d\nptr = %x\n" Printf

	// TODO create 'main' kernel thread, aka phase 1 initialization thread.
	// this thread will drop back out into ExInit.df, and then become the idle thread in KeMain.df.
end

fn PsInitPhase1 { -- }

end