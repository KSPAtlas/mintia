#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALDebug.h"

fn PsProcessCreateObject { sectionobject inherithandles owninguser parentprocess permissions name -- processobject ok }
	auto initial

	if (parentprocess@)
		0 initial!
	end else
		if (KeProcessCurrent KeProcessIdleProcess ~=)
			"PsProcessCreate: no parent process specified but not the idle process\n" KeCrash
		end

		KeProcessIdleProcess parentprocess!

		1 initial!
	end

	name@ // name
	0 // flags
	permissions@ // permissions
	owninguser@ // owninguser
	0 // quotabias
	PsProcess_SIZEOF // bodysize
	PsProcessObjectType@ // type
	ObObjectCreate ok! processobject!

	if (ok@)
		return
	end

	owninguser@ processobject@ PsProcess_OwningUser + !

	auto quotablock
	parentprocess@ PsProcess_QuotaBlock + @ quotablock!

	quotablock@ MmQuotaBlockReference
	quotablock@ processobject@ PsProcess_QuotaBlock + !

	auto handletable

	if (initial@ ~~)
		if (inherithandles@)
			pointerof ObHandleInheritFunction // func
			parentprocess@ PsProcess_HandleTable + @ // handletablesrc
			processobject@ // chargedprocess
			ExHandleTableDuplicate ok! handletable!

			if (ok@)
				quotablock@ MmQuotaBlockDereference

				processobject@ ObObjectDeallocate

				return
			end
		end else
			processobject@ // chargedprocess
			OBHANDLEENTRYSIZELOG // entrysizelog
			ExHandleTableCreate ok! handletable!

			if (ok@)
				quotablock@ MmQuotaBlockDereference

				processobject@ ObObjectDeallocate

				return
			end
		end
	end else
		// save some heap and reuse the idle process handle table
		parentprocess@ PsProcess_HandleTable + @ handletable!
	end

	handletable@ processobject@ PsProcess_HandleTable + !

	auto pid

	// XXX this may be VERY racey,
	// should probably take a mutex to lock out
	// any operations that take a process's PID
	// until this process is fully initialized.

	processobject@ // entryvalue
	PsProcessTable@ // handletable
	0 // locked
	ExHandleCreate ok! drop pid!

	if (ok@)
		quotablock@ MmQuotaBlockDereference

		if (initial@ ~~)
			0 handletable@ ExHandleTableDelete
		end

		processobject@ ObObjectDeallocate

		return
	end

	pid@ processobject@ PsProcess_PID + !

	// put it on the global process list

	auto rs
	HALCPUInterruptDisable rs!

	auto h

	PsProcessListHead@ h!

	if (h@)
		processobject@ h@ PsProcess_GlobalListPrev + !
		h@ processobject@ PsProcess_GlobalListNext + !
	end

	processobject@ PsProcessListHead!

	rs@ HALCPUInterruptRestore

	name@ // name
	pid@ // asid
	processobject@ // process
	KeProcessInitialize ok!

	if (DEBUGCHECKS)
		if (ok@)
			"PsProcessCreate: failed to initialize process\n" KeCrash
		end
	end

	if (initial@ ~~)
		sectionobject@ // sectionobject
		processobject@ // process
		MmProcessInitialize ok!

		if (ok@)
			// just dereference and let PsProcessObjectDelete take care of the cleanup

			processobject@ ObObjectDereferenceByPointer drop

			return
		end
	end
end

fn PsProcessCreate { sectionhandle inherithandles permissions name -- processhandle ok }
	auto sectionobject
	auto access

	MmSectionObjectType@ // type
	sectionhandle@ // handle
	ObObjectReferenceByHandle ok! sectionobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_READ ACCESS_WRITE | SeCheckAccess ok!

	if (ok@)
		sectionobject@ ObObjectDereferenceByPointer drop

		return
	end

	auto processobject

	auto curproc
	KeProcessCurrent curproc!

	sectionobject@ // sectionobject
	inherithandles@ // inherithandles
	curproc@ PsProcess_OwningUser + @ // owninguser
	curproc@ // parentprocess
	permissions@ // permissions
	name@ // name
	PsProcessCreateObject ok! processobject!

	1 // nocheck
	ACCESS_ALL // permissions
	processobject@ // object
	ObObjectOpen ok! processhandle!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end
end

fn PsThreadCreateObject { context1 context2 startfunc permissions name processobject -- threadobject ok }
	name@ // name
	0 // flags
	permissions@ // permissions
	SeUserCurrentGet // owninguser
	KETHREADSTACKSIZE // quotabias
	PsThread_SIZEOF // bodysize
	PsThreadObjectType@ // type
	ObObjectCreate ok! threadobject!

	if (ok@)
		return
	end

	auto kstack
	MmKernelStackAlloc ok! kstack!

	if (ok@)
		threadobject@ ObObjectDeallocate

		return
	end

	context1@ // context1
	context2@ // context2
	startfunc@ // startfunc
	processobject@ // process
	kstack@ // kstack
	name@ // name
	threadobject@ // thread
	KeThreadInitialize ok!

	if (DEBUGCHECKS)
		if (ok@)
			"PsThreadCreateObject: failed to initialize thread\n" KeCrash
		end
	end

	if (startfunc@ pointerof PsThreadUserEntry ==)
		threadobject@ MmThreadInitialize ok!

		if (ok@)
			kstack@ MmKernelStackFree

			threadobject@ KeThreadUninitialize

			threadobject@ ObObjectDeallocate

			return
		end
	end

	// bias reference count: this gets decremented when the thread is reaped.
	// note that the associated process object is also left referenced.
	// the process is dereferenced when the thread object is deleted.

	processobject@ ObObjectReferenceByPointer drop
	threadobject@ ObObjectReferenceByPointer drop

	// TODO be able to create suspended

	QUEUEBACK threadobject@ KeThreadReady
end

fn PsThreadCreate { context1 context2 startfunc permissions name processhandle -- threadhandle ok }
	auto processobject
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	auto threadobject

	context1@ // context1
	context2@ // context2
	startfunc@ // startfunc
	permissions@ // permissions
	name@ // name
	processobject@ // processobject
	PsThreadCreateObject ok! threadobject!

	1 // nocheck
	ACCESS_ALL // permissions
	threadobject@ // object
	ObObjectOpen ok! threadhandle!

	if (ok@)
		threadobject@ ObObjectDereferenceByPointer drop

		return
	end
end

fn PsProcessGetOwner { process -- owninguser }
	process@ PsProcess_OwningUser + @ owninguser!
end